{
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Team tuner API documentation",
        "title": "TT API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/api",
    "paths": {
        "/answer": {
            "get": {
                "description": "Get all answers: Get all answers for the current user, based on the JWT",
                "tags": [
                    "answer"
                ],
                "summary": "Get all answers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/out.QuestioneItemOut"
                            }
                        }
                    }
                }
            }
        },
        "/answer/bfi-report": {
            "get": {
                "description": "Get BFI report",
                "tags": [
                    "answer"
                ],
                "summary": "Get BFI report",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/out.BfiReportOut"
                        }
                    }
                }
            }
        },
        "/answer/questioner-status": {
            "get": {
                "description": "Get questioner status: Get the status of the questioner for the current user, based on the JWT",
                "tags": [
                    "answer"
                ],
                "summary": "Get questioner status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/out.QuestionerStatus"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logout the current user: Clears the JWT cookie",
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/auth/whoami": {
            "get": {
                "description": "Get who am I: Information about the current user",
                "tags": [
                    "auth"
                ],
                "summary": "Get who am I",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/out.WhoAmIOut"
                        }
                    }
                }
            }
        },
        "/course": {
            "get": {
                "description": "Get courses",
                "tags": [
                    "courses"
                ],
                "summary": "Get courses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/out.CourseOut"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create course",
                "tags": [
                    "courses"
                ],
                "summary": "Create course",
                "parameters": [
                    {
                        "description": "Create course body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/in.CreateCourseBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/out.CreatedCourseOut"
                        }
                    }
                }
            }
        },
        "/course/{courseId}/group-runs": {
            "get": {
                "description": "Get courses group runs",
                "tags": [
                    "courses"
                ],
                "summary": "Get courses group runs",
                "operationId": "get-courses-group-runs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course ID",
                        "name": "courseId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/out.GroupRunOut"
                            }
                        }
                    }
                }
            }
        },
        "/course/{courseId}/stats/bf-box-plot": {
            "get": {
                "description": "Get a big five box plot for a course",
                "tags": [
                    "courses"
                ],
                "summary": "Get a big five box plot for a course",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course ID",
                        "name": "courseId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/out.BigFiveBoxPlot"
                        }
                    }
                }
            }
        },
        "/course/{courseId}/stats/daily-activity": {
            "get": {
                "description": "Get a daily number of solved questioners for a course",
                "tags": [
                    "courses"
                ],
                "summary": "Get a daily number of solved questioners for a course",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course ID",
                        "name": "courseId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "endTime",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "startTime",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/out.DailyActivity"
                        }
                    }
                }
            }
        },
        "/course/{courseId}/stats/questioner-stats": {
            "get": {
                "description": "Get a questioner completion stats for a course",
                "tags": [
                    "courses"
                ],
                "summary": "Get a questioner completion stats for a course",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course ID",
                        "name": "courseId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/out.QuestionerCompletionStats"
                        }
                    }
                }
            }
        },
        "/group": {
            "get": {
                "description": "Get groups",
                "tags": [
                    "groups"
                ],
                "summary": "Get groups",
                "operationId": "get-groups-by-group-run",
                "parameters": [
                    {
                        "type": "string",
                        "name": "groupRun",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Groups filtered by query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/out.GroupOut"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    }
                }
            }
        },
        "/group/download/{groupRunId}": {
            "get": {
                "description": "Download groups as CSV",
                "tags": [
                    "groups"
                ],
                "summary": "Download groups as CSV",
                "operationId": "download-groups-csv",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group run id",
                        "name": "groupRunId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    }
                }
            }
        },
        "/group/form": {
            "post": {
                "description": "Create groups for a course. Runs an algorithm to assign students to groups. After the algorithm finished the following are created: A group run and groups with students asiigned to them",
                "tags": [
                    "groups"
                ],
                "summary": "Create group",
                "operationId": "create-groups",
                "parameters": [
                    {
                        "description": "Create groups request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/in.PostFormGroupsIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/out.Error"
                        }
                    }
                }
            }
        },
        "/group/{id}": {
            "get": {
                "description": "Get group by id: their students and stats (bfi scores)",
                "tags": [
                    "groups"
                ],
                "summary": "Get group by id: their students and stats",
                "operationId": "get-group-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group run id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/out.DetailedGroupOut"
                        }
                    }
                }
            }
        },
        "/login/github": {
            "post": {
                "description": "Github login",
                "tags": [
                    "login"
                ],
                "summary": "Github login",
                "parameters": [
                    {
                        "description": "Github login body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/in.GithubLoginIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/out.GithubLoginOut"
                        }
                    }
                }
            }
        },
        "/question": {
            "get": {
                "description": "Get questions",
                "tags": [
                    "questions"
                ],
                "summary": "Get questions",
                "parameters": [
                    {
                        "enum": [
                            "extroversion",
                            "agreeableness",
                            "conscientiousness",
                            "neuroticism",
                            "openness"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "QuestionTypesExtroversion",
                            "QuestionTypesAgreeableness",
                            "QuestionTypesConscientiousness",
                            "QuestionTypesNeuroticism",
                            "QuestionTypesOpenness"
                        ],
                        "name": "typeOfQuestion",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/out.QuestionerOut"
                        }
                    }
                }
            }
        },
        "/question/answer": {
            "post": {
                "description": "Post questions answer",
                "tags": [
                    "questions"
                ],
                "summary": "Post questions answer",
                "parameters": [
                    {
                        "description": "Post questions answer body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/in.PostQuestionAnswerIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/out.QuestionerOut"
                        }
                    }
                }
            }
        },
        "/question/submit": {
            "post": {
                "description": "Submit questions. If all questions are answered, the BFI report will be geneareted. Else the user gets back the list of unanswered questions.",
                "tags": [
                    "questions"
                ],
                "summary": "Submit questions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/out.SubmitQuestionsOut"
                        }
                    }
                }
            }
        },
        "/student": {
            "get": {
                "description": "Get students",
                "tags": [
                    "students"
                ],
                "summary": "Get students",
                "parameters": [
                    {
                        "type": "boolean",
                        "name": "completedQuestioner",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "courseId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "openness",
                            "conscientious",
                            "extraversion",
                            "agreeableness",
                            "neuroticism"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StudentSortFieldOpenness",
                            "StudentSortFieldConscientious",
                            "StudentSortFieldExtraversion",
                            "StudentSortFieldAgreeableness",
                            "StudentSortFieldNeuroticism"
                        ],
                        "name": "sortField",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "SortOrdeerASC",
                            "SortOrderDESC"
                        ],
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Students filtered by query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/out.PaginationOut"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "content": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/out.StudentOut"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.SortOrder": {
            "type": "string",
            "enum": [
                "ASC",
                "DESC"
            ],
            "x-enum-varnames": [
                "SortOrdeerASC",
                "SortOrderDESC"
            ]
        },
        "in.CreateCourseBody": {
            "type": "object",
            "required": [
                "code",
                "colour",
                "name"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 1
                },
                "colour": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "in.GithubLoginIn": {
            "type": "object",
            "required": [
                "navigateTo"
            ],
            "properties": {
                "navigateTo": {
                    "type": "string"
                }
            }
        },
        "in.PostFormGroupsIn": {
            "type": "object",
            "required": [
                "courseId",
                "groupSizes",
                "iterations",
                "temperature",
                "weightConscientiousness",
                "weightExtraversion",
                "weightNeuroticism",
                "weightSatisfaction"
            ],
            "properties": {
                "courseId": {
                    "description": "To which course the groups belong",
                    "type": "string"
                },
                "groupSizes": {
                    "description": "Array length must be at least 4\nEach element must be greater than 0 and less than 10",
                    "type": "array",
                    "minItems": 4,
                    "items": {
                        "type": "integer"
                    }
                },
                "iterations": {
                    "description": "General settings for SA",
                    "type": "integer"
                },
                "temperature": {
                    "type": "number"
                },
                "weightConscientiousness": {
                    "type": "number"
                },
                "weightExtraversion": {
                    "type": "number"
                },
                "weightNeuroticism": {
                    "type": "number"
                },
                "weightSatisfaction": {
                    "description": "Weights for SA",
                    "type": "number"
                }
            }
        },
        "in.PostQuestionAnswerIn": {
            "type": "object",
            "required": [
                "answerID",
                "value"
            ],
            "properties": {
                "answerID": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "in.QuestionType": {
            "type": "string",
            "enum": [
                "extroversion",
                "agreeableness",
                "conscientiousness",
                "neuroticism",
                "openness"
            ],
            "x-enum-varnames": [
                "QuestionTypesExtroversion",
                "QuestionTypesAgreeableness",
                "QuestionTypesConscientiousness",
                "QuestionTypesNeuroticism",
                "QuestionTypesOpenness"
            ]
        },
        "in.StudentSortField": {
            "type": "string",
            "enum": [
                "openness",
                "conscientious",
                "extraversion",
                "agreeableness",
                "neuroticism"
            ],
            "x-enum-varnames": [
                "StudentSortFieldOpenness",
                "StudentSortFieldConscientious",
                "StudentSortFieldExtraversion",
                "StudentSortFieldAgreeableness",
                "StudentSortFieldNeuroticism"
            ]
        },
        "out.BfiReportOut": {
            "type": "object",
            "required": [
                "agreeableness",
                "conscientiousness",
                "extraversion",
                "neuroticism",
                "openness"
            ],
            "properties": {
                "agreeableness": {
                    "type": "number"
                },
                "conscientiousness": {
                    "type": "number"
                },
                "extraversion": {
                    "type": "number"
                },
                "neuroticism": {
                    "type": "number"
                },
                "openness": {
                    "type": "number"
                }
            }
        },
        "out.BigFiveBoxPlot": {
            "type": "object",
            "required": [
                "agreeableness",
                "conscientious",
                "extraversion",
                "neuroticism",
                "openness"
            ],
            "properties": {
                "agreeableness": {
                    "$ref": "#/definitions/out.BoxPlotItem"
                },
                "conscientious": {
                    "$ref": "#/definitions/out.BoxPlotItem"
                },
                "extraversion": {
                    "$ref": "#/definitions/out.BoxPlotItem"
                },
                "neuroticism": {
                    "$ref": "#/definitions/out.BoxPlotItem"
                },
                "openness": {
                    "$ref": "#/definitions/out.BoxPlotItem"
                }
            }
        },
        "out.BoxPlotItem": {
            "type": "object",
            "required": [
                "dataPoints",
                "max",
                "mean",
                "min",
                "q1",
                "q3"
            ],
            "properties": {
                "dataPoints": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "max": {
                    "type": "number"
                },
                "mean": {
                    "type": "number"
                },
                "min": {
                    "type": "number"
                },
                "q1": {
                    "type": "number"
                },
                "q3": {
                    "type": "number"
                }
            }
        },
        "out.CourseOut": {
            "type": "object",
            "required": [
                "code",
                "colour",
                "createdAt",
                "id",
                "name",
                "updatedAt"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "colour": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "out.CreatedCourseOut": {
            "type": "object",
            "required": [
                "code",
                "colour",
                "createdAt",
                "id",
                "name",
                "updatedAt"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "colour": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "out.DailyActivity": {
            "type": "object",
            "required": [
                "activity",
                "endTime",
                "startTime"
            ],
            "properties": {
                "activity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/out.DailyStat"
                    }
                },
                "endTime": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                }
            }
        },
        "out.DailyStat": {
            "type": "object",
            "required": [
                "count",
                "day"
            ],
            "properties": {
                "count": {
                    "type": "integer"
                },
                "day": {
                    "type": "string"
                }
            }
        },
        "out.DetailedGroupOut": {
            "type": "object",
            "required": [
                "bigFiveBoxPlot",
                "courseCode",
                "courseColour",
                "courseName",
                "createdAt",
                "id",
                "name",
                "students",
                "updateAt"
            ],
            "properties": {
                "bigFiveBoxPlot": {
                    "$ref": "#/definitions/out.BigFiveBoxPlot"
                },
                "courseCode": {
                    "type": "string"
                },
                "courseColour": {
                    "type": "string"
                },
                "courseName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "students": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/out.StudentOut"
                    }
                },
                "updateAt": {
                    "type": "string"
                }
            }
        },
        "out.Error": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "out.GithubLoginOut": {
            "type": "object",
            "required": [
                "redirectUrl"
            ],
            "properties": {
                "redirectUrl": {
                    "type": "string"
                }
            }
        },
        "out.GroupOut": {
            "type": "object",
            "required": [
                "courseCode",
                "courseColour",
                "courseName",
                "createdAt",
                "id",
                "name",
                "students",
                "updateAt"
            ],
            "properties": {
                "courseCode": {
                    "type": "string"
                },
                "courseColour": {
                    "type": "string"
                },
                "courseName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "students": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/out.StudentOut"
                    }
                },
                "updateAt": {
                    "type": "string"
                }
            }
        },
        "out.GroupRunOut": {
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "updatedAt"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "out.OutUserRole": {
            "type": "string",
            "enum": [
                "student",
                "admin"
            ],
            "x-enum-varnames": [
                "RoleStudent",
                "RoleTeacher"
            ]
        },
        "out.PaginationOut": {
            "type": "object",
            "required": [
                "content",
                "currentPage",
                "limit",
                "offset",
                "totalCount",
                "totalPages"
            ],
            "properties": {
                "content": {},
                "currentPage": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "out.QuesitonOutType": {
            "type": "string",
            "enum": [
                "extraversion",
                "agreeableness",
                "conscientious",
                "neuroticism",
                "openness"
            ],
            "x-enum-varnames": [
                "QuestionTypeExtraversion",
                "QuesitonOutTypeAgreeableness",
                "QuesitonOutTypeConscientious",
                "QuesitonOutTypeNeuroticism",
                "QuesitonOutTypeOpenness"
            ]
        },
        "out.QuestioneItemOut": {
            "type": "object",
            "required": [
                "answer_id",
                "question",
                "question_id",
                "question_type"
            ],
            "properties": {
                "answer_id": {
                    "type": "string"
                },
                "answer_value": {
                    "type": "integer"
                },
                "question": {
                    "type": "string"
                },
                "question_id": {
                    "type": "string"
                },
                "question_type": {
                    "$ref": "#/definitions/out.QuesitonOutType"
                }
            }
        },
        "out.QuestionerCompletionStats": {
            "type": "object",
            "required": [
                "completed",
                "percent",
                "totalCount"
            ],
            "properties": {
                "completed": {
                    "type": "integer"
                },
                "percent": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "out.QuestionerOut": {
            "type": "object",
            "required": [
                "description",
                "questions",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/out.QuestioneItemOut"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "out.QuestionerStatus": {
            "type": "object",
            "required": [
                "finished_bfi_questioner"
            ],
            "properties": {
                "finished_bfi_questioner": {
                    "type": "boolean"
                }
            }
        },
        "out.StudentOut": {
            "type": "object",
            "required": [
                "completedQuestioner",
                "createdAt",
                "githubUsername",
                "id",
                "updatedAt"
            ],
            "properties": {
                "agreeableness": {
                    "type": "number"
                },
                "completedQuestioner": {
                    "type": "boolean"
                },
                "completedQuestionerAt": {
                    "type": "string"
                },
                "concientiousness": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "extraversion": {
                    "type": "number"
                },
                "githubUsername": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "neuroticism": {
                    "type": "number"
                },
                "openness": {
                    "type": "number"
                },
                "univeresityId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "out.SubmitQuestionsOut": {
            "type": "object",
            "required": [
                "success",
                "unresolved_questions"
            ],
            "properties": {
                "success": {
                    "type": "boolean"
                },
                "unresolved_questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/out.QuestioneItemOut"
                    }
                }
            }
        },
        "out.WhoAmIOut": {
            "type": "object",
            "required": [
                "finished_bfi",
                "github_username",
                "id",
                "role"
            ],
            "properties": {
                "finished_bfi": {
                    "type": "boolean"
                },
                "github_username": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/out.OutUserRole"
                }
            }
        }
    }
}