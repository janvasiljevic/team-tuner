// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"database/sql/driver"
	"fmt"
	"jv/team-tone-tuner/model/bfianswer"
	"jv/team-tone-tuner/model/bfiquestion"
	"jv/team-tone-tuner/model/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BfiQuestionQuery is the builder for querying BfiQuestion entities.
type BfiQuestionQuery struct {
	config
	ctx            *QueryContext
	order          []bfiquestion.OrderOption
	inters         []Interceptor
	predicates     []predicate.BfiQuestion
	withBfiAnswers *BfiAnswerQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BfiQuestionQuery builder.
func (bqq *BfiQuestionQuery) Where(ps ...predicate.BfiQuestion) *BfiQuestionQuery {
	bqq.predicates = append(bqq.predicates, ps...)
	return bqq
}

// Limit the number of records to be returned by this query.
func (bqq *BfiQuestionQuery) Limit(limit int) *BfiQuestionQuery {
	bqq.ctx.Limit = &limit
	return bqq
}

// Offset to start from.
func (bqq *BfiQuestionQuery) Offset(offset int) *BfiQuestionQuery {
	bqq.ctx.Offset = &offset
	return bqq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bqq *BfiQuestionQuery) Unique(unique bool) *BfiQuestionQuery {
	bqq.ctx.Unique = &unique
	return bqq
}

// Order specifies how the records should be ordered.
func (bqq *BfiQuestionQuery) Order(o ...bfiquestion.OrderOption) *BfiQuestionQuery {
	bqq.order = append(bqq.order, o...)
	return bqq
}

// QueryBfiAnswers chains the current query on the "bfi_answers" edge.
func (bqq *BfiQuestionQuery) QueryBfiAnswers() *BfiAnswerQuery {
	query := (&BfiAnswerClient{config: bqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bfiquestion.Table, bfiquestion.FieldID, selector),
			sqlgraph.To(bfianswer.Table, bfianswer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bfiquestion.BfiAnswersTable, bfiquestion.BfiAnswersColumn),
		)
		fromU = sqlgraph.SetNeighbors(bqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BfiQuestion entity from the query.
// Returns a *NotFoundError when no BfiQuestion was found.
func (bqq *BfiQuestionQuery) First(ctx context.Context) (*BfiQuestion, error) {
	nodes, err := bqq.Limit(1).All(setContextOp(ctx, bqq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bfiquestion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bqq *BfiQuestionQuery) FirstX(ctx context.Context) *BfiQuestion {
	node, err := bqq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BfiQuestion ID from the query.
// Returns a *NotFoundError when no BfiQuestion ID was found.
func (bqq *BfiQuestionQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bqq.Limit(1).IDs(setContextOp(ctx, bqq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bfiquestion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bqq *BfiQuestionQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := bqq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BfiQuestion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BfiQuestion entity is found.
// Returns a *NotFoundError when no BfiQuestion entities are found.
func (bqq *BfiQuestionQuery) Only(ctx context.Context) (*BfiQuestion, error) {
	nodes, err := bqq.Limit(2).All(setContextOp(ctx, bqq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bfiquestion.Label}
	default:
		return nil, &NotSingularError{bfiquestion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bqq *BfiQuestionQuery) OnlyX(ctx context.Context) *BfiQuestion {
	node, err := bqq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BfiQuestion ID in the query.
// Returns a *NotSingularError when more than one BfiQuestion ID is found.
// Returns a *NotFoundError when no entities are found.
func (bqq *BfiQuestionQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bqq.Limit(2).IDs(setContextOp(ctx, bqq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bfiquestion.Label}
	default:
		err = &NotSingularError{bfiquestion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bqq *BfiQuestionQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := bqq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BfiQuestions.
func (bqq *BfiQuestionQuery) All(ctx context.Context) ([]*BfiQuestion, error) {
	ctx = setContextOp(ctx, bqq.ctx, "All")
	if err := bqq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BfiQuestion, *BfiQuestionQuery]()
	return withInterceptors[[]*BfiQuestion](ctx, bqq, qr, bqq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bqq *BfiQuestionQuery) AllX(ctx context.Context) []*BfiQuestion {
	nodes, err := bqq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BfiQuestion IDs.
func (bqq *BfiQuestionQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if bqq.ctx.Unique == nil && bqq.path != nil {
		bqq.Unique(true)
	}
	ctx = setContextOp(ctx, bqq.ctx, "IDs")
	if err = bqq.Select(bfiquestion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bqq *BfiQuestionQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := bqq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bqq *BfiQuestionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bqq.ctx, "Count")
	if err := bqq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bqq, querierCount[*BfiQuestionQuery](), bqq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bqq *BfiQuestionQuery) CountX(ctx context.Context) int {
	count, err := bqq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bqq *BfiQuestionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bqq.ctx, "Exist")
	switch _, err := bqq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("model: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bqq *BfiQuestionQuery) ExistX(ctx context.Context) bool {
	exist, err := bqq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BfiQuestionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bqq *BfiQuestionQuery) Clone() *BfiQuestionQuery {
	if bqq == nil {
		return nil
	}
	return &BfiQuestionQuery{
		config:         bqq.config,
		ctx:            bqq.ctx.Clone(),
		order:          append([]bfiquestion.OrderOption{}, bqq.order...),
		inters:         append([]Interceptor{}, bqq.inters...),
		predicates:     append([]predicate.BfiQuestion{}, bqq.predicates...),
		withBfiAnswers: bqq.withBfiAnswers.Clone(),
		// clone intermediate query.
		sql:  bqq.sql.Clone(),
		path: bqq.path,
	}
}

// WithBfiAnswers tells the query-builder to eager-load the nodes that are connected to
// the "bfi_answers" edge. The optional arguments are used to configure the query builder of the edge.
func (bqq *BfiQuestionQuery) WithBfiAnswers(opts ...func(*BfiAnswerQuery)) *BfiQuestionQuery {
	query := (&BfiAnswerClient{config: bqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bqq.withBfiAnswers = query
	return bqq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BfiQuestion.Query().
//		GroupBy(bfiquestion.FieldCreatedAt).
//		Aggregate(model.Count()).
//		Scan(ctx, &v)
func (bqq *BfiQuestionQuery) GroupBy(field string, fields ...string) *BfiQuestionGroupBy {
	bqq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BfiQuestionGroupBy{build: bqq}
	grbuild.flds = &bqq.ctx.Fields
	grbuild.label = bfiquestion.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.BfiQuestion.Query().
//		Select(bfiquestion.FieldCreatedAt).
//		Scan(ctx, &v)
func (bqq *BfiQuestionQuery) Select(fields ...string) *BfiQuestionSelect {
	bqq.ctx.Fields = append(bqq.ctx.Fields, fields...)
	sbuild := &BfiQuestionSelect{BfiQuestionQuery: bqq}
	sbuild.label = bfiquestion.Label
	sbuild.flds, sbuild.scan = &bqq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BfiQuestionSelect configured with the given aggregations.
func (bqq *BfiQuestionQuery) Aggregate(fns ...AggregateFunc) *BfiQuestionSelect {
	return bqq.Select().Aggregate(fns...)
}

func (bqq *BfiQuestionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bqq.inters {
		if inter == nil {
			return fmt.Errorf("model: uninitialized interceptor (forgotten import model/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bqq); err != nil {
				return err
			}
		}
	}
	for _, f := range bqq.ctx.Fields {
		if !bfiquestion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
		}
	}
	if bqq.path != nil {
		prev, err := bqq.path(ctx)
		if err != nil {
			return err
		}
		bqq.sql = prev
	}
	return nil
}

func (bqq *BfiQuestionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BfiQuestion, error) {
	var (
		nodes       = []*BfiQuestion{}
		_spec       = bqq.querySpec()
		loadedTypes = [1]bool{
			bqq.withBfiAnswers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BfiQuestion).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BfiQuestion{config: bqq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bqq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bqq.withBfiAnswers; query != nil {
		if err := bqq.loadBfiAnswers(ctx, query, nodes,
			func(n *BfiQuestion) { n.Edges.BfiAnswers = []*BfiAnswer{} },
			func(n *BfiQuestion, e *BfiAnswer) { n.Edges.BfiAnswers = append(n.Edges.BfiAnswers, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bqq *BfiQuestionQuery) loadBfiAnswers(ctx context.Context, query *BfiAnswerQuery, nodes []*BfiQuestion, init func(*BfiQuestion), assign func(*BfiQuestion, *BfiAnswer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*BfiQuestion)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BfiAnswer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(bfiquestion.BfiAnswersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.bfi_question_bfi_answers
		if fk == nil {
			return fmt.Errorf(`foreign-key "bfi_question_bfi_answers" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "bfi_question_bfi_answers" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (bqq *BfiQuestionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bqq.querySpec()
	_spec.Node.Columns = bqq.ctx.Fields
	if len(bqq.ctx.Fields) > 0 {
		_spec.Unique = bqq.ctx.Unique != nil && *bqq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bqq.driver, _spec)
}

func (bqq *BfiQuestionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(bfiquestion.Table, bfiquestion.Columns, sqlgraph.NewFieldSpec(bfiquestion.FieldID, field.TypeUUID))
	_spec.From = bqq.sql
	if unique := bqq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bqq.path != nil {
		_spec.Unique = true
	}
	if fields := bqq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bfiquestion.FieldID)
		for i := range fields {
			if fields[i] != bfiquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bqq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bqq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bqq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bqq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bqq *BfiQuestionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bqq.driver.Dialect())
	t1 := builder.Table(bfiquestion.Table)
	columns := bqq.ctx.Fields
	if len(columns) == 0 {
		columns = bfiquestion.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bqq.sql != nil {
		selector = bqq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bqq.ctx.Unique != nil && *bqq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bqq.predicates {
		p(selector)
	}
	for _, p := range bqq.order {
		p(selector)
	}
	if offset := bqq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bqq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BfiQuestionGroupBy is the group-by builder for BfiQuestion entities.
type BfiQuestionGroupBy struct {
	selector
	build *BfiQuestionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bqgb *BfiQuestionGroupBy) Aggregate(fns ...AggregateFunc) *BfiQuestionGroupBy {
	bqgb.fns = append(bqgb.fns, fns...)
	return bqgb
}

// Scan applies the selector query and scans the result into the given value.
func (bqgb *BfiQuestionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bqgb.build.ctx, "GroupBy")
	if err := bqgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BfiQuestionQuery, *BfiQuestionGroupBy](ctx, bqgb.build, bqgb, bqgb.build.inters, v)
}

func (bqgb *BfiQuestionGroupBy) sqlScan(ctx context.Context, root *BfiQuestionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bqgb.fns))
	for _, fn := range bqgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bqgb.flds)+len(bqgb.fns))
		for _, f := range *bqgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bqgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bqgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BfiQuestionSelect is the builder for selecting fields of BfiQuestion entities.
type BfiQuestionSelect struct {
	*BfiQuestionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bqs *BfiQuestionSelect) Aggregate(fns ...AggregateFunc) *BfiQuestionSelect {
	bqs.fns = append(bqs.fns, fns...)
	return bqs
}

// Scan applies the selector query and scans the result into the given value.
func (bqs *BfiQuestionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bqs.ctx, "Select")
	if err := bqs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BfiQuestionQuery, *BfiQuestionSelect](ctx, bqs.BfiQuestionQuery, bqs, bqs.inters, v)
}

func (bqs *BfiQuestionSelect) sqlScan(ctx context.Context, root *BfiQuestionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bqs.fns))
	for _, fn := range bqs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bqs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bqs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
