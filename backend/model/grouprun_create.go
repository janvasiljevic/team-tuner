// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"jv/team-tone-tuner/model/course"
	"jv/team-tone-tuner/model/group"
	"jv/team-tone-tuner/model/grouprun"
	"jv/team-tone-tuner/model/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GroupRunCreate is the builder for creating a GroupRun entity.
type GroupRunCreate struct {
	config
	mutation *GroupRunMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (grc *GroupRunCreate) SetCreatedAt(t time.Time) *GroupRunCreate {
	grc.mutation.SetCreatedAt(t)
	return grc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (grc *GroupRunCreate) SetNillableCreatedAt(t *time.Time) *GroupRunCreate {
	if t != nil {
		grc.SetCreatedAt(*t)
	}
	return grc
}

// SetUpdatedAt sets the "updated_at" field.
func (grc *GroupRunCreate) SetUpdatedAt(t time.Time) *GroupRunCreate {
	grc.mutation.SetUpdatedAt(t)
	return grc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (grc *GroupRunCreate) SetNillableUpdatedAt(t *time.Time) *GroupRunCreate {
	if t != nil {
		grc.SetUpdatedAt(*t)
	}
	return grc
}

// SetGroupSize sets the "group_size" field.
func (grc *GroupRunCreate) SetGroupSize(i []int) *GroupRunCreate {
	grc.mutation.SetGroupSize(i)
	return grc
}

// SetBestScoreHistory sets the "best_score_history" field.
func (grc *GroupRunCreate) SetBestScoreHistory(f []float64) *GroupRunCreate {
	grc.mutation.SetBestScoreHistory(f)
	return grc
}

// SetCandidateScoreHistory sets the "candidate_score_history" field.
func (grc *GroupRunCreate) SetCandidateScoreHistory(f []float64) *GroupRunCreate {
	grc.mutation.SetCandidateScoreHistory(f)
	return grc
}

// SetID sets the "id" field.
func (grc *GroupRunCreate) SetID(u uuid.UUID) *GroupRunCreate {
	grc.mutation.SetID(u)
	return grc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (grc *GroupRunCreate) SetNillableID(u *uuid.UUID) *GroupRunCreate {
	if u != nil {
		grc.SetID(*u)
	}
	return grc
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (grc *GroupRunCreate) SetCreatedByID(id uuid.UUID) *GroupRunCreate {
	grc.mutation.SetCreatedByID(id)
	return grc
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (grc *GroupRunCreate) SetCreatedBy(u *User) *GroupRunCreate {
	return grc.SetCreatedByID(u.ID)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (grc *GroupRunCreate) AddGroupIDs(ids ...uuid.UUID) *GroupRunCreate {
	grc.mutation.AddGroupIDs(ids...)
	return grc
}

// AddGroups adds the "groups" edges to the Group entity.
func (grc *GroupRunCreate) AddGroups(g ...*Group) *GroupRunCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return grc.AddGroupIDs(ids...)
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (grc *GroupRunCreate) SetCourseID(id uuid.UUID) *GroupRunCreate {
	grc.mutation.SetCourseID(id)
	return grc
}

// SetCourse sets the "course" edge to the Course entity.
func (grc *GroupRunCreate) SetCourse(c *Course) *GroupRunCreate {
	return grc.SetCourseID(c.ID)
}

// Mutation returns the GroupRunMutation object of the builder.
func (grc *GroupRunCreate) Mutation() *GroupRunMutation {
	return grc.mutation
}

// Save creates the GroupRun in the database.
func (grc *GroupRunCreate) Save(ctx context.Context) (*GroupRun, error) {
	grc.defaults()
	return withHooks(ctx, grc.sqlSave, grc.mutation, grc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (grc *GroupRunCreate) SaveX(ctx context.Context) *GroupRun {
	v, err := grc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grc *GroupRunCreate) Exec(ctx context.Context) error {
	_, err := grc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grc *GroupRunCreate) ExecX(ctx context.Context) {
	if err := grc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (grc *GroupRunCreate) defaults() {
	if _, ok := grc.mutation.CreatedAt(); !ok {
		v := grouprun.DefaultCreatedAt()
		grc.mutation.SetCreatedAt(v)
	}
	if _, ok := grc.mutation.UpdatedAt(); !ok {
		v := grouprun.DefaultUpdatedAt()
		grc.mutation.SetUpdatedAt(v)
	}
	if _, ok := grc.mutation.ID(); !ok {
		v := grouprun.DefaultID()
		grc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (grc *GroupRunCreate) check() error {
	if _, ok := grc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`model: missing required field "GroupRun.created_at"`)}
	}
	if _, ok := grc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`model: missing required field "GroupRun.updated_at"`)}
	}
	if _, ok := grc.mutation.GroupSize(); !ok {
		return &ValidationError{Name: "group_size", err: errors.New(`model: missing required field "GroupRun.group_size"`)}
	}
	if _, ok := grc.mutation.BestScoreHistory(); !ok {
		return &ValidationError{Name: "best_score_history", err: errors.New(`model: missing required field "GroupRun.best_score_history"`)}
	}
	if _, ok := grc.mutation.CandidateScoreHistory(); !ok {
		return &ValidationError{Name: "candidate_score_history", err: errors.New(`model: missing required field "GroupRun.candidate_score_history"`)}
	}
	if _, ok := grc.mutation.CreatedByID(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`model: missing required edge "GroupRun.created_by"`)}
	}
	if _, ok := grc.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course", err: errors.New(`model: missing required edge "GroupRun.course"`)}
	}
	return nil
}

func (grc *GroupRunCreate) sqlSave(ctx context.Context) (*GroupRun, error) {
	if err := grc.check(); err != nil {
		return nil, err
	}
	_node, _spec := grc.createSpec()
	if err := sqlgraph.CreateNode(ctx, grc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	grc.mutation.id = &_node.ID
	grc.mutation.done = true
	return _node, nil
}

func (grc *GroupRunCreate) createSpec() (*GroupRun, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupRun{config: grc.config}
		_spec = sqlgraph.NewCreateSpec(grouprun.Table, sqlgraph.NewFieldSpec(grouprun.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = grc.conflict
	if id, ok := grc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := grc.mutation.CreatedAt(); ok {
		_spec.SetField(grouprun.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := grc.mutation.UpdatedAt(); ok {
		_spec.SetField(grouprun.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := grc.mutation.GroupSize(); ok {
		_spec.SetField(grouprun.FieldGroupSize, field.TypeJSON, value)
		_node.GroupSize = value
	}
	if value, ok := grc.mutation.BestScoreHistory(); ok {
		_spec.SetField(grouprun.FieldBestScoreHistory, field.TypeJSON, value)
		_node.BestScoreHistory = value
	}
	if value, ok := grc.mutation.CandidateScoreHistory(); ok {
		_spec.SetField(grouprun.FieldCandidateScoreHistory, field.TypeJSON, value)
		_node.CandidateScoreHistory = value
	}
	if nodes := grc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grouprun.CreatedByTable,
			Columns: []string{grouprun.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_run_created_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := grc.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grouprun.GroupsTable,
			Columns: []string{grouprun.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := grc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprun.CourseTable,
			Columns: []string{grouprun.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.course_group_runs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GroupRun.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GroupRunUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (grc *GroupRunCreate) OnConflict(opts ...sql.ConflictOption) *GroupRunUpsertOne {
	grc.conflict = opts
	return &GroupRunUpsertOne{
		create: grc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GroupRun.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (grc *GroupRunCreate) OnConflictColumns(columns ...string) *GroupRunUpsertOne {
	grc.conflict = append(grc.conflict, sql.ConflictColumns(columns...))
	return &GroupRunUpsertOne{
		create: grc,
	}
}

type (
	// GroupRunUpsertOne is the builder for "upsert"-ing
	//  one GroupRun node.
	GroupRunUpsertOne struct {
		create *GroupRunCreate
	}

	// GroupRunUpsert is the "OnConflict" setter.
	GroupRunUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *GroupRunUpsert) SetUpdatedAt(v time.Time) *GroupRunUpsert {
	u.Set(grouprun.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GroupRunUpsert) UpdateUpdatedAt() *GroupRunUpsert {
	u.SetExcluded(grouprun.FieldUpdatedAt)
	return u
}

// SetGroupSize sets the "group_size" field.
func (u *GroupRunUpsert) SetGroupSize(v []int) *GroupRunUpsert {
	u.Set(grouprun.FieldGroupSize, v)
	return u
}

// UpdateGroupSize sets the "group_size" field to the value that was provided on create.
func (u *GroupRunUpsert) UpdateGroupSize() *GroupRunUpsert {
	u.SetExcluded(grouprun.FieldGroupSize)
	return u
}

// SetBestScoreHistory sets the "best_score_history" field.
func (u *GroupRunUpsert) SetBestScoreHistory(v []float64) *GroupRunUpsert {
	u.Set(grouprun.FieldBestScoreHistory, v)
	return u
}

// UpdateBestScoreHistory sets the "best_score_history" field to the value that was provided on create.
func (u *GroupRunUpsert) UpdateBestScoreHistory() *GroupRunUpsert {
	u.SetExcluded(grouprun.FieldBestScoreHistory)
	return u
}

// SetCandidateScoreHistory sets the "candidate_score_history" field.
func (u *GroupRunUpsert) SetCandidateScoreHistory(v []float64) *GroupRunUpsert {
	u.Set(grouprun.FieldCandidateScoreHistory, v)
	return u
}

// UpdateCandidateScoreHistory sets the "candidate_score_history" field to the value that was provided on create.
func (u *GroupRunUpsert) UpdateCandidateScoreHistory() *GroupRunUpsert {
	u.SetExcluded(grouprun.FieldCandidateScoreHistory)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GroupRun.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(grouprun.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GroupRunUpsertOne) UpdateNewValues() *GroupRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(grouprun.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(grouprun.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GroupRun.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GroupRunUpsertOne) Ignore() *GroupRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GroupRunUpsertOne) DoNothing() *GroupRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GroupRunCreate.OnConflict
// documentation for more info.
func (u *GroupRunUpsertOne) Update(set func(*GroupRunUpsert)) *GroupRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GroupRunUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GroupRunUpsertOne) SetUpdatedAt(v time.Time) *GroupRunUpsertOne {
	return u.Update(func(s *GroupRunUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GroupRunUpsertOne) UpdateUpdatedAt() *GroupRunUpsertOne {
	return u.Update(func(s *GroupRunUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetGroupSize sets the "group_size" field.
func (u *GroupRunUpsertOne) SetGroupSize(v []int) *GroupRunUpsertOne {
	return u.Update(func(s *GroupRunUpsert) {
		s.SetGroupSize(v)
	})
}

// UpdateGroupSize sets the "group_size" field to the value that was provided on create.
func (u *GroupRunUpsertOne) UpdateGroupSize() *GroupRunUpsertOne {
	return u.Update(func(s *GroupRunUpsert) {
		s.UpdateGroupSize()
	})
}

// SetBestScoreHistory sets the "best_score_history" field.
func (u *GroupRunUpsertOne) SetBestScoreHistory(v []float64) *GroupRunUpsertOne {
	return u.Update(func(s *GroupRunUpsert) {
		s.SetBestScoreHistory(v)
	})
}

// UpdateBestScoreHistory sets the "best_score_history" field to the value that was provided on create.
func (u *GroupRunUpsertOne) UpdateBestScoreHistory() *GroupRunUpsertOne {
	return u.Update(func(s *GroupRunUpsert) {
		s.UpdateBestScoreHistory()
	})
}

// SetCandidateScoreHistory sets the "candidate_score_history" field.
func (u *GroupRunUpsertOne) SetCandidateScoreHistory(v []float64) *GroupRunUpsertOne {
	return u.Update(func(s *GroupRunUpsert) {
		s.SetCandidateScoreHistory(v)
	})
}

// UpdateCandidateScoreHistory sets the "candidate_score_history" field to the value that was provided on create.
func (u *GroupRunUpsertOne) UpdateCandidateScoreHistory() *GroupRunUpsertOne {
	return u.Update(func(s *GroupRunUpsert) {
		s.UpdateCandidateScoreHistory()
	})
}

// Exec executes the query.
func (u *GroupRunUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for GroupRunCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GroupRunUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GroupRunUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: GroupRunUpsertOne.ID is not supported by MySQL driver. Use GroupRunUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GroupRunUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GroupRunCreateBulk is the builder for creating many GroupRun entities in bulk.
type GroupRunCreateBulk struct {
	config
	builders []*GroupRunCreate
	conflict []sql.ConflictOption
}

// Save creates the GroupRun entities in the database.
func (grcb *GroupRunCreateBulk) Save(ctx context.Context) ([]*GroupRun, error) {
	specs := make([]*sqlgraph.CreateSpec, len(grcb.builders))
	nodes := make([]*GroupRun, len(grcb.builders))
	mutators := make([]Mutator, len(grcb.builders))
	for i := range grcb.builders {
		func(i int, root context.Context) {
			builder := grcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupRunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, grcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = grcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, grcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, grcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (grcb *GroupRunCreateBulk) SaveX(ctx context.Context) []*GroupRun {
	v, err := grcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grcb *GroupRunCreateBulk) Exec(ctx context.Context) error {
	_, err := grcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grcb *GroupRunCreateBulk) ExecX(ctx context.Context) {
	if err := grcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GroupRun.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GroupRunUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (grcb *GroupRunCreateBulk) OnConflict(opts ...sql.ConflictOption) *GroupRunUpsertBulk {
	grcb.conflict = opts
	return &GroupRunUpsertBulk{
		create: grcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GroupRun.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (grcb *GroupRunCreateBulk) OnConflictColumns(columns ...string) *GroupRunUpsertBulk {
	grcb.conflict = append(grcb.conflict, sql.ConflictColumns(columns...))
	return &GroupRunUpsertBulk{
		create: grcb,
	}
}

// GroupRunUpsertBulk is the builder for "upsert"-ing
// a bulk of GroupRun nodes.
type GroupRunUpsertBulk struct {
	create *GroupRunCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GroupRun.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(grouprun.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GroupRunUpsertBulk) UpdateNewValues() *GroupRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(grouprun.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(grouprun.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GroupRun.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GroupRunUpsertBulk) Ignore() *GroupRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GroupRunUpsertBulk) DoNothing() *GroupRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GroupRunCreateBulk.OnConflict
// documentation for more info.
func (u *GroupRunUpsertBulk) Update(set func(*GroupRunUpsert)) *GroupRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GroupRunUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GroupRunUpsertBulk) SetUpdatedAt(v time.Time) *GroupRunUpsertBulk {
	return u.Update(func(s *GroupRunUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GroupRunUpsertBulk) UpdateUpdatedAt() *GroupRunUpsertBulk {
	return u.Update(func(s *GroupRunUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetGroupSize sets the "group_size" field.
func (u *GroupRunUpsertBulk) SetGroupSize(v []int) *GroupRunUpsertBulk {
	return u.Update(func(s *GroupRunUpsert) {
		s.SetGroupSize(v)
	})
}

// UpdateGroupSize sets the "group_size" field to the value that was provided on create.
func (u *GroupRunUpsertBulk) UpdateGroupSize() *GroupRunUpsertBulk {
	return u.Update(func(s *GroupRunUpsert) {
		s.UpdateGroupSize()
	})
}

// SetBestScoreHistory sets the "best_score_history" field.
func (u *GroupRunUpsertBulk) SetBestScoreHistory(v []float64) *GroupRunUpsertBulk {
	return u.Update(func(s *GroupRunUpsert) {
		s.SetBestScoreHistory(v)
	})
}

// UpdateBestScoreHistory sets the "best_score_history" field to the value that was provided on create.
func (u *GroupRunUpsertBulk) UpdateBestScoreHistory() *GroupRunUpsertBulk {
	return u.Update(func(s *GroupRunUpsert) {
		s.UpdateBestScoreHistory()
	})
}

// SetCandidateScoreHistory sets the "candidate_score_history" field.
func (u *GroupRunUpsertBulk) SetCandidateScoreHistory(v []float64) *GroupRunUpsertBulk {
	return u.Update(func(s *GroupRunUpsert) {
		s.SetCandidateScoreHistory(v)
	})
}

// UpdateCandidateScoreHistory sets the "candidate_score_history" field to the value that was provided on create.
func (u *GroupRunUpsertBulk) UpdateCandidateScoreHistory() *GroupRunUpsertBulk {
	return u.Update(func(s *GroupRunUpsert) {
		s.UpdateCandidateScoreHistory()
	})
}

// Exec executes the query.
func (u *GroupRunUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the GroupRunCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for GroupRunCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GroupRunUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
