// Code generated by ent, DO NOT EDIT.

package bfianswer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the bfianswer type in the database.
	Label = "bfi_answer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeBfiQuestion holds the string denoting the bfi_question edge name in mutations.
	EdgeBfiQuestion = "bfi_question"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// Table holds the table name of the bfianswer in the database.
	Table = "bfi_answers"
	// BfiQuestionTable is the table that holds the bfi_question relation/edge.
	BfiQuestionTable = "bfi_answers"
	// BfiQuestionInverseTable is the table name for the BfiQuestion entity.
	// It exists in this package in order to avoid circular dependency with the "bfiquestion" package.
	BfiQuestionInverseTable = "bfi_questions"
	// BfiQuestionColumn is the table column denoting the bfi_question relation/edge.
	BfiQuestionColumn = "bfi_question_bfi_answers"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "bfi_answers"
	// StudentInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	StudentInverseTable = "users"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "user_bfi_answers"
)

// Columns holds all SQL columns for bfianswer fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "bfi_answers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bfi_question_bfi_answers",
	"user_bfi_answers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the BfiAnswer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByBfiQuestionField orders the results by bfi_question field.
func ByBfiQuestionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBfiQuestionStep(), sql.OrderByField(field, opts...))
	}
}

// ByStudentField orders the results by student field.
func ByStudentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudentStep(), sql.OrderByField(field, opts...))
	}
}
func newBfiQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BfiQuestionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BfiQuestionTable, BfiQuestionColumn),
	)
}
func newStudentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StudentTable, StudentColumn),
	)
}
