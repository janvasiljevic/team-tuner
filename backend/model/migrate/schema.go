// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BfiAnswersColumns holds the columns for the "bfi_answers" table.
	BfiAnswersColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "value", Type: field.TypeInt, Nullable: true},
		{Name: "bfi_question_bfi_answers", Type: field.TypeUUID, Nullable: true},
		{Name: "user_bfi_answers", Type: field.TypeUUID, Nullable: true},
	}
	// BfiAnswersTable holds the schema information for the "bfi_answers" table.
	BfiAnswersTable = &schema.Table{
		Name:       "bfi_answers",
		Columns:    BfiAnswersColumns,
		PrimaryKey: []*schema.Column{BfiAnswersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "bfi_answers_bfi_questions_bfi_answers",
				Columns:    []*schema.Column{BfiAnswersColumns[4]},
				RefColumns: []*schema.Column{BfiQuestionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "bfi_answers_users_bfi_answers",
				Columns:    []*schema.Column{BfiAnswersColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BfiQuestionsColumns holds the columns for the "bfi_questions" table.
	BfiQuestionsColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "questiono", Type: field.TypeString},
		{Name: "facet", Type: field.TypeString},
		{Name: "dimension", Type: field.TypeEnum, Enums: []string{"extraversion", "agreeableness", "conscientiousness", "neuroticism", "openness"}},
		{Name: "influence", Type: field.TypeEnum, Enums: []string{"positive", "negative"}},
		{Name: "alpha", Type: field.TypeFloat64},
	}
	// BfiQuestionsTable holds the schema information for the "bfi_questions" table.
	BfiQuestionsTable = &schema.Table{
		Name:       "bfi_questions",
		Columns:    BfiQuestionsColumns,
		PrimaryKey: []*schema.Column{BfiQuestionsColumns[0]},
	}
	// BfiReportsColumns holds the columns for the "bfi_reports" table.
	BfiReportsColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "conscientiousness", Type: field.TypeJSON},
		{Name: "extraversion", Type: field.TypeJSON},
		{Name: "agreeableness", Type: field.TypeJSON},
		{Name: "neuroticism", Type: field.TypeJSON},
		{Name: "openness", Type: field.TypeJSON},
	}
	// BfiReportsTable holds the schema information for the "bfi_reports" table.
	BfiReportsTable = &schema.Table{
		Name:       "bfi_reports",
		Columns:    BfiReportsColumns,
		PrimaryKey: []*schema.Column{BfiReportsColumns[0]},
	}
	// CoursesColumns holds the columns for the "courses" table.
	CoursesColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "code", Type: field.TypeString, Unique: true},
		{Name: "colour", Type: field.TypeString, Default: "#000000"},
	}
	// CoursesTable holds the schema information for the "courses" table.
	CoursesTable = &schema.Table{
		Name:       "courses",
		Columns:    CoursesColumns,
		PrimaryKey: []*schema.Column{CoursesColumns[0]},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "course_groups", Type: field.TypeUUID},
		{Name: "group_run_groups", Type: field.TypeUUID},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "groups_courses_groups",
				Columns:    []*schema.Column{GroupsColumns[4]},
				RefColumns: []*schema.Column{CoursesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "groups_group_runs_groups",
				Columns:    []*schema.Column{GroupsColumns[5]},
				RefColumns: []*schema.Column{GroupRunsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// GroupRunsColumns holds the columns for the "group_runs" table.
	GroupRunsColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "group_size", Type: field.TypeJSON},
		{Name: "best_score_history", Type: field.TypeJSON},
		{Name: "candidate_score_history", Type: field.TypeJSON},
		{Name: "course_group_runs", Type: field.TypeUUID},
		{Name: "group_run_created_by", Type: field.TypeUUID},
	}
	// GroupRunsTable holds the schema information for the "group_runs" table.
	GroupRunsTable = &schema.Table{
		Name:       "group_runs",
		Columns:    GroupRunsColumns,
		PrimaryKey: []*schema.Column{GroupRunsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_runs_courses_group_runs",
				Columns:    []*schema.Column{GroupRunsColumns[6]},
				RefColumns: []*schema.Column{CoursesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "group_runs_users_created_by",
				Columns:    []*schema.Column{GroupRunsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "github_username", Type: field.TypeString, Unique: true},
		{Name: "univeresity_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"student", "admin"}, Default: "student"},
		{Name: "bfi_report_student", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_bfi_reports_student",
				Columns:    []*schema.Column{UsersColumns[6]},
				RefColumns: []*schema.Column{BfiReportsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CourseStudentsColumns holds the columns for the "course_students" table.
	CourseStudentsColumns = []*schema.Column{
		{Name: "course_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// CourseStudentsTable holds the schema information for the "course_students" table.
	CourseStudentsTable = &schema.Table{
		Name:       "course_students",
		Columns:    CourseStudentsColumns,
		PrimaryKey: []*schema.Column{CourseStudentsColumns[0], CourseStudentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "course_students_course_id",
				Columns:    []*schema.Column{CourseStudentsColumns[0]},
				RefColumns: []*schema.Column{CoursesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "course_students_user_id",
				Columns:    []*schema.Column{CourseStudentsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GroupStudentsColumns holds the columns for the "group_students" table.
	GroupStudentsColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// GroupStudentsTable holds the schema information for the "group_students" table.
	GroupStudentsTable = &schema.Table{
		Name:       "group_students",
		Columns:    GroupStudentsColumns,
		PrimaryKey: []*schema.Column{GroupStudentsColumns[0], GroupStudentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_students_group_id",
				Columns:    []*schema.Column{GroupStudentsColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_students_user_id",
				Columns:    []*schema.Column{GroupStudentsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BfiAnswersTable,
		BfiQuestionsTable,
		BfiReportsTable,
		CoursesTable,
		GroupsTable,
		GroupRunsTable,
		UsersTable,
		CourseStudentsTable,
		GroupStudentsTable,
	}
)

func init() {
	BfiAnswersTable.ForeignKeys[0].RefTable = BfiQuestionsTable
	BfiAnswersTable.ForeignKeys[1].RefTable = UsersTable
	GroupsTable.ForeignKeys[0].RefTable = CoursesTable
	GroupsTable.ForeignKeys[1].RefTable = GroupRunsTable
	GroupRunsTable.ForeignKeys[0].RefTable = CoursesTable
	GroupRunsTable.ForeignKeys[1].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = BfiReportsTable
	CourseStudentsTable.ForeignKeys[0].RefTable = CoursesTable
	CourseStudentsTable.ForeignKeys[1].RefTable = UsersTable
	GroupStudentsTable.ForeignKeys[0].RefTable = GroupsTable
	GroupStudentsTable.ForeignKeys[1].RefTable = UsersTable
}
