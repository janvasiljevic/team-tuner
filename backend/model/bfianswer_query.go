// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"jv/team-tone-tuner/model/bfianswer"
	"jv/team-tone-tuner/model/bfiquestion"
	"jv/team-tone-tuner/model/predicate"
	"jv/team-tone-tuner/model/user"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BfiAnswerQuery is the builder for querying BfiAnswer entities.
type BfiAnswerQuery struct {
	config
	ctx             *QueryContext
	order           []bfianswer.OrderOption
	inters          []Interceptor
	predicates      []predicate.BfiAnswer
	withBfiQuestion *BfiQuestionQuery
	withStudent     *UserQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BfiAnswerQuery builder.
func (baq *BfiAnswerQuery) Where(ps ...predicate.BfiAnswer) *BfiAnswerQuery {
	baq.predicates = append(baq.predicates, ps...)
	return baq
}

// Limit the number of records to be returned by this query.
func (baq *BfiAnswerQuery) Limit(limit int) *BfiAnswerQuery {
	baq.ctx.Limit = &limit
	return baq
}

// Offset to start from.
func (baq *BfiAnswerQuery) Offset(offset int) *BfiAnswerQuery {
	baq.ctx.Offset = &offset
	return baq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (baq *BfiAnswerQuery) Unique(unique bool) *BfiAnswerQuery {
	baq.ctx.Unique = &unique
	return baq
}

// Order specifies how the records should be ordered.
func (baq *BfiAnswerQuery) Order(o ...bfianswer.OrderOption) *BfiAnswerQuery {
	baq.order = append(baq.order, o...)
	return baq
}

// QueryBfiQuestion chains the current query on the "bfi_question" edge.
func (baq *BfiAnswerQuery) QueryBfiQuestion() *BfiQuestionQuery {
	query := (&BfiQuestionClient{config: baq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bfianswer.Table, bfianswer.FieldID, selector),
			sqlgraph.To(bfiquestion.Table, bfiquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bfianswer.BfiQuestionTable, bfianswer.BfiQuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStudent chains the current query on the "student" edge.
func (baq *BfiAnswerQuery) QueryStudent() *UserQuery {
	query := (&UserClient{config: baq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bfianswer.Table, bfianswer.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bfianswer.StudentTable, bfianswer.StudentColumn),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BfiAnswer entity from the query.
// Returns a *NotFoundError when no BfiAnswer was found.
func (baq *BfiAnswerQuery) First(ctx context.Context) (*BfiAnswer, error) {
	nodes, err := baq.Limit(1).All(setContextOp(ctx, baq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bfianswer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (baq *BfiAnswerQuery) FirstX(ctx context.Context) *BfiAnswer {
	node, err := baq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BfiAnswer ID from the query.
// Returns a *NotFoundError when no BfiAnswer ID was found.
func (baq *BfiAnswerQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = baq.Limit(1).IDs(setContextOp(ctx, baq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bfianswer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (baq *BfiAnswerQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := baq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BfiAnswer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BfiAnswer entity is found.
// Returns a *NotFoundError when no BfiAnswer entities are found.
func (baq *BfiAnswerQuery) Only(ctx context.Context) (*BfiAnswer, error) {
	nodes, err := baq.Limit(2).All(setContextOp(ctx, baq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bfianswer.Label}
	default:
		return nil, &NotSingularError{bfianswer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (baq *BfiAnswerQuery) OnlyX(ctx context.Context) *BfiAnswer {
	node, err := baq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BfiAnswer ID in the query.
// Returns a *NotSingularError when more than one BfiAnswer ID is found.
// Returns a *NotFoundError when no entities are found.
func (baq *BfiAnswerQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = baq.Limit(2).IDs(setContextOp(ctx, baq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bfianswer.Label}
	default:
		err = &NotSingularError{bfianswer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (baq *BfiAnswerQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := baq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BfiAnswers.
func (baq *BfiAnswerQuery) All(ctx context.Context) ([]*BfiAnswer, error) {
	ctx = setContextOp(ctx, baq.ctx, "All")
	if err := baq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BfiAnswer, *BfiAnswerQuery]()
	return withInterceptors[[]*BfiAnswer](ctx, baq, qr, baq.inters)
}

// AllX is like All, but panics if an error occurs.
func (baq *BfiAnswerQuery) AllX(ctx context.Context) []*BfiAnswer {
	nodes, err := baq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BfiAnswer IDs.
func (baq *BfiAnswerQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if baq.ctx.Unique == nil && baq.path != nil {
		baq.Unique(true)
	}
	ctx = setContextOp(ctx, baq.ctx, "IDs")
	if err = baq.Select(bfianswer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (baq *BfiAnswerQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := baq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (baq *BfiAnswerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, baq.ctx, "Count")
	if err := baq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, baq, querierCount[*BfiAnswerQuery](), baq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (baq *BfiAnswerQuery) CountX(ctx context.Context) int {
	count, err := baq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (baq *BfiAnswerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, baq.ctx, "Exist")
	switch _, err := baq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("model: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (baq *BfiAnswerQuery) ExistX(ctx context.Context) bool {
	exist, err := baq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BfiAnswerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (baq *BfiAnswerQuery) Clone() *BfiAnswerQuery {
	if baq == nil {
		return nil
	}
	return &BfiAnswerQuery{
		config:          baq.config,
		ctx:             baq.ctx.Clone(),
		order:           append([]bfianswer.OrderOption{}, baq.order...),
		inters:          append([]Interceptor{}, baq.inters...),
		predicates:      append([]predicate.BfiAnswer{}, baq.predicates...),
		withBfiQuestion: baq.withBfiQuestion.Clone(),
		withStudent:     baq.withStudent.Clone(),
		// clone intermediate query.
		sql:  baq.sql.Clone(),
		path: baq.path,
	}
}

// WithBfiQuestion tells the query-builder to eager-load the nodes that are connected to
// the "bfi_question" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BfiAnswerQuery) WithBfiQuestion(opts ...func(*BfiQuestionQuery)) *BfiAnswerQuery {
	query := (&BfiQuestionClient{config: baq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	baq.withBfiQuestion = query
	return baq
}

// WithStudent tells the query-builder to eager-load the nodes that are connected to
// the "student" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BfiAnswerQuery) WithStudent(opts ...func(*UserQuery)) *BfiAnswerQuery {
	query := (&UserClient{config: baq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	baq.withStudent = query
	return baq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BfiAnswer.Query().
//		GroupBy(bfianswer.FieldCreatedAt).
//		Aggregate(model.Count()).
//		Scan(ctx, &v)
func (baq *BfiAnswerQuery) GroupBy(field string, fields ...string) *BfiAnswerGroupBy {
	baq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BfiAnswerGroupBy{build: baq}
	grbuild.flds = &baq.ctx.Fields
	grbuild.label = bfianswer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.BfiAnswer.Query().
//		Select(bfianswer.FieldCreatedAt).
//		Scan(ctx, &v)
func (baq *BfiAnswerQuery) Select(fields ...string) *BfiAnswerSelect {
	baq.ctx.Fields = append(baq.ctx.Fields, fields...)
	sbuild := &BfiAnswerSelect{BfiAnswerQuery: baq}
	sbuild.label = bfianswer.Label
	sbuild.flds, sbuild.scan = &baq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BfiAnswerSelect configured with the given aggregations.
func (baq *BfiAnswerQuery) Aggregate(fns ...AggregateFunc) *BfiAnswerSelect {
	return baq.Select().Aggregate(fns...)
}

func (baq *BfiAnswerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range baq.inters {
		if inter == nil {
			return fmt.Errorf("model: uninitialized interceptor (forgotten import model/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, baq); err != nil {
				return err
			}
		}
	}
	for _, f := range baq.ctx.Fields {
		if !bfianswer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
		}
	}
	if baq.path != nil {
		prev, err := baq.path(ctx)
		if err != nil {
			return err
		}
		baq.sql = prev
	}
	return nil
}

func (baq *BfiAnswerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BfiAnswer, error) {
	var (
		nodes       = []*BfiAnswer{}
		withFKs     = baq.withFKs
		_spec       = baq.querySpec()
		loadedTypes = [2]bool{
			baq.withBfiQuestion != nil,
			baq.withStudent != nil,
		}
	)
	if baq.withBfiQuestion != nil || baq.withStudent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, bfianswer.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BfiAnswer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BfiAnswer{config: baq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, baq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := baq.withBfiQuestion; query != nil {
		if err := baq.loadBfiQuestion(ctx, query, nodes, nil,
			func(n *BfiAnswer, e *BfiQuestion) { n.Edges.BfiQuestion = e }); err != nil {
			return nil, err
		}
	}
	if query := baq.withStudent; query != nil {
		if err := baq.loadStudent(ctx, query, nodes, nil,
			func(n *BfiAnswer, e *User) { n.Edges.Student = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (baq *BfiAnswerQuery) loadBfiQuestion(ctx context.Context, query *BfiQuestionQuery, nodes []*BfiAnswer, init func(*BfiAnswer), assign func(*BfiAnswer, *BfiQuestion)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*BfiAnswer)
	for i := range nodes {
		if nodes[i].bfi_question_bfi_answers == nil {
			continue
		}
		fk := *nodes[i].bfi_question_bfi_answers
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(bfiquestion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "bfi_question_bfi_answers" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (baq *BfiAnswerQuery) loadStudent(ctx context.Context, query *UserQuery, nodes []*BfiAnswer, init func(*BfiAnswer), assign func(*BfiAnswer, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*BfiAnswer)
	for i := range nodes {
		if nodes[i].user_bfi_answers == nil {
			continue
		}
		fk := *nodes[i].user_bfi_answers
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_bfi_answers" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (baq *BfiAnswerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := baq.querySpec()
	_spec.Node.Columns = baq.ctx.Fields
	if len(baq.ctx.Fields) > 0 {
		_spec.Unique = baq.ctx.Unique != nil && *baq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, baq.driver, _spec)
}

func (baq *BfiAnswerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(bfianswer.Table, bfianswer.Columns, sqlgraph.NewFieldSpec(bfianswer.FieldID, field.TypeUUID))
	_spec.From = baq.sql
	if unique := baq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if baq.path != nil {
		_spec.Unique = true
	}
	if fields := baq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bfianswer.FieldID)
		for i := range fields {
			if fields[i] != bfianswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := baq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := baq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := baq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := baq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (baq *BfiAnswerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(baq.driver.Dialect())
	t1 := builder.Table(bfianswer.Table)
	columns := baq.ctx.Fields
	if len(columns) == 0 {
		columns = bfianswer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if baq.sql != nil {
		selector = baq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if baq.ctx.Unique != nil && *baq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range baq.predicates {
		p(selector)
	}
	for _, p := range baq.order {
		p(selector)
	}
	if offset := baq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := baq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BfiAnswerGroupBy is the group-by builder for BfiAnswer entities.
type BfiAnswerGroupBy struct {
	selector
	build *BfiAnswerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bagb *BfiAnswerGroupBy) Aggregate(fns ...AggregateFunc) *BfiAnswerGroupBy {
	bagb.fns = append(bagb.fns, fns...)
	return bagb
}

// Scan applies the selector query and scans the result into the given value.
func (bagb *BfiAnswerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bagb.build.ctx, "GroupBy")
	if err := bagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BfiAnswerQuery, *BfiAnswerGroupBy](ctx, bagb.build, bagb, bagb.build.inters, v)
}

func (bagb *BfiAnswerGroupBy) sqlScan(ctx context.Context, root *BfiAnswerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bagb.fns))
	for _, fn := range bagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bagb.flds)+len(bagb.fns))
		for _, f := range *bagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BfiAnswerSelect is the builder for selecting fields of BfiAnswer entities.
type BfiAnswerSelect struct {
	*BfiAnswerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bas *BfiAnswerSelect) Aggregate(fns ...AggregateFunc) *BfiAnswerSelect {
	bas.fns = append(bas.fns, fns...)
	return bas
}

// Scan applies the selector query and scans the result into the given value.
func (bas *BfiAnswerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bas.ctx, "Select")
	if err := bas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BfiAnswerQuery, *BfiAnswerSelect](ctx, bas.BfiAnswerQuery, bas, bas.inters, v)
}

func (bas *BfiAnswerSelect) sqlScan(ctx context.Context, root *BfiAnswerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bas.fns))
	for _, fn := range bas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
