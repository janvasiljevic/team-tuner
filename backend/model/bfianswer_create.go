// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"jv/team-tone-tuner/model/bfianswer"
	"jv/team-tone-tuner/model/bfiquestion"
	"jv/team-tone-tuner/model/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BfiAnswerCreate is the builder for creating a BfiAnswer entity.
type BfiAnswerCreate struct {
	config
	mutation *BfiAnswerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bac *BfiAnswerCreate) SetCreatedAt(t time.Time) *BfiAnswerCreate {
	bac.mutation.SetCreatedAt(t)
	return bac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bac *BfiAnswerCreate) SetNillableCreatedAt(t *time.Time) *BfiAnswerCreate {
	if t != nil {
		bac.SetCreatedAt(*t)
	}
	return bac
}

// SetUpdatedAt sets the "updated_at" field.
func (bac *BfiAnswerCreate) SetUpdatedAt(t time.Time) *BfiAnswerCreate {
	bac.mutation.SetUpdatedAt(t)
	return bac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bac *BfiAnswerCreate) SetNillableUpdatedAt(t *time.Time) *BfiAnswerCreate {
	if t != nil {
		bac.SetUpdatedAt(*t)
	}
	return bac
}

// SetValue sets the "value" field.
func (bac *BfiAnswerCreate) SetValue(i int) *BfiAnswerCreate {
	bac.mutation.SetValue(i)
	return bac
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (bac *BfiAnswerCreate) SetNillableValue(i *int) *BfiAnswerCreate {
	if i != nil {
		bac.SetValue(*i)
	}
	return bac
}

// SetID sets the "id" field.
func (bac *BfiAnswerCreate) SetID(u uuid.UUID) *BfiAnswerCreate {
	bac.mutation.SetID(u)
	return bac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bac *BfiAnswerCreate) SetNillableID(u *uuid.UUID) *BfiAnswerCreate {
	if u != nil {
		bac.SetID(*u)
	}
	return bac
}

// SetBfiQuestionID sets the "bfi_question" edge to the BfiQuestion entity by ID.
func (bac *BfiAnswerCreate) SetBfiQuestionID(id uuid.UUID) *BfiAnswerCreate {
	bac.mutation.SetBfiQuestionID(id)
	return bac
}

// SetNillableBfiQuestionID sets the "bfi_question" edge to the BfiQuestion entity by ID if the given value is not nil.
func (bac *BfiAnswerCreate) SetNillableBfiQuestionID(id *uuid.UUID) *BfiAnswerCreate {
	if id != nil {
		bac = bac.SetBfiQuestionID(*id)
	}
	return bac
}

// SetBfiQuestion sets the "bfi_question" edge to the BfiQuestion entity.
func (bac *BfiAnswerCreate) SetBfiQuestion(b *BfiQuestion) *BfiAnswerCreate {
	return bac.SetBfiQuestionID(b.ID)
}

// SetStudentID sets the "student" edge to the User entity by ID.
func (bac *BfiAnswerCreate) SetStudentID(id uuid.UUID) *BfiAnswerCreate {
	bac.mutation.SetStudentID(id)
	return bac
}

// SetNillableStudentID sets the "student" edge to the User entity by ID if the given value is not nil.
func (bac *BfiAnswerCreate) SetNillableStudentID(id *uuid.UUID) *BfiAnswerCreate {
	if id != nil {
		bac = bac.SetStudentID(*id)
	}
	return bac
}

// SetStudent sets the "student" edge to the User entity.
func (bac *BfiAnswerCreate) SetStudent(u *User) *BfiAnswerCreate {
	return bac.SetStudentID(u.ID)
}

// Mutation returns the BfiAnswerMutation object of the builder.
func (bac *BfiAnswerCreate) Mutation() *BfiAnswerMutation {
	return bac.mutation
}

// Save creates the BfiAnswer in the database.
func (bac *BfiAnswerCreate) Save(ctx context.Context) (*BfiAnswer, error) {
	bac.defaults()
	return withHooks(ctx, bac.sqlSave, bac.mutation, bac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bac *BfiAnswerCreate) SaveX(ctx context.Context) *BfiAnswer {
	v, err := bac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bac *BfiAnswerCreate) Exec(ctx context.Context) error {
	_, err := bac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bac *BfiAnswerCreate) ExecX(ctx context.Context) {
	if err := bac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bac *BfiAnswerCreate) defaults() {
	if _, ok := bac.mutation.CreatedAt(); !ok {
		v := bfianswer.DefaultCreatedAt()
		bac.mutation.SetCreatedAt(v)
	}
	if _, ok := bac.mutation.UpdatedAt(); !ok {
		v := bfianswer.DefaultUpdatedAt()
		bac.mutation.SetUpdatedAt(v)
	}
	if _, ok := bac.mutation.ID(); !ok {
		v := bfianswer.DefaultID()
		bac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bac *BfiAnswerCreate) check() error {
	if _, ok := bac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`model: missing required field "BfiAnswer.created_at"`)}
	}
	if _, ok := bac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`model: missing required field "BfiAnswer.updated_at"`)}
	}
	if v, ok := bac.mutation.Value(); ok {
		if err := bfianswer.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`model: validator failed for field "BfiAnswer.value": %w`, err)}
		}
	}
	return nil
}

func (bac *BfiAnswerCreate) sqlSave(ctx context.Context) (*BfiAnswer, error) {
	if err := bac.check(); err != nil {
		return nil, err
	}
	_node, _spec := bac.createSpec()
	if err := sqlgraph.CreateNode(ctx, bac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bac.mutation.id = &_node.ID
	bac.mutation.done = true
	return _node, nil
}

func (bac *BfiAnswerCreate) createSpec() (*BfiAnswer, *sqlgraph.CreateSpec) {
	var (
		_node = &BfiAnswer{config: bac.config}
		_spec = sqlgraph.NewCreateSpec(bfianswer.Table, sqlgraph.NewFieldSpec(bfianswer.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = bac.conflict
	if id, ok := bac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bac.mutation.CreatedAt(); ok {
		_spec.SetField(bfianswer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bac.mutation.UpdatedAt(); ok {
		_spec.SetField(bfianswer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bac.mutation.Value(); ok {
		_spec.SetField(bfianswer.FieldValue, field.TypeInt, value)
		_node.Value = &value
	}
	if nodes := bac.mutation.BfiQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bfianswer.BfiQuestionTable,
			Columns: []string{bfianswer.BfiQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfiquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bfi_question_bfi_answers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bac.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bfianswer.StudentTable,
			Columns: []string{bfianswer.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_bfi_answers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BfiAnswer.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BfiAnswerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bac *BfiAnswerCreate) OnConflict(opts ...sql.ConflictOption) *BfiAnswerUpsertOne {
	bac.conflict = opts
	return &BfiAnswerUpsertOne{
		create: bac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BfiAnswer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bac *BfiAnswerCreate) OnConflictColumns(columns ...string) *BfiAnswerUpsertOne {
	bac.conflict = append(bac.conflict, sql.ConflictColumns(columns...))
	return &BfiAnswerUpsertOne{
		create: bac,
	}
}

type (
	// BfiAnswerUpsertOne is the builder for "upsert"-ing
	//  one BfiAnswer node.
	BfiAnswerUpsertOne struct {
		create *BfiAnswerCreate
	}

	// BfiAnswerUpsert is the "OnConflict" setter.
	BfiAnswerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BfiAnswerUpsert) SetUpdatedAt(v time.Time) *BfiAnswerUpsert {
	u.Set(bfianswer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BfiAnswerUpsert) UpdateUpdatedAt() *BfiAnswerUpsert {
	u.SetExcluded(bfianswer.FieldUpdatedAt)
	return u
}

// SetValue sets the "value" field.
func (u *BfiAnswerUpsert) SetValue(v int) *BfiAnswerUpsert {
	u.Set(bfianswer.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *BfiAnswerUpsert) UpdateValue() *BfiAnswerUpsert {
	u.SetExcluded(bfianswer.FieldValue)
	return u
}

// AddValue adds v to the "value" field.
func (u *BfiAnswerUpsert) AddValue(v int) *BfiAnswerUpsert {
	u.Add(bfianswer.FieldValue, v)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *BfiAnswerUpsert) ClearValue() *BfiAnswerUpsert {
	u.SetNull(bfianswer.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BfiAnswer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bfianswer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BfiAnswerUpsertOne) UpdateNewValues() *BfiAnswerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(bfianswer.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(bfianswer.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BfiAnswer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BfiAnswerUpsertOne) Ignore() *BfiAnswerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BfiAnswerUpsertOne) DoNothing() *BfiAnswerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BfiAnswerCreate.OnConflict
// documentation for more info.
func (u *BfiAnswerUpsertOne) Update(set func(*BfiAnswerUpsert)) *BfiAnswerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BfiAnswerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BfiAnswerUpsertOne) SetUpdatedAt(v time.Time) *BfiAnswerUpsertOne {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BfiAnswerUpsertOne) UpdateUpdatedAt() *BfiAnswerUpsertOne {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetValue sets the "value" field.
func (u *BfiAnswerUpsertOne) SetValue(v int) *BfiAnswerUpsertOne {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *BfiAnswerUpsertOne) AddValue(v int) *BfiAnswerUpsertOne {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *BfiAnswerUpsertOne) UpdateValue() *BfiAnswerUpsertOne {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *BfiAnswerUpsertOne) ClearValue() *BfiAnswerUpsertOne {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *BfiAnswerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for BfiAnswerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BfiAnswerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BfiAnswerUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: BfiAnswerUpsertOne.ID is not supported by MySQL driver. Use BfiAnswerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BfiAnswerUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BfiAnswerCreateBulk is the builder for creating many BfiAnswer entities in bulk.
type BfiAnswerCreateBulk struct {
	config
	builders []*BfiAnswerCreate
	conflict []sql.ConflictOption
}

// Save creates the BfiAnswer entities in the database.
func (bacb *BfiAnswerCreateBulk) Save(ctx context.Context) ([]*BfiAnswer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bacb.builders))
	nodes := make([]*BfiAnswer, len(bacb.builders))
	mutators := make([]Mutator, len(bacb.builders))
	for i := range bacb.builders {
		func(i int, root context.Context) {
			builder := bacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BfiAnswerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bacb *BfiAnswerCreateBulk) SaveX(ctx context.Context) []*BfiAnswer {
	v, err := bacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bacb *BfiAnswerCreateBulk) Exec(ctx context.Context) error {
	_, err := bacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bacb *BfiAnswerCreateBulk) ExecX(ctx context.Context) {
	if err := bacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BfiAnswer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BfiAnswerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bacb *BfiAnswerCreateBulk) OnConflict(opts ...sql.ConflictOption) *BfiAnswerUpsertBulk {
	bacb.conflict = opts
	return &BfiAnswerUpsertBulk{
		create: bacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BfiAnswer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bacb *BfiAnswerCreateBulk) OnConflictColumns(columns ...string) *BfiAnswerUpsertBulk {
	bacb.conflict = append(bacb.conflict, sql.ConflictColumns(columns...))
	return &BfiAnswerUpsertBulk{
		create: bacb,
	}
}

// BfiAnswerUpsertBulk is the builder for "upsert"-ing
// a bulk of BfiAnswer nodes.
type BfiAnswerUpsertBulk struct {
	create *BfiAnswerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BfiAnswer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bfianswer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BfiAnswerUpsertBulk) UpdateNewValues() *BfiAnswerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(bfianswer.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(bfianswer.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BfiAnswer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BfiAnswerUpsertBulk) Ignore() *BfiAnswerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BfiAnswerUpsertBulk) DoNothing() *BfiAnswerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BfiAnswerCreateBulk.OnConflict
// documentation for more info.
func (u *BfiAnswerUpsertBulk) Update(set func(*BfiAnswerUpsert)) *BfiAnswerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BfiAnswerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BfiAnswerUpsertBulk) SetUpdatedAt(v time.Time) *BfiAnswerUpsertBulk {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BfiAnswerUpsertBulk) UpdateUpdatedAt() *BfiAnswerUpsertBulk {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetValue sets the "value" field.
func (u *BfiAnswerUpsertBulk) SetValue(v int) *BfiAnswerUpsertBulk {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *BfiAnswerUpsertBulk) AddValue(v int) *BfiAnswerUpsertBulk {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *BfiAnswerUpsertBulk) UpdateValue() *BfiAnswerUpsertBulk {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *BfiAnswerUpsertBulk) ClearValue() *BfiAnswerUpsertBulk {
	return u.Update(func(s *BfiAnswerUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *BfiAnswerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the BfiAnswerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for BfiAnswerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BfiAnswerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
