// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldGithubUsername holds the string denoting the github_username field in the database.
	FieldGithubUsername = "github_username"
	// FieldUniveresityID holds the string denoting the univeresity_id field in the database.
	FieldUniveresityID = "univeresity_id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeCourses holds the string denoting the courses edge name in mutations.
	EdgeCourses = "courses"
	// EdgeBfiReport holds the string denoting the bfi_report edge name in mutations.
	EdgeBfiReport = "bfi_report"
	// EdgeBfiAnswers holds the string denoting the bfi_answers edge name in mutations.
	EdgeBfiAnswers = "bfi_answers"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// Table holds the table name of the user in the database.
	Table = "users"
	// CoursesTable is the table that holds the courses relation/edge. The primary key declared below.
	CoursesTable = "course_students"
	// CoursesInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CoursesInverseTable = "courses"
	// BfiReportTable is the table that holds the bfi_report relation/edge.
	BfiReportTable = "users"
	// BfiReportInverseTable is the table name for the BfiReport entity.
	// It exists in this package in order to avoid circular dependency with the "bfireport" package.
	BfiReportInverseTable = "bfi_reports"
	// BfiReportColumn is the table column denoting the bfi_report relation/edge.
	BfiReportColumn = "bfi_report_student"
	// BfiAnswersTable is the table that holds the bfi_answers relation/edge.
	BfiAnswersTable = "bfi_answers"
	// BfiAnswersInverseTable is the table name for the BfiAnswer entity.
	// It exists in this package in order to avoid circular dependency with the "bfianswer" package.
	BfiAnswersInverseTable = "bfi_answers"
	// BfiAnswersColumn is the table column denoting the bfi_answers relation/edge.
	BfiAnswersColumn = "user_bfi_answers"
	// GroupsTable is the table that holds the groups relation/edge. The primary key declared below.
	GroupsTable = "group_students"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "groups"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldGithubUsername,
	FieldUniveresityID,
	FieldRole,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bfi_report_student",
}

var (
	// CoursesPrimaryKey and CoursesColumn2 are the table columns denoting the
	// primary key for the courses relation (M2M).
	CoursesPrimaryKey = []string{"course_id", "user_id"}
	// GroupsPrimaryKey and GroupsColumn2 are the table columns denoting the
	// primary key for the groups relation (M2M).
	GroupsPrimaryKey = []string{"group_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Role defines the type for the "role" enum field.
type Role string

// RoleStudent is the default value of the Role enum.
const DefaultRole = RoleStudent

// Role values.
const (
	RoleStudent Role = "student"
	RoleAdmin   Role = "admin"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleStudent, RoleAdmin:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByGithubUsername orders the results by the github_username field.
func ByGithubUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubUsername, opts...).ToFunc()
}

// ByUniveresityID orders the results by the univeresity_id field.
func ByUniveresityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUniveresityID, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByCoursesCount orders the results by courses count.
func ByCoursesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCoursesStep(), opts...)
	}
}

// ByCourses orders the results by courses terms.
func ByCourses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoursesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBfiReportField orders the results by bfi_report field.
func ByBfiReportField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBfiReportStep(), sql.OrderByField(field, opts...))
	}
}

// ByBfiAnswersCount orders the results by bfi_answers count.
func ByBfiAnswersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBfiAnswersStep(), opts...)
	}
}

// ByBfiAnswers orders the results by bfi_answers terms.
func ByBfiAnswers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBfiAnswersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupsCount orders the results by groups count.
func ByGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupsStep(), opts...)
	}
}

// ByGroups orders the results by groups terms.
func ByGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCoursesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoursesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CoursesTable, CoursesPrimaryKey...),
	)
}
func newBfiReportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BfiReportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, BfiReportTable, BfiReportColumn),
	)
}
func newBfiAnswersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BfiAnswersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BfiAnswersTable, BfiAnswersColumn),
	)
}
func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GroupsTable, GroupsPrimaryKey...),
	)
}
