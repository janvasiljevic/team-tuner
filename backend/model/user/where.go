// Code generated by ent, DO NOT EDIT.

package user

import (
	"jv/team-tone-tuner/model/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// GithubUsername applies equality check predicate on the "github_username" field. It's identical to GithubUsernameEQ.
func GithubUsername(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGithubUsername, v))
}

// UniveresityID applies equality check predicate on the "univeresity_id" field. It's identical to UniveresityIDEQ.
func UniveresityID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUniveresityID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// GithubUsernameEQ applies the EQ predicate on the "github_username" field.
func GithubUsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGithubUsername, v))
}

// GithubUsernameNEQ applies the NEQ predicate on the "github_username" field.
func GithubUsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGithubUsername, v))
}

// GithubUsernameIn applies the In predicate on the "github_username" field.
func GithubUsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldGithubUsername, vs...))
}

// GithubUsernameNotIn applies the NotIn predicate on the "github_username" field.
func GithubUsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGithubUsername, vs...))
}

// GithubUsernameGT applies the GT predicate on the "github_username" field.
func GithubUsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldGithubUsername, v))
}

// GithubUsernameGTE applies the GTE predicate on the "github_username" field.
func GithubUsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGithubUsername, v))
}

// GithubUsernameLT applies the LT predicate on the "github_username" field.
func GithubUsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldGithubUsername, v))
}

// GithubUsernameLTE applies the LTE predicate on the "github_username" field.
func GithubUsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGithubUsername, v))
}

// GithubUsernameContains applies the Contains predicate on the "github_username" field.
func GithubUsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldGithubUsername, v))
}

// GithubUsernameHasPrefix applies the HasPrefix predicate on the "github_username" field.
func GithubUsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldGithubUsername, v))
}

// GithubUsernameHasSuffix applies the HasSuffix predicate on the "github_username" field.
func GithubUsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldGithubUsername, v))
}

// GithubUsernameEqualFold applies the EqualFold predicate on the "github_username" field.
func GithubUsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldGithubUsername, v))
}

// GithubUsernameContainsFold applies the ContainsFold predicate on the "github_username" field.
func GithubUsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldGithubUsername, v))
}

// UniveresityIDEQ applies the EQ predicate on the "univeresity_id" field.
func UniveresityIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUniveresityID, v))
}

// UniveresityIDNEQ applies the NEQ predicate on the "univeresity_id" field.
func UniveresityIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUniveresityID, v))
}

// UniveresityIDIn applies the In predicate on the "univeresity_id" field.
func UniveresityIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUniveresityID, vs...))
}

// UniveresityIDNotIn applies the NotIn predicate on the "univeresity_id" field.
func UniveresityIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUniveresityID, vs...))
}

// UniveresityIDGT applies the GT predicate on the "univeresity_id" field.
func UniveresityIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUniveresityID, v))
}

// UniveresityIDGTE applies the GTE predicate on the "univeresity_id" field.
func UniveresityIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUniveresityID, v))
}

// UniveresityIDLT applies the LT predicate on the "univeresity_id" field.
func UniveresityIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUniveresityID, v))
}

// UniveresityIDLTE applies the LTE predicate on the "univeresity_id" field.
func UniveresityIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUniveresityID, v))
}

// UniveresityIDContains applies the Contains predicate on the "univeresity_id" field.
func UniveresityIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUniveresityID, v))
}

// UniveresityIDHasPrefix applies the HasPrefix predicate on the "univeresity_id" field.
func UniveresityIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUniveresityID, v))
}

// UniveresityIDHasSuffix applies the HasSuffix predicate on the "univeresity_id" field.
func UniveresityIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUniveresityID, v))
}

// UniveresityIDIsNil applies the IsNil predicate on the "univeresity_id" field.
func UniveresityIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUniveresityID))
}

// UniveresityIDNotNil applies the NotNil predicate on the "univeresity_id" field.
func UniveresityIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUniveresityID))
}

// UniveresityIDEqualFold applies the EqualFold predicate on the "univeresity_id" field.
func UniveresityIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUniveresityID, v))
}

// UniveresityIDContainsFold applies the ContainsFold predicate on the "univeresity_id" field.
func UniveresityIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUniveresityID, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRole, vs...))
}

// HasCourses applies the HasEdge predicate on the "courses" edge.
func HasCourses() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CoursesTable, CoursesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCoursesWith applies the HasEdge predicate on the "courses" edge with a given conditions (other predicates).
func HasCoursesWith(preds ...predicate.Course) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCoursesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBfiReport applies the HasEdge predicate on the "bfi_report" edge.
func HasBfiReport() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, BfiReportTable, BfiReportColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBfiReportWith applies the HasEdge predicate on the "bfi_report" edge with a given conditions (other predicates).
func HasBfiReportWith(preds ...predicate.BfiReport) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newBfiReportStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBfiAnswers applies the HasEdge predicate on the "bfi_answers" edge.
func HasBfiAnswers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BfiAnswersTable, BfiAnswersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBfiAnswersWith applies the HasEdge predicate on the "bfi_answers" edge with a given conditions (other predicates).
func HasBfiAnswersWith(preds ...predicate.BfiAnswer) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newBfiAnswersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, GroupsTable, GroupsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Group) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newGroupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
