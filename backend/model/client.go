// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"log"

	"jv/team-tone-tuner/model/migrate"

	"jv/team-tone-tuner/model/bfianswer"
	"jv/team-tone-tuner/model/bfiquestion"
	"jv/team-tone-tuner/model/bfireport"
	"jv/team-tone-tuner/model/course"
	"jv/team-tone-tuner/model/group"
	"jv/team-tone-tuner/model/grouprun"
	"jv/team-tone-tuner/model/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BfiAnswer is the client for interacting with the BfiAnswer builders.
	BfiAnswer *BfiAnswerClient
	// BfiQuestion is the client for interacting with the BfiQuestion builders.
	BfiQuestion *BfiQuestionClient
	// BfiReport is the client for interacting with the BfiReport builders.
	BfiReport *BfiReportClient
	// Course is the client for interacting with the Course builders.
	Course *CourseClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// GroupRun is the client for interacting with the GroupRun builders.
	GroupRun *GroupRunClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BfiAnswer = NewBfiAnswerClient(c.config)
	c.BfiQuestion = NewBfiQuestionClient(c.config)
	c.BfiReport = NewBfiReportClient(c.config)
	c.Course = NewCourseClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.GroupRun = NewGroupRunClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("model: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("model: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		BfiAnswer:   NewBfiAnswerClient(cfg),
		BfiQuestion: NewBfiQuestionClient(cfg),
		BfiReport:   NewBfiReportClient(cfg),
		Course:      NewCourseClient(cfg),
		Group:       NewGroupClient(cfg),
		GroupRun:    NewGroupRunClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		BfiAnswer:   NewBfiAnswerClient(cfg),
		BfiQuestion: NewBfiQuestionClient(cfg),
		BfiReport:   NewBfiReportClient(cfg),
		Course:      NewCourseClient(cfg),
		Group:       NewGroupClient(cfg),
		GroupRun:    NewGroupRunClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BfiAnswer.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.BfiAnswer, c.BfiQuestion, c.BfiReport, c.Course, c.Group, c.GroupRun, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.BfiAnswer, c.BfiQuestion, c.BfiReport, c.Course, c.Group, c.GroupRun, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BfiAnswerMutation:
		return c.BfiAnswer.mutate(ctx, m)
	case *BfiQuestionMutation:
		return c.BfiQuestion.mutate(ctx, m)
	case *BfiReportMutation:
		return c.BfiReport.mutate(ctx, m)
	case *CourseMutation:
		return c.Course.mutate(ctx, m)
	case *GroupMutation:
		return c.Group.mutate(ctx, m)
	case *GroupRunMutation:
		return c.GroupRun.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("model: unknown mutation type %T", m)
	}
}

// BfiAnswerClient is a client for the BfiAnswer schema.
type BfiAnswerClient struct {
	config
}

// NewBfiAnswerClient returns a client for the BfiAnswer from the given config.
func NewBfiAnswerClient(c config) *BfiAnswerClient {
	return &BfiAnswerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bfianswer.Hooks(f(g(h())))`.
func (c *BfiAnswerClient) Use(hooks ...Hook) {
	c.hooks.BfiAnswer = append(c.hooks.BfiAnswer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bfianswer.Intercept(f(g(h())))`.
func (c *BfiAnswerClient) Intercept(interceptors ...Interceptor) {
	c.inters.BfiAnswer = append(c.inters.BfiAnswer, interceptors...)
}

// Create returns a builder for creating a BfiAnswer entity.
func (c *BfiAnswerClient) Create() *BfiAnswerCreate {
	mutation := newBfiAnswerMutation(c.config, OpCreate)
	return &BfiAnswerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BfiAnswer entities.
func (c *BfiAnswerClient) CreateBulk(builders ...*BfiAnswerCreate) *BfiAnswerCreateBulk {
	return &BfiAnswerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BfiAnswer.
func (c *BfiAnswerClient) Update() *BfiAnswerUpdate {
	mutation := newBfiAnswerMutation(c.config, OpUpdate)
	return &BfiAnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BfiAnswerClient) UpdateOne(ba *BfiAnswer) *BfiAnswerUpdateOne {
	mutation := newBfiAnswerMutation(c.config, OpUpdateOne, withBfiAnswer(ba))
	return &BfiAnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BfiAnswerClient) UpdateOneID(id uuid.UUID) *BfiAnswerUpdateOne {
	mutation := newBfiAnswerMutation(c.config, OpUpdateOne, withBfiAnswerID(id))
	return &BfiAnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BfiAnswer.
func (c *BfiAnswerClient) Delete() *BfiAnswerDelete {
	mutation := newBfiAnswerMutation(c.config, OpDelete)
	return &BfiAnswerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BfiAnswerClient) DeleteOne(ba *BfiAnswer) *BfiAnswerDeleteOne {
	return c.DeleteOneID(ba.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BfiAnswerClient) DeleteOneID(id uuid.UUID) *BfiAnswerDeleteOne {
	builder := c.Delete().Where(bfianswer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BfiAnswerDeleteOne{builder}
}

// Query returns a query builder for BfiAnswer.
func (c *BfiAnswerClient) Query() *BfiAnswerQuery {
	return &BfiAnswerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBfiAnswer},
		inters: c.Interceptors(),
	}
}

// Get returns a BfiAnswer entity by its id.
func (c *BfiAnswerClient) Get(ctx context.Context, id uuid.UUID) (*BfiAnswer, error) {
	return c.Query().Where(bfianswer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BfiAnswerClient) GetX(ctx context.Context, id uuid.UUID) *BfiAnswer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBfiQuestion queries the bfi_question edge of a BfiAnswer.
func (c *BfiAnswerClient) QueryBfiQuestion(ba *BfiAnswer) *BfiQuestionQuery {
	query := (&BfiQuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ba.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bfianswer.Table, bfianswer.FieldID, id),
			sqlgraph.To(bfiquestion.Table, bfiquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bfianswer.BfiQuestionTable, bfianswer.BfiQuestionColumn),
		)
		fromV = sqlgraph.Neighbors(ba.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStudent queries the student edge of a BfiAnswer.
func (c *BfiAnswerClient) QueryStudent(ba *BfiAnswer) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ba.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bfianswer.Table, bfianswer.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bfianswer.StudentTable, bfianswer.StudentColumn),
		)
		fromV = sqlgraph.Neighbors(ba.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BfiAnswerClient) Hooks() []Hook {
	return c.hooks.BfiAnswer
}

// Interceptors returns the client interceptors.
func (c *BfiAnswerClient) Interceptors() []Interceptor {
	return c.inters.BfiAnswer
}

func (c *BfiAnswerClient) mutate(ctx context.Context, m *BfiAnswerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BfiAnswerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BfiAnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BfiAnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BfiAnswerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown BfiAnswer mutation op: %q", m.Op())
	}
}

// BfiQuestionClient is a client for the BfiQuestion schema.
type BfiQuestionClient struct {
	config
}

// NewBfiQuestionClient returns a client for the BfiQuestion from the given config.
func NewBfiQuestionClient(c config) *BfiQuestionClient {
	return &BfiQuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bfiquestion.Hooks(f(g(h())))`.
func (c *BfiQuestionClient) Use(hooks ...Hook) {
	c.hooks.BfiQuestion = append(c.hooks.BfiQuestion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bfiquestion.Intercept(f(g(h())))`.
func (c *BfiQuestionClient) Intercept(interceptors ...Interceptor) {
	c.inters.BfiQuestion = append(c.inters.BfiQuestion, interceptors...)
}

// Create returns a builder for creating a BfiQuestion entity.
func (c *BfiQuestionClient) Create() *BfiQuestionCreate {
	mutation := newBfiQuestionMutation(c.config, OpCreate)
	return &BfiQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BfiQuestion entities.
func (c *BfiQuestionClient) CreateBulk(builders ...*BfiQuestionCreate) *BfiQuestionCreateBulk {
	return &BfiQuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BfiQuestion.
func (c *BfiQuestionClient) Update() *BfiQuestionUpdate {
	mutation := newBfiQuestionMutation(c.config, OpUpdate)
	return &BfiQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BfiQuestionClient) UpdateOne(bq *BfiQuestion) *BfiQuestionUpdateOne {
	mutation := newBfiQuestionMutation(c.config, OpUpdateOne, withBfiQuestion(bq))
	return &BfiQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BfiQuestionClient) UpdateOneID(id uuid.UUID) *BfiQuestionUpdateOne {
	mutation := newBfiQuestionMutation(c.config, OpUpdateOne, withBfiQuestionID(id))
	return &BfiQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BfiQuestion.
func (c *BfiQuestionClient) Delete() *BfiQuestionDelete {
	mutation := newBfiQuestionMutation(c.config, OpDelete)
	return &BfiQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BfiQuestionClient) DeleteOne(bq *BfiQuestion) *BfiQuestionDeleteOne {
	return c.DeleteOneID(bq.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BfiQuestionClient) DeleteOneID(id uuid.UUID) *BfiQuestionDeleteOne {
	builder := c.Delete().Where(bfiquestion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BfiQuestionDeleteOne{builder}
}

// Query returns a query builder for BfiQuestion.
func (c *BfiQuestionClient) Query() *BfiQuestionQuery {
	return &BfiQuestionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBfiQuestion},
		inters: c.Interceptors(),
	}
}

// Get returns a BfiQuestion entity by its id.
func (c *BfiQuestionClient) Get(ctx context.Context, id uuid.UUID) (*BfiQuestion, error) {
	return c.Query().Where(bfiquestion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BfiQuestionClient) GetX(ctx context.Context, id uuid.UUID) *BfiQuestion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBfiAnswers queries the bfi_answers edge of a BfiQuestion.
func (c *BfiQuestionClient) QueryBfiAnswers(bq *BfiQuestion) *BfiAnswerQuery {
	query := (&BfiAnswerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bfiquestion.Table, bfiquestion.FieldID, id),
			sqlgraph.To(bfianswer.Table, bfianswer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bfiquestion.BfiAnswersTable, bfiquestion.BfiAnswersColumn),
		)
		fromV = sqlgraph.Neighbors(bq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BfiQuestionClient) Hooks() []Hook {
	return c.hooks.BfiQuestion
}

// Interceptors returns the client interceptors.
func (c *BfiQuestionClient) Interceptors() []Interceptor {
	return c.inters.BfiQuestion
}

func (c *BfiQuestionClient) mutate(ctx context.Context, m *BfiQuestionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BfiQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BfiQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BfiQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BfiQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown BfiQuestion mutation op: %q", m.Op())
	}
}

// BfiReportClient is a client for the BfiReport schema.
type BfiReportClient struct {
	config
}

// NewBfiReportClient returns a client for the BfiReport from the given config.
func NewBfiReportClient(c config) *BfiReportClient {
	return &BfiReportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bfireport.Hooks(f(g(h())))`.
func (c *BfiReportClient) Use(hooks ...Hook) {
	c.hooks.BfiReport = append(c.hooks.BfiReport, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bfireport.Intercept(f(g(h())))`.
func (c *BfiReportClient) Intercept(interceptors ...Interceptor) {
	c.inters.BfiReport = append(c.inters.BfiReport, interceptors...)
}

// Create returns a builder for creating a BfiReport entity.
func (c *BfiReportClient) Create() *BfiReportCreate {
	mutation := newBfiReportMutation(c.config, OpCreate)
	return &BfiReportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BfiReport entities.
func (c *BfiReportClient) CreateBulk(builders ...*BfiReportCreate) *BfiReportCreateBulk {
	return &BfiReportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BfiReport.
func (c *BfiReportClient) Update() *BfiReportUpdate {
	mutation := newBfiReportMutation(c.config, OpUpdate)
	return &BfiReportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BfiReportClient) UpdateOne(br *BfiReport) *BfiReportUpdateOne {
	mutation := newBfiReportMutation(c.config, OpUpdateOne, withBfiReport(br))
	return &BfiReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BfiReportClient) UpdateOneID(id uuid.UUID) *BfiReportUpdateOne {
	mutation := newBfiReportMutation(c.config, OpUpdateOne, withBfiReportID(id))
	return &BfiReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BfiReport.
func (c *BfiReportClient) Delete() *BfiReportDelete {
	mutation := newBfiReportMutation(c.config, OpDelete)
	return &BfiReportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BfiReportClient) DeleteOne(br *BfiReport) *BfiReportDeleteOne {
	return c.DeleteOneID(br.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BfiReportClient) DeleteOneID(id uuid.UUID) *BfiReportDeleteOne {
	builder := c.Delete().Where(bfireport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BfiReportDeleteOne{builder}
}

// Query returns a query builder for BfiReport.
func (c *BfiReportClient) Query() *BfiReportQuery {
	return &BfiReportQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBfiReport},
		inters: c.Interceptors(),
	}
}

// Get returns a BfiReport entity by its id.
func (c *BfiReportClient) Get(ctx context.Context, id uuid.UUID) (*BfiReport, error) {
	return c.Query().Where(bfireport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BfiReportClient) GetX(ctx context.Context, id uuid.UUID) *BfiReport {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudent queries the student edge of a BfiReport.
func (c *BfiReportClient) QueryStudent(br *BfiReport) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := br.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bfireport.Table, bfireport.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, bfireport.StudentTable, bfireport.StudentColumn),
		)
		fromV = sqlgraph.Neighbors(br.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BfiReportClient) Hooks() []Hook {
	return c.hooks.BfiReport
}

// Interceptors returns the client interceptors.
func (c *BfiReportClient) Interceptors() []Interceptor {
	return c.inters.BfiReport
}

func (c *BfiReportClient) mutate(ctx context.Context, m *BfiReportMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BfiReportCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BfiReportUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BfiReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BfiReportDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown BfiReport mutation op: %q", m.Op())
	}
}

// CourseClient is a client for the Course schema.
type CourseClient struct {
	config
}

// NewCourseClient returns a client for the Course from the given config.
func NewCourseClient(c config) *CourseClient {
	return &CourseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `course.Hooks(f(g(h())))`.
func (c *CourseClient) Use(hooks ...Hook) {
	c.hooks.Course = append(c.hooks.Course, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `course.Intercept(f(g(h())))`.
func (c *CourseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Course = append(c.inters.Course, interceptors...)
}

// Create returns a builder for creating a Course entity.
func (c *CourseClient) Create() *CourseCreate {
	mutation := newCourseMutation(c.config, OpCreate)
	return &CourseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Course entities.
func (c *CourseClient) CreateBulk(builders ...*CourseCreate) *CourseCreateBulk {
	return &CourseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Course.
func (c *CourseClient) Update() *CourseUpdate {
	mutation := newCourseMutation(c.config, OpUpdate)
	return &CourseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourseClient) UpdateOne(co *Course) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourse(co))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourseClient) UpdateOneID(id uuid.UUID) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourseID(id))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Course.
func (c *CourseClient) Delete() *CourseDelete {
	mutation := newCourseMutation(c.config, OpDelete)
	return &CourseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CourseClient) DeleteOne(co *Course) *CourseDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CourseClient) DeleteOneID(id uuid.UUID) *CourseDeleteOne {
	builder := c.Delete().Where(course.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourseDeleteOne{builder}
}

// Query returns a query builder for Course.
func (c *CourseClient) Query() *CourseQuery {
	return &CourseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCourse},
		inters: c.Interceptors(),
	}
}

// Get returns a Course entity by its id.
func (c *CourseClient) Get(ctx context.Context, id uuid.UUID) (*Course, error) {
	return c.Query().Where(course.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourseClient) GetX(ctx context.Context, id uuid.UUID) *Course {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudents queries the students edge of a Course.
func (c *CourseClient) QueryStudents(co *Course) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, course.StudentsTable, course.StudentsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a Course.
func (c *CourseClient) QueryGroups(co *Course) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, course.GroupsTable, course.GroupsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupRuns queries the group_runs edge of a Course.
func (c *CourseClient) QueryGroupRuns(co *Course) *GroupRunQuery {
	query := (&GroupRunClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(grouprun.Table, grouprun.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, course.GroupRunsTable, course.GroupRunsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CourseClient) Hooks() []Hook {
	return c.hooks.Course
}

// Interceptors returns the client interceptors.
func (c *CourseClient) Interceptors() []Interceptor {
	return c.inters.Course
}

func (c *CourseClient) mutate(ctx context.Context, m *CourseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CourseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CourseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CourseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Course mutation op: %q", m.Op())
	}
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `group.Intercept(f(g(h())))`.
func (c *GroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.Group = append(c.inters.Group, interceptors...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id uuid.UUID) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id uuid.UUID) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id uuid.UUID) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id uuid.UUID) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudents queries the students edge of a Group.
func (c *GroupClient) QueryStudents(gr *Group) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, group.StudentsTable, group.StudentsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a Group.
func (c *GroupClient) QueryCourse(gr *Group) *CourseQuery {
	query := (&CourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, group.CourseTable, group.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupRun queries the group_run edge of a Group.
func (c *GroupClient) QueryGroupRun(gr *Group) *GroupRunQuery {
	query := (&GroupRunClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(grouprun.Table, grouprun.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, group.GroupRunTable, group.GroupRunColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// Interceptors returns the client interceptors.
func (c *GroupClient) Interceptors() []Interceptor {
	return c.inters.Group
}

func (c *GroupClient) mutate(ctx context.Context, m *GroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Group mutation op: %q", m.Op())
	}
}

// GroupRunClient is a client for the GroupRun schema.
type GroupRunClient struct {
	config
}

// NewGroupRunClient returns a client for the GroupRun from the given config.
func NewGroupRunClient(c config) *GroupRunClient {
	return &GroupRunClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `grouprun.Hooks(f(g(h())))`.
func (c *GroupRunClient) Use(hooks ...Hook) {
	c.hooks.GroupRun = append(c.hooks.GroupRun, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `grouprun.Intercept(f(g(h())))`.
func (c *GroupRunClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupRun = append(c.inters.GroupRun, interceptors...)
}

// Create returns a builder for creating a GroupRun entity.
func (c *GroupRunClient) Create() *GroupRunCreate {
	mutation := newGroupRunMutation(c.config, OpCreate)
	return &GroupRunCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupRun entities.
func (c *GroupRunClient) CreateBulk(builders ...*GroupRunCreate) *GroupRunCreateBulk {
	return &GroupRunCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupRun.
func (c *GroupRunClient) Update() *GroupRunUpdate {
	mutation := newGroupRunMutation(c.config, OpUpdate)
	return &GroupRunUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupRunClient) UpdateOne(gr *GroupRun) *GroupRunUpdateOne {
	mutation := newGroupRunMutation(c.config, OpUpdateOne, withGroupRun(gr))
	return &GroupRunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupRunClient) UpdateOneID(id uuid.UUID) *GroupRunUpdateOne {
	mutation := newGroupRunMutation(c.config, OpUpdateOne, withGroupRunID(id))
	return &GroupRunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupRun.
func (c *GroupRunClient) Delete() *GroupRunDelete {
	mutation := newGroupRunMutation(c.config, OpDelete)
	return &GroupRunDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupRunClient) DeleteOne(gr *GroupRun) *GroupRunDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupRunClient) DeleteOneID(id uuid.UUID) *GroupRunDeleteOne {
	builder := c.Delete().Where(grouprun.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupRunDeleteOne{builder}
}

// Query returns a query builder for GroupRun.
func (c *GroupRunClient) Query() *GroupRunQuery {
	return &GroupRunQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupRun},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupRun entity by its id.
func (c *GroupRunClient) Get(ctx context.Context, id uuid.UUID) (*GroupRun, error) {
	return c.Query().Where(grouprun.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupRunClient) GetX(ctx context.Context, id uuid.UUID) *GroupRun {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreatedBy queries the created_by edge of a GroupRun.
func (c *GroupRunClient) QueryCreatedBy(gr *GroupRun) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(grouprun.Table, grouprun.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, grouprun.CreatedByTable, grouprun.CreatedByColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a GroupRun.
func (c *GroupRunClient) QueryGroups(gr *GroupRun) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(grouprun.Table, grouprun.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, grouprun.GroupsTable, grouprun.GroupsColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a GroupRun.
func (c *GroupRunClient) QueryCourse(gr *GroupRun) *CourseQuery {
	query := (&CourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(grouprun.Table, grouprun.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, grouprun.CourseTable, grouprun.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupRunClient) Hooks() []Hook {
	return c.hooks.GroupRun
}

// Interceptors returns the client interceptors.
func (c *GroupRunClient) Interceptors() []Interceptor {
	return c.inters.GroupRun
}

func (c *GroupRunClient) mutate(ctx context.Context, m *GroupRunMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupRunCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupRunUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupRunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupRunDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown GroupRun mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCourses queries the courses edge of a User.
func (c *UserClient) QueryCourses(u *User) *CourseQuery {
	query := (&CourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.CoursesTable, user.CoursesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBfiReport queries the bfi_report edge of a User.
func (c *UserClient) QueryBfiReport(u *User) *BfiReportQuery {
	query := (&BfiReportClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(bfireport.Table, bfireport.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, user.BfiReportTable, user.BfiReportColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBfiAnswers queries the bfi_answers edge of a User.
func (c *UserClient) QueryBfiAnswers(u *User) *BfiAnswerQuery {
	query := (&BfiAnswerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(bfianswer.Table, bfianswer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BfiAnswersTable, user.BfiAnswersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a User.
func (c *UserClient) QueryGroups(u *User) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.GroupsTable, user.GroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		BfiAnswer, BfiQuestion, BfiReport, Course, Group, GroupRun, User []ent.Hook
	}
	inters struct {
		BfiAnswer, BfiQuestion, BfiReport, Course, Group, GroupRun,
		User []ent.Interceptor
	}
)
