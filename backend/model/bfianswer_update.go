// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"jv/team-tone-tuner/model/bfianswer"
	"jv/team-tone-tuner/model/bfiquestion"
	"jv/team-tone-tuner/model/predicate"
	"jv/team-tone-tuner/model/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BfiAnswerUpdate is the builder for updating BfiAnswer entities.
type BfiAnswerUpdate struct {
	config
	hooks    []Hook
	mutation *BfiAnswerMutation
}

// Where appends a list predicates to the BfiAnswerUpdate builder.
func (bau *BfiAnswerUpdate) Where(ps ...predicate.BfiAnswer) *BfiAnswerUpdate {
	bau.mutation.Where(ps...)
	return bau
}

// SetUpdatedAt sets the "updated_at" field.
func (bau *BfiAnswerUpdate) SetUpdatedAt(t time.Time) *BfiAnswerUpdate {
	bau.mutation.SetUpdatedAt(t)
	return bau
}

// SetValue sets the "value" field.
func (bau *BfiAnswerUpdate) SetValue(i int) *BfiAnswerUpdate {
	bau.mutation.ResetValue()
	bau.mutation.SetValue(i)
	return bau
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (bau *BfiAnswerUpdate) SetNillableValue(i *int) *BfiAnswerUpdate {
	if i != nil {
		bau.SetValue(*i)
	}
	return bau
}

// AddValue adds i to the "value" field.
func (bau *BfiAnswerUpdate) AddValue(i int) *BfiAnswerUpdate {
	bau.mutation.AddValue(i)
	return bau
}

// ClearValue clears the value of the "value" field.
func (bau *BfiAnswerUpdate) ClearValue() *BfiAnswerUpdate {
	bau.mutation.ClearValue()
	return bau
}

// SetBfiQuestionID sets the "bfi_question" edge to the BfiQuestion entity by ID.
func (bau *BfiAnswerUpdate) SetBfiQuestionID(id uuid.UUID) *BfiAnswerUpdate {
	bau.mutation.SetBfiQuestionID(id)
	return bau
}

// SetNillableBfiQuestionID sets the "bfi_question" edge to the BfiQuestion entity by ID if the given value is not nil.
func (bau *BfiAnswerUpdate) SetNillableBfiQuestionID(id *uuid.UUID) *BfiAnswerUpdate {
	if id != nil {
		bau = bau.SetBfiQuestionID(*id)
	}
	return bau
}

// SetBfiQuestion sets the "bfi_question" edge to the BfiQuestion entity.
func (bau *BfiAnswerUpdate) SetBfiQuestion(b *BfiQuestion) *BfiAnswerUpdate {
	return bau.SetBfiQuestionID(b.ID)
}

// SetStudentID sets the "student" edge to the User entity by ID.
func (bau *BfiAnswerUpdate) SetStudentID(id uuid.UUID) *BfiAnswerUpdate {
	bau.mutation.SetStudentID(id)
	return bau
}

// SetNillableStudentID sets the "student" edge to the User entity by ID if the given value is not nil.
func (bau *BfiAnswerUpdate) SetNillableStudentID(id *uuid.UUID) *BfiAnswerUpdate {
	if id != nil {
		bau = bau.SetStudentID(*id)
	}
	return bau
}

// SetStudent sets the "student" edge to the User entity.
func (bau *BfiAnswerUpdate) SetStudent(u *User) *BfiAnswerUpdate {
	return bau.SetStudentID(u.ID)
}

// Mutation returns the BfiAnswerMutation object of the builder.
func (bau *BfiAnswerUpdate) Mutation() *BfiAnswerMutation {
	return bau.mutation
}

// ClearBfiQuestion clears the "bfi_question" edge to the BfiQuestion entity.
func (bau *BfiAnswerUpdate) ClearBfiQuestion() *BfiAnswerUpdate {
	bau.mutation.ClearBfiQuestion()
	return bau
}

// ClearStudent clears the "student" edge to the User entity.
func (bau *BfiAnswerUpdate) ClearStudent() *BfiAnswerUpdate {
	bau.mutation.ClearStudent()
	return bau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bau *BfiAnswerUpdate) Save(ctx context.Context) (int, error) {
	bau.defaults()
	return withHooks(ctx, bau.sqlSave, bau.mutation, bau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bau *BfiAnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := bau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bau *BfiAnswerUpdate) Exec(ctx context.Context) error {
	_, err := bau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bau *BfiAnswerUpdate) ExecX(ctx context.Context) {
	if err := bau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bau *BfiAnswerUpdate) defaults() {
	if _, ok := bau.mutation.UpdatedAt(); !ok {
		v := bfianswer.UpdateDefaultUpdatedAt()
		bau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bau *BfiAnswerUpdate) check() error {
	if v, ok := bau.mutation.Value(); ok {
		if err := bfianswer.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`model: validator failed for field "BfiAnswer.value": %w`, err)}
		}
	}
	return nil
}

func (bau *BfiAnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bfianswer.Table, bfianswer.Columns, sqlgraph.NewFieldSpec(bfianswer.FieldID, field.TypeUUID))
	if ps := bau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bau.mutation.UpdatedAt(); ok {
		_spec.SetField(bfianswer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bau.mutation.Value(); ok {
		_spec.SetField(bfianswer.FieldValue, field.TypeInt, value)
	}
	if value, ok := bau.mutation.AddedValue(); ok {
		_spec.AddField(bfianswer.FieldValue, field.TypeInt, value)
	}
	if bau.mutation.ValueCleared() {
		_spec.ClearField(bfianswer.FieldValue, field.TypeInt)
	}
	if bau.mutation.BfiQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bfianswer.BfiQuestionTable,
			Columns: []string{bfianswer.BfiQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfiquestion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.BfiQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bfianswer.BfiQuestionTable,
			Columns: []string{bfianswer.BfiQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfiquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bau.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bfianswer.StudentTable,
			Columns: []string{bfianswer.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bfianswer.StudentTable,
			Columns: []string{bfianswer.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bfianswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bau.mutation.done = true
	return n, nil
}

// BfiAnswerUpdateOne is the builder for updating a single BfiAnswer entity.
type BfiAnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BfiAnswerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bauo *BfiAnswerUpdateOne) SetUpdatedAt(t time.Time) *BfiAnswerUpdateOne {
	bauo.mutation.SetUpdatedAt(t)
	return bauo
}

// SetValue sets the "value" field.
func (bauo *BfiAnswerUpdateOne) SetValue(i int) *BfiAnswerUpdateOne {
	bauo.mutation.ResetValue()
	bauo.mutation.SetValue(i)
	return bauo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (bauo *BfiAnswerUpdateOne) SetNillableValue(i *int) *BfiAnswerUpdateOne {
	if i != nil {
		bauo.SetValue(*i)
	}
	return bauo
}

// AddValue adds i to the "value" field.
func (bauo *BfiAnswerUpdateOne) AddValue(i int) *BfiAnswerUpdateOne {
	bauo.mutation.AddValue(i)
	return bauo
}

// ClearValue clears the value of the "value" field.
func (bauo *BfiAnswerUpdateOne) ClearValue() *BfiAnswerUpdateOne {
	bauo.mutation.ClearValue()
	return bauo
}

// SetBfiQuestionID sets the "bfi_question" edge to the BfiQuestion entity by ID.
func (bauo *BfiAnswerUpdateOne) SetBfiQuestionID(id uuid.UUID) *BfiAnswerUpdateOne {
	bauo.mutation.SetBfiQuestionID(id)
	return bauo
}

// SetNillableBfiQuestionID sets the "bfi_question" edge to the BfiQuestion entity by ID if the given value is not nil.
func (bauo *BfiAnswerUpdateOne) SetNillableBfiQuestionID(id *uuid.UUID) *BfiAnswerUpdateOne {
	if id != nil {
		bauo = bauo.SetBfiQuestionID(*id)
	}
	return bauo
}

// SetBfiQuestion sets the "bfi_question" edge to the BfiQuestion entity.
func (bauo *BfiAnswerUpdateOne) SetBfiQuestion(b *BfiQuestion) *BfiAnswerUpdateOne {
	return bauo.SetBfiQuestionID(b.ID)
}

// SetStudentID sets the "student" edge to the User entity by ID.
func (bauo *BfiAnswerUpdateOne) SetStudentID(id uuid.UUID) *BfiAnswerUpdateOne {
	bauo.mutation.SetStudentID(id)
	return bauo
}

// SetNillableStudentID sets the "student" edge to the User entity by ID if the given value is not nil.
func (bauo *BfiAnswerUpdateOne) SetNillableStudentID(id *uuid.UUID) *BfiAnswerUpdateOne {
	if id != nil {
		bauo = bauo.SetStudentID(*id)
	}
	return bauo
}

// SetStudent sets the "student" edge to the User entity.
func (bauo *BfiAnswerUpdateOne) SetStudent(u *User) *BfiAnswerUpdateOne {
	return bauo.SetStudentID(u.ID)
}

// Mutation returns the BfiAnswerMutation object of the builder.
func (bauo *BfiAnswerUpdateOne) Mutation() *BfiAnswerMutation {
	return bauo.mutation
}

// ClearBfiQuestion clears the "bfi_question" edge to the BfiQuestion entity.
func (bauo *BfiAnswerUpdateOne) ClearBfiQuestion() *BfiAnswerUpdateOne {
	bauo.mutation.ClearBfiQuestion()
	return bauo
}

// ClearStudent clears the "student" edge to the User entity.
func (bauo *BfiAnswerUpdateOne) ClearStudent() *BfiAnswerUpdateOne {
	bauo.mutation.ClearStudent()
	return bauo
}

// Where appends a list predicates to the BfiAnswerUpdate builder.
func (bauo *BfiAnswerUpdateOne) Where(ps ...predicate.BfiAnswer) *BfiAnswerUpdateOne {
	bauo.mutation.Where(ps...)
	return bauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauo *BfiAnswerUpdateOne) Select(field string, fields ...string) *BfiAnswerUpdateOne {
	bauo.fields = append([]string{field}, fields...)
	return bauo
}

// Save executes the query and returns the updated BfiAnswer entity.
func (bauo *BfiAnswerUpdateOne) Save(ctx context.Context) (*BfiAnswer, error) {
	bauo.defaults()
	return withHooks(ctx, bauo.sqlSave, bauo.mutation, bauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bauo *BfiAnswerUpdateOne) SaveX(ctx context.Context) *BfiAnswer {
	node, err := bauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauo *BfiAnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := bauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauo *BfiAnswerUpdateOne) ExecX(ctx context.Context) {
	if err := bauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bauo *BfiAnswerUpdateOne) defaults() {
	if _, ok := bauo.mutation.UpdatedAt(); !ok {
		v := bfianswer.UpdateDefaultUpdatedAt()
		bauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bauo *BfiAnswerUpdateOne) check() error {
	if v, ok := bauo.mutation.Value(); ok {
		if err := bfianswer.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`model: validator failed for field "BfiAnswer.value": %w`, err)}
		}
	}
	return nil
}

func (bauo *BfiAnswerUpdateOne) sqlSave(ctx context.Context) (_node *BfiAnswer, err error) {
	if err := bauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bfianswer.Table, bfianswer.Columns, sqlgraph.NewFieldSpec(bfianswer.FieldID, field.TypeUUID))
	id, ok := bauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "BfiAnswer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bfianswer.FieldID)
		for _, f := range fields {
			if !bfianswer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != bfianswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauo.mutation.UpdatedAt(); ok {
		_spec.SetField(bfianswer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bauo.mutation.Value(); ok {
		_spec.SetField(bfianswer.FieldValue, field.TypeInt, value)
	}
	if value, ok := bauo.mutation.AddedValue(); ok {
		_spec.AddField(bfianswer.FieldValue, field.TypeInt, value)
	}
	if bauo.mutation.ValueCleared() {
		_spec.ClearField(bfianswer.FieldValue, field.TypeInt)
	}
	if bauo.mutation.BfiQuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bfianswer.BfiQuestionTable,
			Columns: []string{bfianswer.BfiQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfiquestion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.BfiQuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bfianswer.BfiQuestionTable,
			Columns: []string{bfianswer.BfiQuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfiquestion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bauo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bfianswer.StudentTable,
			Columns: []string{bfianswer.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bfianswer.StudentTable,
			Columns: []string{bfianswer.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BfiAnswer{config: bauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bfianswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bauo.mutation.done = true
	return _node, nil
}
