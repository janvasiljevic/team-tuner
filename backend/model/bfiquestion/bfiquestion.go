// Code generated by ent, DO NOT EDIT.

package bfiquestion

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the bfiquestion type in the database.
	Label = "bfi_question"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldQuestiono holds the string denoting the questiono field in the database.
	FieldQuestiono = "questiono"
	// FieldFacet holds the string denoting the facet field in the database.
	FieldFacet = "facet"
	// FieldDimension holds the string denoting the dimension field in the database.
	FieldDimension = "dimension"
	// FieldInfluence holds the string denoting the influence field in the database.
	FieldInfluence = "influence"
	// FieldAlpha holds the string denoting the alpha field in the database.
	FieldAlpha = "alpha"
	// EdgeBfiAnswers holds the string denoting the bfi_answers edge name in mutations.
	EdgeBfiAnswers = "bfi_answers"
	// Table holds the table name of the bfiquestion in the database.
	Table = "bfi_questions"
	// BfiAnswersTable is the table that holds the bfi_answers relation/edge.
	BfiAnswersTable = "bfi_answers"
	// BfiAnswersInverseTable is the table name for the BfiAnswer entity.
	// It exists in this package in order to avoid circular dependency with the "bfianswer" package.
	BfiAnswersInverseTable = "bfi_answers"
	// BfiAnswersColumn is the table column denoting the bfi_answers relation/edge.
	BfiAnswersColumn = "bfi_question_bfi_answers"
)

// Columns holds all SQL columns for bfiquestion fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldQuestiono,
	FieldFacet,
	FieldDimension,
	FieldInfluence,
	FieldAlpha,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// QuestionoValidator is a validator for the "questiono" field. It is called by the builders before save.
	QuestionoValidator func(string) error
	// FacetValidator is a validator for the "facet" field. It is called by the builders before save.
	FacetValidator func(string) error
	// AlphaValidator is a validator for the "alpha" field. It is called by the builders before save.
	AlphaValidator func(float64) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Dimension defines the type for the "dimension" enum field.
type Dimension string

// Dimension values.
const (
	DimensionExtraversion      Dimension = "extraversion"
	DimensionAgreeableness     Dimension = "agreeableness"
	DimensionConscientiousness Dimension = "conscientiousness"
	DimensionNeuroticism       Dimension = "neuroticism"
	DimensionOpenness          Dimension = "openness"
)

func (d Dimension) String() string {
	return string(d)
}

// DimensionValidator is a validator for the "dimension" field enum values. It is called by the builders before save.
func DimensionValidator(d Dimension) error {
	switch d {
	case DimensionExtraversion, DimensionAgreeableness, DimensionConscientiousness, DimensionNeuroticism, DimensionOpenness:
		return nil
	default:
		return fmt.Errorf("bfiquestion: invalid enum value for dimension field: %q", d)
	}
}

// Influence defines the type for the "influence" enum field.
type Influence string

// Influence values.
const (
	InfluencePositive Influence = "positive"
	InfluenceNegative Influence = "negative"
)

func (i Influence) String() string {
	return string(i)
}

// InfluenceValidator is a validator for the "influence" field enum values. It is called by the builders before save.
func InfluenceValidator(i Influence) error {
	switch i {
	case InfluencePositive, InfluenceNegative:
		return nil
	default:
		return fmt.Errorf("bfiquestion: invalid enum value for influence field: %q", i)
	}
}

// OrderOption defines the ordering options for the BfiQuestion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByQuestiono orders the results by the questiono field.
func ByQuestiono(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestiono, opts...).ToFunc()
}

// ByFacet orders the results by the facet field.
func ByFacet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacet, opts...).ToFunc()
}

// ByDimension orders the results by the dimension field.
func ByDimension(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDimension, opts...).ToFunc()
}

// ByInfluence orders the results by the influence field.
func ByInfluence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInfluence, opts...).ToFunc()
}

// ByAlpha orders the results by the alpha field.
func ByAlpha(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlpha, opts...).ToFunc()
}

// ByBfiAnswersCount orders the results by bfi_answers count.
func ByBfiAnswersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBfiAnswersStep(), opts...)
	}
}

// ByBfiAnswers orders the results by bfi_answers terms.
func ByBfiAnswers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBfiAnswersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBfiAnswersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BfiAnswersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BfiAnswersTable, BfiAnswersColumn),
	)
}
