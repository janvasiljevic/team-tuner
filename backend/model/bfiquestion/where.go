// Code generated by ent, DO NOT EDIT.

package bfiquestion

import (
	"jv/team-tone-tuner/model/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldUpdatedAt, v))
}

// Questiono applies equality check predicate on the "questiono" field. It's identical to QuestionoEQ.
func Questiono(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldQuestiono, v))
}

// Facet applies equality check predicate on the "facet" field. It's identical to FacetEQ.
func Facet(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldFacet, v))
}

// Alpha applies equality check predicate on the "alpha" field. It's identical to AlphaEQ.
func Alpha(v float64) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldAlpha, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLTE(FieldUpdatedAt, v))
}

// QuestionoEQ applies the EQ predicate on the "questiono" field.
func QuestionoEQ(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldQuestiono, v))
}

// QuestionoNEQ applies the NEQ predicate on the "questiono" field.
func QuestionoNEQ(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNEQ(FieldQuestiono, v))
}

// QuestionoIn applies the In predicate on the "questiono" field.
func QuestionoIn(vs ...string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldIn(FieldQuestiono, vs...))
}

// QuestionoNotIn applies the NotIn predicate on the "questiono" field.
func QuestionoNotIn(vs ...string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNotIn(FieldQuestiono, vs...))
}

// QuestionoGT applies the GT predicate on the "questiono" field.
func QuestionoGT(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGT(FieldQuestiono, v))
}

// QuestionoGTE applies the GTE predicate on the "questiono" field.
func QuestionoGTE(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGTE(FieldQuestiono, v))
}

// QuestionoLT applies the LT predicate on the "questiono" field.
func QuestionoLT(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLT(FieldQuestiono, v))
}

// QuestionoLTE applies the LTE predicate on the "questiono" field.
func QuestionoLTE(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLTE(FieldQuestiono, v))
}

// QuestionoContains applies the Contains predicate on the "questiono" field.
func QuestionoContains(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldContains(FieldQuestiono, v))
}

// QuestionoHasPrefix applies the HasPrefix predicate on the "questiono" field.
func QuestionoHasPrefix(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldHasPrefix(FieldQuestiono, v))
}

// QuestionoHasSuffix applies the HasSuffix predicate on the "questiono" field.
func QuestionoHasSuffix(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldHasSuffix(FieldQuestiono, v))
}

// QuestionoEqualFold applies the EqualFold predicate on the "questiono" field.
func QuestionoEqualFold(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEqualFold(FieldQuestiono, v))
}

// QuestionoContainsFold applies the ContainsFold predicate on the "questiono" field.
func QuestionoContainsFold(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldContainsFold(FieldQuestiono, v))
}

// FacetEQ applies the EQ predicate on the "facet" field.
func FacetEQ(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldFacet, v))
}

// FacetNEQ applies the NEQ predicate on the "facet" field.
func FacetNEQ(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNEQ(FieldFacet, v))
}

// FacetIn applies the In predicate on the "facet" field.
func FacetIn(vs ...string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldIn(FieldFacet, vs...))
}

// FacetNotIn applies the NotIn predicate on the "facet" field.
func FacetNotIn(vs ...string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNotIn(FieldFacet, vs...))
}

// FacetGT applies the GT predicate on the "facet" field.
func FacetGT(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGT(FieldFacet, v))
}

// FacetGTE applies the GTE predicate on the "facet" field.
func FacetGTE(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGTE(FieldFacet, v))
}

// FacetLT applies the LT predicate on the "facet" field.
func FacetLT(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLT(FieldFacet, v))
}

// FacetLTE applies the LTE predicate on the "facet" field.
func FacetLTE(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLTE(FieldFacet, v))
}

// FacetContains applies the Contains predicate on the "facet" field.
func FacetContains(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldContains(FieldFacet, v))
}

// FacetHasPrefix applies the HasPrefix predicate on the "facet" field.
func FacetHasPrefix(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldHasPrefix(FieldFacet, v))
}

// FacetHasSuffix applies the HasSuffix predicate on the "facet" field.
func FacetHasSuffix(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldHasSuffix(FieldFacet, v))
}

// FacetEqualFold applies the EqualFold predicate on the "facet" field.
func FacetEqualFold(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEqualFold(FieldFacet, v))
}

// FacetContainsFold applies the ContainsFold predicate on the "facet" field.
func FacetContainsFold(v string) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldContainsFold(FieldFacet, v))
}

// DimensionEQ applies the EQ predicate on the "dimension" field.
func DimensionEQ(v Dimension) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldDimension, v))
}

// DimensionNEQ applies the NEQ predicate on the "dimension" field.
func DimensionNEQ(v Dimension) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNEQ(FieldDimension, v))
}

// DimensionIn applies the In predicate on the "dimension" field.
func DimensionIn(vs ...Dimension) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldIn(FieldDimension, vs...))
}

// DimensionNotIn applies the NotIn predicate on the "dimension" field.
func DimensionNotIn(vs ...Dimension) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNotIn(FieldDimension, vs...))
}

// InfluenceEQ applies the EQ predicate on the "influence" field.
func InfluenceEQ(v Influence) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldInfluence, v))
}

// InfluenceNEQ applies the NEQ predicate on the "influence" field.
func InfluenceNEQ(v Influence) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNEQ(FieldInfluence, v))
}

// InfluenceIn applies the In predicate on the "influence" field.
func InfluenceIn(vs ...Influence) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldIn(FieldInfluence, vs...))
}

// InfluenceNotIn applies the NotIn predicate on the "influence" field.
func InfluenceNotIn(vs ...Influence) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNotIn(FieldInfluence, vs...))
}

// AlphaEQ applies the EQ predicate on the "alpha" field.
func AlphaEQ(v float64) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldEQ(FieldAlpha, v))
}

// AlphaNEQ applies the NEQ predicate on the "alpha" field.
func AlphaNEQ(v float64) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNEQ(FieldAlpha, v))
}

// AlphaIn applies the In predicate on the "alpha" field.
func AlphaIn(vs ...float64) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldIn(FieldAlpha, vs...))
}

// AlphaNotIn applies the NotIn predicate on the "alpha" field.
func AlphaNotIn(vs ...float64) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldNotIn(FieldAlpha, vs...))
}

// AlphaGT applies the GT predicate on the "alpha" field.
func AlphaGT(v float64) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGT(FieldAlpha, v))
}

// AlphaGTE applies the GTE predicate on the "alpha" field.
func AlphaGTE(v float64) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldGTE(FieldAlpha, v))
}

// AlphaLT applies the LT predicate on the "alpha" field.
func AlphaLT(v float64) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLT(FieldAlpha, v))
}

// AlphaLTE applies the LTE predicate on the "alpha" field.
func AlphaLTE(v float64) predicate.BfiQuestion {
	return predicate.BfiQuestion(sql.FieldLTE(FieldAlpha, v))
}

// HasBfiAnswers applies the HasEdge predicate on the "bfi_answers" edge.
func HasBfiAnswers() predicate.BfiQuestion {
	return predicate.BfiQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BfiAnswersTable, BfiAnswersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBfiAnswersWith applies the HasEdge predicate on the "bfi_answers" edge with a given conditions (other predicates).
func HasBfiAnswersWith(preds ...predicate.BfiAnswer) predicate.BfiQuestion {
	return predicate.BfiQuestion(func(s *sql.Selector) {
		step := newBfiAnswersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BfiQuestion) predicate.BfiQuestion {
	return predicate.BfiQuestion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BfiQuestion) predicate.BfiQuestion {
	return predicate.BfiQuestion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BfiQuestion) predicate.BfiQuestion {
	return predicate.BfiQuestion(func(s *sql.Selector) {
		p(s.Not())
	})
}
