// Code generated by ent, DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
	"jv/team-tone-tuner/model/course"
	"jv/team-tone-tuner/model/grouprun"
	"jv/team-tone-tuner/model/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// GroupRun is the model entity for the GroupRun schema.
type GroupRun struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The time when the record was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time when the record was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// GroupSize holds the value of the "group_size" field.
	GroupSize []int `json:"group_size,omitempty"`
	// BestScoreHistory holds the value of the "best_score_history" field.
	BestScoreHistory []float64 `json:"best_score_history,omitempty"`
	// CandidateScoreHistory holds the value of the "candidate_score_history" field.
	CandidateScoreHistory []float64 `json:"candidate_score_history,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupRunQuery when eager-loading is set.
	Edges                GroupRunEdges `json:"edges"`
	course_group_runs    *uuid.UUID
	group_run_created_by *uuid.UUID
	selectValues         sql.SelectValues
}

// GroupRunEdges holds the relations/edges for other nodes in the graph.
type GroupRunEdges struct {
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupRunEdges) CreatedByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.CreatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e GroupRunEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupRunEdges) CourseOrErr() (*Course, error) {
	if e.loadedTypes[2] {
		if e.Course == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: course.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupRun) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grouprun.FieldGroupSize, grouprun.FieldBestScoreHistory, grouprun.FieldCandidateScoreHistory:
			values[i] = new([]byte)
		case grouprun.FieldCreatedAt, grouprun.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case grouprun.FieldID:
			values[i] = new(uuid.UUID)
		case grouprun.ForeignKeys[0]: // course_group_runs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case grouprun.ForeignKeys[1]: // group_run_created_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupRun fields.
func (gr *GroupRun) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grouprun.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gr.ID = *value
			}
		case grouprun.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gr.CreatedAt = value.Time
			}
		case grouprun.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gr.UpdatedAt = value.Time
			}
		case grouprun.FieldGroupSize:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field group_size", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gr.GroupSize); err != nil {
					return fmt.Errorf("unmarshal field group_size: %w", err)
				}
			}
		case grouprun.FieldBestScoreHistory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field best_score_history", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gr.BestScoreHistory); err != nil {
					return fmt.Errorf("unmarshal field best_score_history: %w", err)
				}
			}
		case grouprun.FieldCandidateScoreHistory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_score_history", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gr.CandidateScoreHistory); err != nil {
					return fmt.Errorf("unmarshal field candidate_score_history: %w", err)
				}
			}
		case grouprun.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field course_group_runs", values[i])
			} else if value.Valid {
				gr.course_group_runs = new(uuid.UUID)
				*gr.course_group_runs = *value.S.(*uuid.UUID)
			}
		case grouprun.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field group_run_created_by", values[i])
			} else if value.Valid {
				gr.group_run_created_by = new(uuid.UUID)
				*gr.group_run_created_by = *value.S.(*uuid.UUID)
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GroupRun.
// This includes values selected through modifiers, order, etc.
func (gr *GroupRun) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// QueryCreatedBy queries the "created_by" edge of the GroupRun entity.
func (gr *GroupRun) QueryCreatedBy() *UserQuery {
	return NewGroupRunClient(gr.config).QueryCreatedBy(gr)
}

// QueryGroups queries the "groups" edge of the GroupRun entity.
func (gr *GroupRun) QueryGroups() *GroupQuery {
	return NewGroupRunClient(gr.config).QueryGroups(gr)
}

// QueryCourse queries the "course" edge of the GroupRun entity.
func (gr *GroupRun) QueryCourse() *CourseQuery {
	return NewGroupRunClient(gr.config).QueryCourse(gr)
}

// Update returns a builder for updating this GroupRun.
// Note that you need to call GroupRun.Unwrap() before calling this method if this GroupRun
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GroupRun) Update() *GroupRunUpdateOne {
	return NewGroupRunClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the GroupRun entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GroupRun) Unwrap() *GroupRun {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("model: GroupRun is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GroupRun) String() string {
	var builder strings.Builder
	builder.WriteString("GroupRun(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(gr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("group_size=")
	builder.WriteString(fmt.Sprintf("%v", gr.GroupSize))
	builder.WriteString(", ")
	builder.WriteString("best_score_history=")
	builder.WriteString(fmt.Sprintf("%v", gr.BestScoreHistory))
	builder.WriteString(", ")
	builder.WriteString("candidate_score_history=")
	builder.WriteString(fmt.Sprintf("%v", gr.CandidateScoreHistory))
	builder.WriteByte(')')
	return builder.String()
}

// GroupRuns is a parsable slice of GroupRun.
type GroupRuns []*GroupRun
