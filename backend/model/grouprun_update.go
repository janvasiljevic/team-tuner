// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"jv/team-tone-tuner/model/course"
	"jv/team-tone-tuner/model/group"
	"jv/team-tone-tuner/model/grouprun"
	"jv/team-tone-tuner/model/predicate"
	"jv/team-tone-tuner/model/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GroupRunUpdate is the builder for updating GroupRun entities.
type GroupRunUpdate struct {
	config
	hooks    []Hook
	mutation *GroupRunMutation
}

// Where appends a list predicates to the GroupRunUpdate builder.
func (gru *GroupRunUpdate) Where(ps ...predicate.GroupRun) *GroupRunUpdate {
	gru.mutation.Where(ps...)
	return gru
}

// SetUpdatedAt sets the "updated_at" field.
func (gru *GroupRunUpdate) SetUpdatedAt(t time.Time) *GroupRunUpdate {
	gru.mutation.SetUpdatedAt(t)
	return gru
}

// SetGroupSize sets the "group_size" field.
func (gru *GroupRunUpdate) SetGroupSize(i []int) *GroupRunUpdate {
	gru.mutation.SetGroupSize(i)
	return gru
}

// AppendGroupSize appends i to the "group_size" field.
func (gru *GroupRunUpdate) AppendGroupSize(i []int) *GroupRunUpdate {
	gru.mutation.AppendGroupSize(i)
	return gru
}

// SetBestScoreHistory sets the "best_score_history" field.
func (gru *GroupRunUpdate) SetBestScoreHistory(f []float64) *GroupRunUpdate {
	gru.mutation.SetBestScoreHistory(f)
	return gru
}

// AppendBestScoreHistory appends f to the "best_score_history" field.
func (gru *GroupRunUpdate) AppendBestScoreHistory(f []float64) *GroupRunUpdate {
	gru.mutation.AppendBestScoreHistory(f)
	return gru
}

// SetCandidateScoreHistory sets the "candidate_score_history" field.
func (gru *GroupRunUpdate) SetCandidateScoreHistory(f []float64) *GroupRunUpdate {
	gru.mutation.SetCandidateScoreHistory(f)
	return gru
}

// AppendCandidateScoreHistory appends f to the "candidate_score_history" field.
func (gru *GroupRunUpdate) AppendCandidateScoreHistory(f []float64) *GroupRunUpdate {
	gru.mutation.AppendCandidateScoreHistory(f)
	return gru
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (gru *GroupRunUpdate) SetCreatedByID(id uuid.UUID) *GroupRunUpdate {
	gru.mutation.SetCreatedByID(id)
	return gru
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (gru *GroupRunUpdate) SetCreatedBy(u *User) *GroupRunUpdate {
	return gru.SetCreatedByID(u.ID)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (gru *GroupRunUpdate) AddGroupIDs(ids ...uuid.UUID) *GroupRunUpdate {
	gru.mutation.AddGroupIDs(ids...)
	return gru
}

// AddGroups adds the "groups" edges to the Group entity.
func (gru *GroupRunUpdate) AddGroups(g ...*Group) *GroupRunUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gru.AddGroupIDs(ids...)
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (gru *GroupRunUpdate) SetCourseID(id uuid.UUID) *GroupRunUpdate {
	gru.mutation.SetCourseID(id)
	return gru
}

// SetCourse sets the "course" edge to the Course entity.
func (gru *GroupRunUpdate) SetCourse(c *Course) *GroupRunUpdate {
	return gru.SetCourseID(c.ID)
}

// Mutation returns the GroupRunMutation object of the builder.
func (gru *GroupRunUpdate) Mutation() *GroupRunMutation {
	return gru.mutation
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (gru *GroupRunUpdate) ClearCreatedBy() *GroupRunUpdate {
	gru.mutation.ClearCreatedBy()
	return gru
}

// ClearGroups clears all "groups" edges to the Group entity.
func (gru *GroupRunUpdate) ClearGroups() *GroupRunUpdate {
	gru.mutation.ClearGroups()
	return gru
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (gru *GroupRunUpdate) RemoveGroupIDs(ids ...uuid.UUID) *GroupRunUpdate {
	gru.mutation.RemoveGroupIDs(ids...)
	return gru
}

// RemoveGroups removes "groups" edges to Group entities.
func (gru *GroupRunUpdate) RemoveGroups(g ...*Group) *GroupRunUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gru.RemoveGroupIDs(ids...)
}

// ClearCourse clears the "course" edge to the Course entity.
func (gru *GroupRunUpdate) ClearCourse() *GroupRunUpdate {
	gru.mutation.ClearCourse()
	return gru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gru *GroupRunUpdate) Save(ctx context.Context) (int, error) {
	gru.defaults()
	return withHooks(ctx, gru.sqlSave, gru.mutation, gru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gru *GroupRunUpdate) SaveX(ctx context.Context) int {
	affected, err := gru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gru *GroupRunUpdate) Exec(ctx context.Context) error {
	_, err := gru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gru *GroupRunUpdate) ExecX(ctx context.Context) {
	if err := gru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gru *GroupRunUpdate) defaults() {
	if _, ok := gru.mutation.UpdatedAt(); !ok {
		v := grouprun.UpdateDefaultUpdatedAt()
		gru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gru *GroupRunUpdate) check() error {
	if _, ok := gru.mutation.CreatedByID(); gru.mutation.CreatedByCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "GroupRun.created_by"`)
	}
	if _, ok := gru.mutation.CourseID(); gru.mutation.CourseCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "GroupRun.course"`)
	}
	return nil
}

func (gru *GroupRunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(grouprun.Table, grouprun.Columns, sqlgraph.NewFieldSpec(grouprun.FieldID, field.TypeUUID))
	if ps := gru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gru.mutation.UpdatedAt(); ok {
		_spec.SetField(grouprun.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gru.mutation.GroupSize(); ok {
		_spec.SetField(grouprun.FieldGroupSize, field.TypeJSON, value)
	}
	if value, ok := gru.mutation.AppendedGroupSize(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, grouprun.FieldGroupSize, value)
		})
	}
	if value, ok := gru.mutation.BestScoreHistory(); ok {
		_spec.SetField(grouprun.FieldBestScoreHistory, field.TypeJSON, value)
	}
	if value, ok := gru.mutation.AppendedBestScoreHistory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, grouprun.FieldBestScoreHistory, value)
		})
	}
	if value, ok := gru.mutation.CandidateScoreHistory(); ok {
		_spec.SetField(grouprun.FieldCandidateScoreHistory, field.TypeJSON, value)
	}
	if value, ok := gru.mutation.AppendedCandidateScoreHistory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, grouprun.FieldCandidateScoreHistory, value)
		})
	}
	if gru.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grouprun.CreatedByTable,
			Columns: []string{grouprun.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grouprun.CreatedByTable,
			Columns: []string{grouprun.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gru.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grouprun.GroupsTable,
			Columns: []string{grouprun.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !gru.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grouprun.GroupsTable,
			Columns: []string{grouprun.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grouprun.GroupsTable,
			Columns: []string{grouprun.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gru.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprun.CourseTable,
			Columns: []string{grouprun.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprun.CourseTable,
			Columns: []string{grouprun.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grouprun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gru.mutation.done = true
	return n, nil
}

// GroupRunUpdateOne is the builder for updating a single GroupRun entity.
type GroupRunUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupRunMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (gruo *GroupRunUpdateOne) SetUpdatedAt(t time.Time) *GroupRunUpdateOne {
	gruo.mutation.SetUpdatedAt(t)
	return gruo
}

// SetGroupSize sets the "group_size" field.
func (gruo *GroupRunUpdateOne) SetGroupSize(i []int) *GroupRunUpdateOne {
	gruo.mutation.SetGroupSize(i)
	return gruo
}

// AppendGroupSize appends i to the "group_size" field.
func (gruo *GroupRunUpdateOne) AppendGroupSize(i []int) *GroupRunUpdateOne {
	gruo.mutation.AppendGroupSize(i)
	return gruo
}

// SetBestScoreHistory sets the "best_score_history" field.
func (gruo *GroupRunUpdateOne) SetBestScoreHistory(f []float64) *GroupRunUpdateOne {
	gruo.mutation.SetBestScoreHistory(f)
	return gruo
}

// AppendBestScoreHistory appends f to the "best_score_history" field.
func (gruo *GroupRunUpdateOne) AppendBestScoreHistory(f []float64) *GroupRunUpdateOne {
	gruo.mutation.AppendBestScoreHistory(f)
	return gruo
}

// SetCandidateScoreHistory sets the "candidate_score_history" field.
func (gruo *GroupRunUpdateOne) SetCandidateScoreHistory(f []float64) *GroupRunUpdateOne {
	gruo.mutation.SetCandidateScoreHistory(f)
	return gruo
}

// AppendCandidateScoreHistory appends f to the "candidate_score_history" field.
func (gruo *GroupRunUpdateOne) AppendCandidateScoreHistory(f []float64) *GroupRunUpdateOne {
	gruo.mutation.AppendCandidateScoreHistory(f)
	return gruo
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (gruo *GroupRunUpdateOne) SetCreatedByID(id uuid.UUID) *GroupRunUpdateOne {
	gruo.mutation.SetCreatedByID(id)
	return gruo
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (gruo *GroupRunUpdateOne) SetCreatedBy(u *User) *GroupRunUpdateOne {
	return gruo.SetCreatedByID(u.ID)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (gruo *GroupRunUpdateOne) AddGroupIDs(ids ...uuid.UUID) *GroupRunUpdateOne {
	gruo.mutation.AddGroupIDs(ids...)
	return gruo
}

// AddGroups adds the "groups" edges to the Group entity.
func (gruo *GroupRunUpdateOne) AddGroups(g ...*Group) *GroupRunUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gruo.AddGroupIDs(ids...)
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (gruo *GroupRunUpdateOne) SetCourseID(id uuid.UUID) *GroupRunUpdateOne {
	gruo.mutation.SetCourseID(id)
	return gruo
}

// SetCourse sets the "course" edge to the Course entity.
func (gruo *GroupRunUpdateOne) SetCourse(c *Course) *GroupRunUpdateOne {
	return gruo.SetCourseID(c.ID)
}

// Mutation returns the GroupRunMutation object of the builder.
func (gruo *GroupRunUpdateOne) Mutation() *GroupRunMutation {
	return gruo.mutation
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (gruo *GroupRunUpdateOne) ClearCreatedBy() *GroupRunUpdateOne {
	gruo.mutation.ClearCreatedBy()
	return gruo
}

// ClearGroups clears all "groups" edges to the Group entity.
func (gruo *GroupRunUpdateOne) ClearGroups() *GroupRunUpdateOne {
	gruo.mutation.ClearGroups()
	return gruo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (gruo *GroupRunUpdateOne) RemoveGroupIDs(ids ...uuid.UUID) *GroupRunUpdateOne {
	gruo.mutation.RemoveGroupIDs(ids...)
	return gruo
}

// RemoveGroups removes "groups" edges to Group entities.
func (gruo *GroupRunUpdateOne) RemoveGroups(g ...*Group) *GroupRunUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gruo.RemoveGroupIDs(ids...)
}

// ClearCourse clears the "course" edge to the Course entity.
func (gruo *GroupRunUpdateOne) ClearCourse() *GroupRunUpdateOne {
	gruo.mutation.ClearCourse()
	return gruo
}

// Where appends a list predicates to the GroupRunUpdate builder.
func (gruo *GroupRunUpdateOne) Where(ps ...predicate.GroupRun) *GroupRunUpdateOne {
	gruo.mutation.Where(ps...)
	return gruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gruo *GroupRunUpdateOne) Select(field string, fields ...string) *GroupRunUpdateOne {
	gruo.fields = append([]string{field}, fields...)
	return gruo
}

// Save executes the query and returns the updated GroupRun entity.
func (gruo *GroupRunUpdateOne) Save(ctx context.Context) (*GroupRun, error) {
	gruo.defaults()
	return withHooks(ctx, gruo.sqlSave, gruo.mutation, gruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gruo *GroupRunUpdateOne) SaveX(ctx context.Context) *GroupRun {
	node, err := gruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gruo *GroupRunUpdateOne) Exec(ctx context.Context) error {
	_, err := gruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gruo *GroupRunUpdateOne) ExecX(ctx context.Context) {
	if err := gruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gruo *GroupRunUpdateOne) defaults() {
	if _, ok := gruo.mutation.UpdatedAt(); !ok {
		v := grouprun.UpdateDefaultUpdatedAt()
		gruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gruo *GroupRunUpdateOne) check() error {
	if _, ok := gruo.mutation.CreatedByID(); gruo.mutation.CreatedByCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "GroupRun.created_by"`)
	}
	if _, ok := gruo.mutation.CourseID(); gruo.mutation.CourseCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "GroupRun.course"`)
	}
	return nil
}

func (gruo *GroupRunUpdateOne) sqlSave(ctx context.Context) (_node *GroupRun, err error) {
	if err := gruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grouprun.Table, grouprun.Columns, sqlgraph.NewFieldSpec(grouprun.FieldID, field.TypeUUID))
	id, ok := gruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "GroupRun.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grouprun.FieldID)
		for _, f := range fields {
			if !grouprun.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != grouprun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gruo.mutation.UpdatedAt(); ok {
		_spec.SetField(grouprun.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gruo.mutation.GroupSize(); ok {
		_spec.SetField(grouprun.FieldGroupSize, field.TypeJSON, value)
	}
	if value, ok := gruo.mutation.AppendedGroupSize(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, grouprun.FieldGroupSize, value)
		})
	}
	if value, ok := gruo.mutation.BestScoreHistory(); ok {
		_spec.SetField(grouprun.FieldBestScoreHistory, field.TypeJSON, value)
	}
	if value, ok := gruo.mutation.AppendedBestScoreHistory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, grouprun.FieldBestScoreHistory, value)
		})
	}
	if value, ok := gruo.mutation.CandidateScoreHistory(); ok {
		_spec.SetField(grouprun.FieldCandidateScoreHistory, field.TypeJSON, value)
	}
	if value, ok := gruo.mutation.AppendedCandidateScoreHistory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, grouprun.FieldCandidateScoreHistory, value)
		})
	}
	if gruo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grouprun.CreatedByTable,
			Columns: []string{grouprun.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grouprun.CreatedByTable,
			Columns: []string{grouprun.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gruo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grouprun.GroupsTable,
			Columns: []string{grouprun.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !gruo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grouprun.GroupsTable,
			Columns: []string{grouprun.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grouprun.GroupsTable,
			Columns: []string{grouprun.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gruo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprun.CourseTable,
			Columns: []string{grouprun.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprun.CourseTable,
			Columns: []string{grouprun.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroupRun{config: gruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grouprun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gruo.mutation.done = true
	return _node, nil
}
