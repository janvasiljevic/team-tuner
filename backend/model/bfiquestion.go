// Code generated by ent, DO NOT EDIT.

package model

import (
	"fmt"
	"jv/team-tone-tuner/model/bfiquestion"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BfiQuestion is the model entity for the BfiQuestion schema.
type BfiQuestion struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The time when the record was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time when the record was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Questiono holds the value of the "questiono" field.
	Questiono string `json:"questiono,omitempty"`
	// Facet holds the value of the "facet" field.
	Facet string `json:"facet,omitempty"`
	// Dimension holds the value of the "dimension" field.
	Dimension bfiquestion.Dimension `json:"dimension,omitempty"`
	// Influence holds the value of the "influence" field.
	Influence bfiquestion.Influence `json:"influence,omitempty"`
	// Alpha holds the value of the "alpha" field.
	Alpha float64 `json:"alpha,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BfiQuestionQuery when eager-loading is set.
	Edges        BfiQuestionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BfiQuestionEdges holds the relations/edges for other nodes in the graph.
type BfiQuestionEdges struct {
	// BfiAnswers holds the value of the bfi_answers edge.
	BfiAnswers []*BfiAnswer `json:"bfi_answers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BfiAnswersOrErr returns the BfiAnswers value or an error if the edge
// was not loaded in eager-loading.
func (e BfiQuestionEdges) BfiAnswersOrErr() ([]*BfiAnswer, error) {
	if e.loadedTypes[0] {
		return e.BfiAnswers, nil
	}
	return nil, &NotLoadedError{edge: "bfi_answers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BfiQuestion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bfiquestion.FieldAlpha:
			values[i] = new(sql.NullFloat64)
		case bfiquestion.FieldQuestiono, bfiquestion.FieldFacet, bfiquestion.FieldDimension, bfiquestion.FieldInfluence:
			values[i] = new(sql.NullString)
		case bfiquestion.FieldCreatedAt, bfiquestion.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case bfiquestion.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BfiQuestion fields.
func (bq *BfiQuestion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bfiquestion.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bq.ID = *value
			}
		case bfiquestion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bq.CreatedAt = value.Time
			}
		case bfiquestion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bq.UpdatedAt = value.Time
			}
		case bfiquestion.FieldQuestiono:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field questiono", values[i])
			} else if value.Valid {
				bq.Questiono = value.String
			}
		case bfiquestion.FieldFacet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field facet", values[i])
			} else if value.Valid {
				bq.Facet = value.String
			}
		case bfiquestion.FieldDimension:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dimension", values[i])
			} else if value.Valid {
				bq.Dimension = bfiquestion.Dimension(value.String)
			}
		case bfiquestion.FieldInfluence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field influence", values[i])
			} else if value.Valid {
				bq.Influence = bfiquestion.Influence(value.String)
			}
		case bfiquestion.FieldAlpha:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field alpha", values[i])
			} else if value.Valid {
				bq.Alpha = value.Float64
			}
		default:
			bq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BfiQuestion.
// This includes values selected through modifiers, order, etc.
func (bq *BfiQuestion) Value(name string) (ent.Value, error) {
	return bq.selectValues.Get(name)
}

// QueryBfiAnswers queries the "bfi_answers" edge of the BfiQuestion entity.
func (bq *BfiQuestion) QueryBfiAnswers() *BfiAnswerQuery {
	return NewBfiQuestionClient(bq.config).QueryBfiAnswers(bq)
}

// Update returns a builder for updating this BfiQuestion.
// Note that you need to call BfiQuestion.Unwrap() before calling this method if this BfiQuestion
// was returned from a transaction, and the transaction was committed or rolled back.
func (bq *BfiQuestion) Update() *BfiQuestionUpdateOne {
	return NewBfiQuestionClient(bq.config).UpdateOne(bq)
}

// Unwrap unwraps the BfiQuestion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bq *BfiQuestion) Unwrap() *BfiQuestion {
	_tx, ok := bq.config.driver.(*txDriver)
	if !ok {
		panic("model: BfiQuestion is not a transactional entity")
	}
	bq.config.driver = _tx.drv
	return bq
}

// String implements the fmt.Stringer.
func (bq *BfiQuestion) String() string {
	var builder strings.Builder
	builder.WriteString("BfiQuestion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bq.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bq.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("questiono=")
	builder.WriteString(bq.Questiono)
	builder.WriteString(", ")
	builder.WriteString("facet=")
	builder.WriteString(bq.Facet)
	builder.WriteString(", ")
	builder.WriteString("dimension=")
	builder.WriteString(fmt.Sprintf("%v", bq.Dimension))
	builder.WriteString(", ")
	builder.WriteString("influence=")
	builder.WriteString(fmt.Sprintf("%v", bq.Influence))
	builder.WriteString(", ")
	builder.WriteString("alpha=")
	builder.WriteString(fmt.Sprintf("%v", bq.Alpha))
	builder.WriteByte(')')
	return builder.String()
}

// BfiQuestions is a parsable slice of BfiQuestion.
type BfiQuestions []*BfiQuestion
