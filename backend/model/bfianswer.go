// Code generated by ent, DO NOT EDIT.

package model

import (
	"fmt"
	"jv/team-tone-tuner/model/bfianswer"
	"jv/team-tone-tuner/model/bfiquestion"
	"jv/team-tone-tuner/model/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BfiAnswer is the model entity for the BfiAnswer schema.
type BfiAnswer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The time when the record was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time when the record was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Value holds the value of the "value" field.
	Value *int `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BfiAnswerQuery when eager-loading is set.
	Edges                    BfiAnswerEdges `json:"edges"`
	bfi_question_bfi_answers *uuid.UUID
	user_bfi_answers         *uuid.UUID
	selectValues             sql.SelectValues
}

// BfiAnswerEdges holds the relations/edges for other nodes in the graph.
type BfiAnswerEdges struct {
	// BfiQuestion holds the value of the bfi_question edge.
	BfiQuestion *BfiQuestion `json:"bfi_question,omitempty"`
	// Student holds the value of the student edge.
	Student *User `json:"student,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BfiQuestionOrErr returns the BfiQuestion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BfiAnswerEdges) BfiQuestionOrErr() (*BfiQuestion, error) {
	if e.loadedTypes[0] {
		if e.BfiQuestion == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: bfiquestion.Label}
		}
		return e.BfiQuestion, nil
	}
	return nil, &NotLoadedError{edge: "bfi_question"}
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BfiAnswerEdges) StudentOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Student == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BfiAnswer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bfianswer.FieldValue:
			values[i] = new(sql.NullInt64)
		case bfianswer.FieldCreatedAt, bfianswer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case bfianswer.FieldID:
			values[i] = new(uuid.UUID)
		case bfianswer.ForeignKeys[0]: // bfi_question_bfi_answers
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case bfianswer.ForeignKeys[1]: // user_bfi_answers
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BfiAnswer fields.
func (ba *BfiAnswer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bfianswer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ba.ID = *value
			}
		case bfianswer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ba.CreatedAt = value.Time
			}
		case bfianswer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ba.UpdatedAt = value.Time
			}
		case bfianswer.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ba.Value = new(int)
				*ba.Value = int(value.Int64)
			}
		case bfianswer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field bfi_question_bfi_answers", values[i])
			} else if value.Valid {
				ba.bfi_question_bfi_answers = new(uuid.UUID)
				*ba.bfi_question_bfi_answers = *value.S.(*uuid.UUID)
			}
		case bfianswer.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_bfi_answers", values[i])
			} else if value.Valid {
				ba.user_bfi_answers = new(uuid.UUID)
				*ba.user_bfi_answers = *value.S.(*uuid.UUID)
			}
		default:
			ba.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the BfiAnswer.
// This includes values selected through modifiers, order, etc.
func (ba *BfiAnswer) GetValue(name string) (ent.Value, error) {
	return ba.selectValues.Get(name)
}

// QueryBfiQuestion queries the "bfi_question" edge of the BfiAnswer entity.
func (ba *BfiAnswer) QueryBfiQuestion() *BfiQuestionQuery {
	return NewBfiAnswerClient(ba.config).QueryBfiQuestion(ba)
}

// QueryStudent queries the "student" edge of the BfiAnswer entity.
func (ba *BfiAnswer) QueryStudent() *UserQuery {
	return NewBfiAnswerClient(ba.config).QueryStudent(ba)
}

// Update returns a builder for updating this BfiAnswer.
// Note that you need to call BfiAnswer.Unwrap() before calling this method if this BfiAnswer
// was returned from a transaction, and the transaction was committed or rolled back.
func (ba *BfiAnswer) Update() *BfiAnswerUpdateOne {
	return NewBfiAnswerClient(ba.config).UpdateOne(ba)
}

// Unwrap unwraps the BfiAnswer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ba *BfiAnswer) Unwrap() *BfiAnswer {
	_tx, ok := ba.config.driver.(*txDriver)
	if !ok {
		panic("model: BfiAnswer is not a transactional entity")
	}
	ba.config.driver = _tx.drv
	return ba
}

// String implements the fmt.Stringer.
func (ba *BfiAnswer) String() string {
	var builder strings.Builder
	builder.WriteString("BfiAnswer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ba.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ba.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ba.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ba.Value; v != nil {
		builder.WriteString("value=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BfiAnswers is a parsable slice of BfiAnswer.
type BfiAnswers []*BfiAnswer
