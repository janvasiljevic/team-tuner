// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"jv/team-tone-tuner/model/bfianswer"
	"jv/team-tone-tuner/model/bfiquestion"
	"jv/team-tone-tuner/model/bfireport"
	"jv/team-tone-tuner/model/course"
	"jv/team-tone-tuner/model/group"
	"jv/team-tone-tuner/model/grouprun"
	"jv/team-tone-tuner/model/predicate"
	"jv/team-tone-tuner/model/user"
	"jv/team-tone-tuner/schema"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBfiAnswer   = "BfiAnswer"
	TypeBfiQuestion = "BfiQuestion"
	TypeBfiReport   = "BfiReport"
	TypeCourse      = "Course"
	TypeGroup       = "Group"
	TypeGroupRun    = "GroupRun"
	TypeUser        = "User"
)

// BfiAnswerMutation represents an operation that mutates the BfiAnswer nodes in the graph.
type BfiAnswerMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	created_at          *time.Time
	updated_at          *time.Time
	value               *int
	addvalue            *int
	clearedFields       map[string]struct{}
	bfi_question        *uuid.UUID
	clearedbfi_question bool
	student             *uuid.UUID
	clearedstudent      bool
	done                bool
	oldValue            func(context.Context) (*BfiAnswer, error)
	predicates          []predicate.BfiAnswer
}

var _ ent.Mutation = (*BfiAnswerMutation)(nil)

// bfianswerOption allows management of the mutation configuration using functional options.
type bfianswerOption func(*BfiAnswerMutation)

// newBfiAnswerMutation creates new mutation for the BfiAnswer entity.
func newBfiAnswerMutation(c config, op Op, opts ...bfianswerOption) *BfiAnswerMutation {
	m := &BfiAnswerMutation{
		config:        c,
		op:            op,
		typ:           TypeBfiAnswer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBfiAnswerID sets the ID field of the mutation.
func withBfiAnswerID(id uuid.UUID) bfianswerOption {
	return func(m *BfiAnswerMutation) {
		var (
			err   error
			once  sync.Once
			value *BfiAnswer
		)
		m.oldValue = func(ctx context.Context) (*BfiAnswer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BfiAnswer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBfiAnswer sets the old BfiAnswer of the mutation.
func withBfiAnswer(node *BfiAnswer) bfianswerOption {
	return func(m *BfiAnswerMutation) {
		m.oldValue = func(context.Context) (*BfiAnswer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BfiAnswerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BfiAnswerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BfiAnswer entities.
func (m *BfiAnswerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BfiAnswerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BfiAnswerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BfiAnswer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BfiAnswerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BfiAnswerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BfiAnswer entity.
// If the BfiAnswer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiAnswerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BfiAnswerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BfiAnswerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BfiAnswerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BfiAnswer entity.
// If the BfiAnswer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiAnswerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BfiAnswerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetValue sets the "value" field.
func (m *BfiAnswerMutation) SetValue(i int) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *BfiAnswerMutation) Value() (r int, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the BfiAnswer entity.
// If the BfiAnswer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiAnswerMutation) OldValue(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to the "value" field.
func (m *BfiAnswerMutation) AddValue(i int) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *BfiAnswerMutation) AddedValue() (r int, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ClearValue clears the value of the "value" field.
func (m *BfiAnswerMutation) ClearValue() {
	m.value = nil
	m.addvalue = nil
	m.clearedFields[bfianswer.FieldValue] = struct{}{}
}

// ValueCleared returns if the "value" field was cleared in this mutation.
func (m *BfiAnswerMutation) ValueCleared() bool {
	_, ok := m.clearedFields[bfianswer.FieldValue]
	return ok
}

// ResetValue resets all changes to the "value" field.
func (m *BfiAnswerMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
	delete(m.clearedFields, bfianswer.FieldValue)
}

// SetBfiQuestionID sets the "bfi_question" edge to the BfiQuestion entity by id.
func (m *BfiAnswerMutation) SetBfiQuestionID(id uuid.UUID) {
	m.bfi_question = &id
}

// ClearBfiQuestion clears the "bfi_question" edge to the BfiQuestion entity.
func (m *BfiAnswerMutation) ClearBfiQuestion() {
	m.clearedbfi_question = true
}

// BfiQuestionCleared reports if the "bfi_question" edge to the BfiQuestion entity was cleared.
func (m *BfiAnswerMutation) BfiQuestionCleared() bool {
	return m.clearedbfi_question
}

// BfiQuestionID returns the "bfi_question" edge ID in the mutation.
func (m *BfiAnswerMutation) BfiQuestionID() (id uuid.UUID, exists bool) {
	if m.bfi_question != nil {
		return *m.bfi_question, true
	}
	return
}

// BfiQuestionIDs returns the "bfi_question" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BfiQuestionID instead. It exists only for internal usage by the builders.
func (m *BfiAnswerMutation) BfiQuestionIDs() (ids []uuid.UUID) {
	if id := m.bfi_question; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBfiQuestion resets all changes to the "bfi_question" edge.
func (m *BfiAnswerMutation) ResetBfiQuestion() {
	m.bfi_question = nil
	m.clearedbfi_question = false
}

// SetStudentID sets the "student" edge to the User entity by id.
func (m *BfiAnswerMutation) SetStudentID(id uuid.UUID) {
	m.student = &id
}

// ClearStudent clears the "student" edge to the User entity.
func (m *BfiAnswerMutation) ClearStudent() {
	m.clearedstudent = true
}

// StudentCleared reports if the "student" edge to the User entity was cleared.
func (m *BfiAnswerMutation) StudentCleared() bool {
	return m.clearedstudent
}

// StudentID returns the "student" edge ID in the mutation.
func (m *BfiAnswerMutation) StudentID() (id uuid.UUID, exists bool) {
	if m.student != nil {
		return *m.student, true
	}
	return
}

// StudentIDs returns the "student" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StudentID instead. It exists only for internal usage by the builders.
func (m *BfiAnswerMutation) StudentIDs() (ids []uuid.UUID) {
	if id := m.student; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudent resets all changes to the "student" edge.
func (m *BfiAnswerMutation) ResetStudent() {
	m.student = nil
	m.clearedstudent = false
}

// Where appends a list predicates to the BfiAnswerMutation builder.
func (m *BfiAnswerMutation) Where(ps ...predicate.BfiAnswer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BfiAnswerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BfiAnswerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BfiAnswer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BfiAnswerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BfiAnswerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BfiAnswer).
func (m *BfiAnswerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BfiAnswerMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, bfianswer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bfianswer.FieldUpdatedAt)
	}
	if m.value != nil {
		fields = append(fields, bfianswer.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BfiAnswerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bfianswer.FieldCreatedAt:
		return m.CreatedAt()
	case bfianswer.FieldUpdatedAt:
		return m.UpdatedAt()
	case bfianswer.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BfiAnswerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bfianswer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bfianswer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case bfianswer.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown BfiAnswer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BfiAnswerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bfianswer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bfianswer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case bfianswer.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown BfiAnswer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BfiAnswerMutation) AddedFields() []string {
	var fields []string
	if m.addvalue != nil {
		fields = append(fields, bfianswer.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BfiAnswerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bfianswer.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BfiAnswerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bfianswer.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown BfiAnswer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BfiAnswerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bfianswer.FieldValue) {
		fields = append(fields, bfianswer.FieldValue)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BfiAnswerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BfiAnswerMutation) ClearField(name string) error {
	switch name {
	case bfianswer.FieldValue:
		m.ClearValue()
		return nil
	}
	return fmt.Errorf("unknown BfiAnswer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BfiAnswerMutation) ResetField(name string) error {
	switch name {
	case bfianswer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bfianswer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case bfianswer.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown BfiAnswer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BfiAnswerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.bfi_question != nil {
		edges = append(edges, bfianswer.EdgeBfiQuestion)
	}
	if m.student != nil {
		edges = append(edges, bfianswer.EdgeStudent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BfiAnswerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bfianswer.EdgeBfiQuestion:
		if id := m.bfi_question; id != nil {
			return []ent.Value{*id}
		}
	case bfianswer.EdgeStudent:
		if id := m.student; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BfiAnswerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BfiAnswerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BfiAnswerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedbfi_question {
		edges = append(edges, bfianswer.EdgeBfiQuestion)
	}
	if m.clearedstudent {
		edges = append(edges, bfianswer.EdgeStudent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BfiAnswerMutation) EdgeCleared(name string) bool {
	switch name {
	case bfianswer.EdgeBfiQuestion:
		return m.clearedbfi_question
	case bfianswer.EdgeStudent:
		return m.clearedstudent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BfiAnswerMutation) ClearEdge(name string) error {
	switch name {
	case bfianswer.EdgeBfiQuestion:
		m.ClearBfiQuestion()
		return nil
	case bfianswer.EdgeStudent:
		m.ClearStudent()
		return nil
	}
	return fmt.Errorf("unknown BfiAnswer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BfiAnswerMutation) ResetEdge(name string) error {
	switch name {
	case bfianswer.EdgeBfiQuestion:
		m.ResetBfiQuestion()
		return nil
	case bfianswer.EdgeStudent:
		m.ResetStudent()
		return nil
	}
	return fmt.Errorf("unknown BfiAnswer edge %s", name)
}

// BfiQuestionMutation represents an operation that mutates the BfiQuestion nodes in the graph.
type BfiQuestionMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created_at         *time.Time
	updated_at         *time.Time
	questiono          *string
	facet              *string
	dimension          *bfiquestion.Dimension
	influence          *bfiquestion.Influence
	alpha              *float64
	addalpha           *float64
	clearedFields      map[string]struct{}
	bfi_answers        map[uuid.UUID]struct{}
	removedbfi_answers map[uuid.UUID]struct{}
	clearedbfi_answers bool
	done               bool
	oldValue           func(context.Context) (*BfiQuestion, error)
	predicates         []predicate.BfiQuestion
}

var _ ent.Mutation = (*BfiQuestionMutation)(nil)

// bfiquestionOption allows management of the mutation configuration using functional options.
type bfiquestionOption func(*BfiQuestionMutation)

// newBfiQuestionMutation creates new mutation for the BfiQuestion entity.
func newBfiQuestionMutation(c config, op Op, opts ...bfiquestionOption) *BfiQuestionMutation {
	m := &BfiQuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeBfiQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBfiQuestionID sets the ID field of the mutation.
func withBfiQuestionID(id uuid.UUID) bfiquestionOption {
	return func(m *BfiQuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *BfiQuestion
		)
		m.oldValue = func(ctx context.Context) (*BfiQuestion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BfiQuestion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBfiQuestion sets the old BfiQuestion of the mutation.
func withBfiQuestion(node *BfiQuestion) bfiquestionOption {
	return func(m *BfiQuestionMutation) {
		m.oldValue = func(context.Context) (*BfiQuestion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BfiQuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BfiQuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BfiQuestion entities.
func (m *BfiQuestionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BfiQuestionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BfiQuestionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BfiQuestion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BfiQuestionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BfiQuestionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BfiQuestion entity.
// If the BfiQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiQuestionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BfiQuestionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BfiQuestionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BfiQuestionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BfiQuestion entity.
// If the BfiQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiQuestionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BfiQuestionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetQuestiono sets the "questiono" field.
func (m *BfiQuestionMutation) SetQuestiono(s string) {
	m.questiono = &s
}

// Questiono returns the value of the "questiono" field in the mutation.
func (m *BfiQuestionMutation) Questiono() (r string, exists bool) {
	v := m.questiono
	if v == nil {
		return
	}
	return *v, true
}

// OldQuestiono returns the old "questiono" field's value of the BfiQuestion entity.
// If the BfiQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiQuestionMutation) OldQuestiono(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuestiono is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuestiono requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuestiono: %w", err)
	}
	return oldValue.Questiono, nil
}

// ResetQuestiono resets all changes to the "questiono" field.
func (m *BfiQuestionMutation) ResetQuestiono() {
	m.questiono = nil
}

// SetFacet sets the "facet" field.
func (m *BfiQuestionMutation) SetFacet(s string) {
	m.facet = &s
}

// Facet returns the value of the "facet" field in the mutation.
func (m *BfiQuestionMutation) Facet() (r string, exists bool) {
	v := m.facet
	if v == nil {
		return
	}
	return *v, true
}

// OldFacet returns the old "facet" field's value of the BfiQuestion entity.
// If the BfiQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiQuestionMutation) OldFacet(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFacet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFacet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFacet: %w", err)
	}
	return oldValue.Facet, nil
}

// ResetFacet resets all changes to the "facet" field.
func (m *BfiQuestionMutation) ResetFacet() {
	m.facet = nil
}

// SetDimension sets the "dimension" field.
func (m *BfiQuestionMutation) SetDimension(b bfiquestion.Dimension) {
	m.dimension = &b
}

// Dimension returns the value of the "dimension" field in the mutation.
func (m *BfiQuestionMutation) Dimension() (r bfiquestion.Dimension, exists bool) {
	v := m.dimension
	if v == nil {
		return
	}
	return *v, true
}

// OldDimension returns the old "dimension" field's value of the BfiQuestion entity.
// If the BfiQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiQuestionMutation) OldDimension(ctx context.Context) (v bfiquestion.Dimension, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDimension is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDimension requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDimension: %w", err)
	}
	return oldValue.Dimension, nil
}

// ResetDimension resets all changes to the "dimension" field.
func (m *BfiQuestionMutation) ResetDimension() {
	m.dimension = nil
}

// SetInfluence sets the "influence" field.
func (m *BfiQuestionMutation) SetInfluence(b bfiquestion.Influence) {
	m.influence = &b
}

// Influence returns the value of the "influence" field in the mutation.
func (m *BfiQuestionMutation) Influence() (r bfiquestion.Influence, exists bool) {
	v := m.influence
	if v == nil {
		return
	}
	return *v, true
}

// OldInfluence returns the old "influence" field's value of the BfiQuestion entity.
// If the BfiQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiQuestionMutation) OldInfluence(ctx context.Context) (v bfiquestion.Influence, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInfluence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInfluence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfluence: %w", err)
	}
	return oldValue.Influence, nil
}

// ResetInfluence resets all changes to the "influence" field.
func (m *BfiQuestionMutation) ResetInfluence() {
	m.influence = nil
}

// SetAlpha sets the "alpha" field.
func (m *BfiQuestionMutation) SetAlpha(f float64) {
	m.alpha = &f
	m.addalpha = nil
}

// Alpha returns the value of the "alpha" field in the mutation.
func (m *BfiQuestionMutation) Alpha() (r float64, exists bool) {
	v := m.alpha
	if v == nil {
		return
	}
	return *v, true
}

// OldAlpha returns the old "alpha" field's value of the BfiQuestion entity.
// If the BfiQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiQuestionMutation) OldAlpha(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlpha is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlpha requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlpha: %w", err)
	}
	return oldValue.Alpha, nil
}

// AddAlpha adds f to the "alpha" field.
func (m *BfiQuestionMutation) AddAlpha(f float64) {
	if m.addalpha != nil {
		*m.addalpha += f
	} else {
		m.addalpha = &f
	}
}

// AddedAlpha returns the value that was added to the "alpha" field in this mutation.
func (m *BfiQuestionMutation) AddedAlpha() (r float64, exists bool) {
	v := m.addalpha
	if v == nil {
		return
	}
	return *v, true
}

// ResetAlpha resets all changes to the "alpha" field.
func (m *BfiQuestionMutation) ResetAlpha() {
	m.alpha = nil
	m.addalpha = nil
}

// AddBfiAnswerIDs adds the "bfi_answers" edge to the BfiAnswer entity by ids.
func (m *BfiQuestionMutation) AddBfiAnswerIDs(ids ...uuid.UUID) {
	if m.bfi_answers == nil {
		m.bfi_answers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.bfi_answers[ids[i]] = struct{}{}
	}
}

// ClearBfiAnswers clears the "bfi_answers" edge to the BfiAnswer entity.
func (m *BfiQuestionMutation) ClearBfiAnswers() {
	m.clearedbfi_answers = true
}

// BfiAnswersCleared reports if the "bfi_answers" edge to the BfiAnswer entity was cleared.
func (m *BfiQuestionMutation) BfiAnswersCleared() bool {
	return m.clearedbfi_answers
}

// RemoveBfiAnswerIDs removes the "bfi_answers" edge to the BfiAnswer entity by IDs.
func (m *BfiQuestionMutation) RemoveBfiAnswerIDs(ids ...uuid.UUID) {
	if m.removedbfi_answers == nil {
		m.removedbfi_answers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.bfi_answers, ids[i])
		m.removedbfi_answers[ids[i]] = struct{}{}
	}
}

// RemovedBfiAnswers returns the removed IDs of the "bfi_answers" edge to the BfiAnswer entity.
func (m *BfiQuestionMutation) RemovedBfiAnswersIDs() (ids []uuid.UUID) {
	for id := range m.removedbfi_answers {
		ids = append(ids, id)
	}
	return
}

// BfiAnswersIDs returns the "bfi_answers" edge IDs in the mutation.
func (m *BfiQuestionMutation) BfiAnswersIDs() (ids []uuid.UUID) {
	for id := range m.bfi_answers {
		ids = append(ids, id)
	}
	return
}

// ResetBfiAnswers resets all changes to the "bfi_answers" edge.
func (m *BfiQuestionMutation) ResetBfiAnswers() {
	m.bfi_answers = nil
	m.clearedbfi_answers = false
	m.removedbfi_answers = nil
}

// Where appends a list predicates to the BfiQuestionMutation builder.
func (m *BfiQuestionMutation) Where(ps ...predicate.BfiQuestion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BfiQuestionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BfiQuestionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BfiQuestion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BfiQuestionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BfiQuestionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BfiQuestion).
func (m *BfiQuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BfiQuestionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, bfiquestion.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bfiquestion.FieldUpdatedAt)
	}
	if m.questiono != nil {
		fields = append(fields, bfiquestion.FieldQuestiono)
	}
	if m.facet != nil {
		fields = append(fields, bfiquestion.FieldFacet)
	}
	if m.dimension != nil {
		fields = append(fields, bfiquestion.FieldDimension)
	}
	if m.influence != nil {
		fields = append(fields, bfiquestion.FieldInfluence)
	}
	if m.alpha != nil {
		fields = append(fields, bfiquestion.FieldAlpha)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BfiQuestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bfiquestion.FieldCreatedAt:
		return m.CreatedAt()
	case bfiquestion.FieldUpdatedAt:
		return m.UpdatedAt()
	case bfiquestion.FieldQuestiono:
		return m.Questiono()
	case bfiquestion.FieldFacet:
		return m.Facet()
	case bfiquestion.FieldDimension:
		return m.Dimension()
	case bfiquestion.FieldInfluence:
		return m.Influence()
	case bfiquestion.FieldAlpha:
		return m.Alpha()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BfiQuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bfiquestion.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bfiquestion.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case bfiquestion.FieldQuestiono:
		return m.OldQuestiono(ctx)
	case bfiquestion.FieldFacet:
		return m.OldFacet(ctx)
	case bfiquestion.FieldDimension:
		return m.OldDimension(ctx)
	case bfiquestion.FieldInfluence:
		return m.OldInfluence(ctx)
	case bfiquestion.FieldAlpha:
		return m.OldAlpha(ctx)
	}
	return nil, fmt.Errorf("unknown BfiQuestion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BfiQuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bfiquestion.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bfiquestion.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case bfiquestion.FieldQuestiono:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuestiono(v)
		return nil
	case bfiquestion.FieldFacet:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFacet(v)
		return nil
	case bfiquestion.FieldDimension:
		v, ok := value.(bfiquestion.Dimension)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDimension(v)
		return nil
	case bfiquestion.FieldInfluence:
		v, ok := value.(bfiquestion.Influence)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfluence(v)
		return nil
	case bfiquestion.FieldAlpha:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlpha(v)
		return nil
	}
	return fmt.Errorf("unknown BfiQuestion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BfiQuestionMutation) AddedFields() []string {
	var fields []string
	if m.addalpha != nil {
		fields = append(fields, bfiquestion.FieldAlpha)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BfiQuestionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bfiquestion.FieldAlpha:
		return m.AddedAlpha()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BfiQuestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bfiquestion.FieldAlpha:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAlpha(v)
		return nil
	}
	return fmt.Errorf("unknown BfiQuestion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BfiQuestionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BfiQuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BfiQuestionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BfiQuestion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BfiQuestionMutation) ResetField(name string) error {
	switch name {
	case bfiquestion.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bfiquestion.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case bfiquestion.FieldQuestiono:
		m.ResetQuestiono()
		return nil
	case bfiquestion.FieldFacet:
		m.ResetFacet()
		return nil
	case bfiquestion.FieldDimension:
		m.ResetDimension()
		return nil
	case bfiquestion.FieldInfluence:
		m.ResetInfluence()
		return nil
	case bfiquestion.FieldAlpha:
		m.ResetAlpha()
		return nil
	}
	return fmt.Errorf("unknown BfiQuestion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BfiQuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.bfi_answers != nil {
		edges = append(edges, bfiquestion.EdgeBfiAnswers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BfiQuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bfiquestion.EdgeBfiAnswers:
		ids := make([]ent.Value, 0, len(m.bfi_answers))
		for id := range m.bfi_answers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BfiQuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedbfi_answers != nil {
		edges = append(edges, bfiquestion.EdgeBfiAnswers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BfiQuestionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bfiquestion.EdgeBfiAnswers:
		ids := make([]ent.Value, 0, len(m.removedbfi_answers))
		for id := range m.removedbfi_answers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BfiQuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbfi_answers {
		edges = append(edges, bfiquestion.EdgeBfiAnswers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BfiQuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case bfiquestion.EdgeBfiAnswers:
		return m.clearedbfi_answers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BfiQuestionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown BfiQuestion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BfiQuestionMutation) ResetEdge(name string) error {
	switch name {
	case bfiquestion.EdgeBfiAnswers:
		m.ResetBfiAnswers()
		return nil
	}
	return fmt.Errorf("unknown BfiQuestion edge %s", name)
}

// BfiReportMutation represents an operation that mutates the BfiReport nodes in the graph.
type BfiReportMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *time.Time
	updated_at        *time.Time
	conscientiousness *schema.BfiReportItem
	extraversion      *schema.BfiReportItem
	agreeableness     *schema.BfiReportItem
	neuroticism       *schema.BfiReportItem
	openness          *schema.BfiReportItem
	clearedFields     map[string]struct{}
	student           *uuid.UUID
	clearedstudent    bool
	done              bool
	oldValue          func(context.Context) (*BfiReport, error)
	predicates        []predicate.BfiReport
}

var _ ent.Mutation = (*BfiReportMutation)(nil)

// bfireportOption allows management of the mutation configuration using functional options.
type bfireportOption func(*BfiReportMutation)

// newBfiReportMutation creates new mutation for the BfiReport entity.
func newBfiReportMutation(c config, op Op, opts ...bfireportOption) *BfiReportMutation {
	m := &BfiReportMutation{
		config:        c,
		op:            op,
		typ:           TypeBfiReport,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBfiReportID sets the ID field of the mutation.
func withBfiReportID(id uuid.UUID) bfireportOption {
	return func(m *BfiReportMutation) {
		var (
			err   error
			once  sync.Once
			value *BfiReport
		)
		m.oldValue = func(ctx context.Context) (*BfiReport, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BfiReport.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBfiReport sets the old BfiReport of the mutation.
func withBfiReport(node *BfiReport) bfireportOption {
	return func(m *BfiReportMutation) {
		m.oldValue = func(context.Context) (*BfiReport, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BfiReportMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BfiReportMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BfiReport entities.
func (m *BfiReportMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BfiReportMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BfiReportMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BfiReport.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BfiReportMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BfiReportMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BfiReport entity.
// If the BfiReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiReportMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BfiReportMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BfiReportMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BfiReportMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BfiReport entity.
// If the BfiReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiReportMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BfiReportMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetConscientiousness sets the "conscientiousness" field.
func (m *BfiReportMutation) SetConscientiousness(sri schema.BfiReportItem) {
	m.conscientiousness = &sri
}

// Conscientiousness returns the value of the "conscientiousness" field in the mutation.
func (m *BfiReportMutation) Conscientiousness() (r schema.BfiReportItem, exists bool) {
	v := m.conscientiousness
	if v == nil {
		return
	}
	return *v, true
}

// OldConscientiousness returns the old "conscientiousness" field's value of the BfiReport entity.
// If the BfiReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiReportMutation) OldConscientiousness(ctx context.Context) (v schema.BfiReportItem, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConscientiousness is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConscientiousness requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConscientiousness: %w", err)
	}
	return oldValue.Conscientiousness, nil
}

// ResetConscientiousness resets all changes to the "conscientiousness" field.
func (m *BfiReportMutation) ResetConscientiousness() {
	m.conscientiousness = nil
}

// SetExtraversion sets the "extraversion" field.
func (m *BfiReportMutation) SetExtraversion(sri schema.BfiReportItem) {
	m.extraversion = &sri
}

// Extraversion returns the value of the "extraversion" field in the mutation.
func (m *BfiReportMutation) Extraversion() (r schema.BfiReportItem, exists bool) {
	v := m.extraversion
	if v == nil {
		return
	}
	return *v, true
}

// OldExtraversion returns the old "extraversion" field's value of the BfiReport entity.
// If the BfiReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiReportMutation) OldExtraversion(ctx context.Context) (v schema.BfiReportItem, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtraversion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtraversion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtraversion: %w", err)
	}
	return oldValue.Extraversion, nil
}

// ResetExtraversion resets all changes to the "extraversion" field.
func (m *BfiReportMutation) ResetExtraversion() {
	m.extraversion = nil
}

// SetAgreeableness sets the "agreeableness" field.
func (m *BfiReportMutation) SetAgreeableness(sri schema.BfiReportItem) {
	m.agreeableness = &sri
}

// Agreeableness returns the value of the "agreeableness" field in the mutation.
func (m *BfiReportMutation) Agreeableness() (r schema.BfiReportItem, exists bool) {
	v := m.agreeableness
	if v == nil {
		return
	}
	return *v, true
}

// OldAgreeableness returns the old "agreeableness" field's value of the BfiReport entity.
// If the BfiReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiReportMutation) OldAgreeableness(ctx context.Context) (v schema.BfiReportItem, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgreeableness is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgreeableness requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgreeableness: %w", err)
	}
	return oldValue.Agreeableness, nil
}

// ResetAgreeableness resets all changes to the "agreeableness" field.
func (m *BfiReportMutation) ResetAgreeableness() {
	m.agreeableness = nil
}

// SetNeuroticism sets the "neuroticism" field.
func (m *BfiReportMutation) SetNeuroticism(sri schema.BfiReportItem) {
	m.neuroticism = &sri
}

// Neuroticism returns the value of the "neuroticism" field in the mutation.
func (m *BfiReportMutation) Neuroticism() (r schema.BfiReportItem, exists bool) {
	v := m.neuroticism
	if v == nil {
		return
	}
	return *v, true
}

// OldNeuroticism returns the old "neuroticism" field's value of the BfiReport entity.
// If the BfiReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiReportMutation) OldNeuroticism(ctx context.Context) (v schema.BfiReportItem, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNeuroticism is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNeuroticism requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNeuroticism: %w", err)
	}
	return oldValue.Neuroticism, nil
}

// ResetNeuroticism resets all changes to the "neuroticism" field.
func (m *BfiReportMutation) ResetNeuroticism() {
	m.neuroticism = nil
}

// SetOpenness sets the "openness" field.
func (m *BfiReportMutation) SetOpenness(sri schema.BfiReportItem) {
	m.openness = &sri
}

// Openness returns the value of the "openness" field in the mutation.
func (m *BfiReportMutation) Openness() (r schema.BfiReportItem, exists bool) {
	v := m.openness
	if v == nil {
		return
	}
	return *v, true
}

// OldOpenness returns the old "openness" field's value of the BfiReport entity.
// If the BfiReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BfiReportMutation) OldOpenness(ctx context.Context) (v schema.BfiReportItem, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOpenness is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOpenness requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpenness: %w", err)
	}
	return oldValue.Openness, nil
}

// ResetOpenness resets all changes to the "openness" field.
func (m *BfiReportMutation) ResetOpenness() {
	m.openness = nil
}

// SetStudentID sets the "student" edge to the User entity by id.
func (m *BfiReportMutation) SetStudentID(id uuid.UUID) {
	m.student = &id
}

// ClearStudent clears the "student" edge to the User entity.
func (m *BfiReportMutation) ClearStudent() {
	m.clearedstudent = true
}

// StudentCleared reports if the "student" edge to the User entity was cleared.
func (m *BfiReportMutation) StudentCleared() bool {
	return m.clearedstudent
}

// StudentID returns the "student" edge ID in the mutation.
func (m *BfiReportMutation) StudentID() (id uuid.UUID, exists bool) {
	if m.student != nil {
		return *m.student, true
	}
	return
}

// StudentIDs returns the "student" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StudentID instead. It exists only for internal usage by the builders.
func (m *BfiReportMutation) StudentIDs() (ids []uuid.UUID) {
	if id := m.student; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudent resets all changes to the "student" edge.
func (m *BfiReportMutation) ResetStudent() {
	m.student = nil
	m.clearedstudent = false
}

// Where appends a list predicates to the BfiReportMutation builder.
func (m *BfiReportMutation) Where(ps ...predicate.BfiReport) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BfiReportMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BfiReportMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BfiReport, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BfiReportMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BfiReportMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BfiReport).
func (m *BfiReportMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BfiReportMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, bfireport.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bfireport.FieldUpdatedAt)
	}
	if m.conscientiousness != nil {
		fields = append(fields, bfireport.FieldConscientiousness)
	}
	if m.extraversion != nil {
		fields = append(fields, bfireport.FieldExtraversion)
	}
	if m.agreeableness != nil {
		fields = append(fields, bfireport.FieldAgreeableness)
	}
	if m.neuroticism != nil {
		fields = append(fields, bfireport.FieldNeuroticism)
	}
	if m.openness != nil {
		fields = append(fields, bfireport.FieldOpenness)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BfiReportMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bfireport.FieldCreatedAt:
		return m.CreatedAt()
	case bfireport.FieldUpdatedAt:
		return m.UpdatedAt()
	case bfireport.FieldConscientiousness:
		return m.Conscientiousness()
	case bfireport.FieldExtraversion:
		return m.Extraversion()
	case bfireport.FieldAgreeableness:
		return m.Agreeableness()
	case bfireport.FieldNeuroticism:
		return m.Neuroticism()
	case bfireport.FieldOpenness:
		return m.Openness()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BfiReportMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bfireport.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bfireport.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case bfireport.FieldConscientiousness:
		return m.OldConscientiousness(ctx)
	case bfireport.FieldExtraversion:
		return m.OldExtraversion(ctx)
	case bfireport.FieldAgreeableness:
		return m.OldAgreeableness(ctx)
	case bfireport.FieldNeuroticism:
		return m.OldNeuroticism(ctx)
	case bfireport.FieldOpenness:
		return m.OldOpenness(ctx)
	}
	return nil, fmt.Errorf("unknown BfiReport field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BfiReportMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bfireport.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bfireport.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case bfireport.FieldConscientiousness:
		v, ok := value.(schema.BfiReportItem)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConscientiousness(v)
		return nil
	case bfireport.FieldExtraversion:
		v, ok := value.(schema.BfiReportItem)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtraversion(v)
		return nil
	case bfireport.FieldAgreeableness:
		v, ok := value.(schema.BfiReportItem)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgreeableness(v)
		return nil
	case bfireport.FieldNeuroticism:
		v, ok := value.(schema.BfiReportItem)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNeuroticism(v)
		return nil
	case bfireport.FieldOpenness:
		v, ok := value.(schema.BfiReportItem)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpenness(v)
		return nil
	}
	return fmt.Errorf("unknown BfiReport field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BfiReportMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BfiReportMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BfiReportMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BfiReport numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BfiReportMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BfiReportMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BfiReportMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BfiReport nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BfiReportMutation) ResetField(name string) error {
	switch name {
	case bfireport.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bfireport.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case bfireport.FieldConscientiousness:
		m.ResetConscientiousness()
		return nil
	case bfireport.FieldExtraversion:
		m.ResetExtraversion()
		return nil
	case bfireport.FieldAgreeableness:
		m.ResetAgreeableness()
		return nil
	case bfireport.FieldNeuroticism:
		m.ResetNeuroticism()
		return nil
	case bfireport.FieldOpenness:
		m.ResetOpenness()
		return nil
	}
	return fmt.Errorf("unknown BfiReport field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BfiReportMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.student != nil {
		edges = append(edges, bfireport.EdgeStudent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BfiReportMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bfireport.EdgeStudent:
		if id := m.student; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BfiReportMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BfiReportMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BfiReportMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstudent {
		edges = append(edges, bfireport.EdgeStudent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BfiReportMutation) EdgeCleared(name string) bool {
	switch name {
	case bfireport.EdgeStudent:
		return m.clearedstudent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BfiReportMutation) ClearEdge(name string) error {
	switch name {
	case bfireport.EdgeStudent:
		m.ClearStudent()
		return nil
	}
	return fmt.Errorf("unknown BfiReport unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BfiReportMutation) ResetEdge(name string) error {
	switch name {
	case bfireport.EdgeStudent:
		m.ResetStudent()
		return nil
	}
	return fmt.Errorf("unknown BfiReport edge %s", name)
}

// CourseMutation represents an operation that mutates the Course nodes in the graph.
type CourseMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *time.Time
	updated_at        *time.Time
	name              *string
	code              *string
	colour            *string
	clearedFields     map[string]struct{}
	students          map[uuid.UUID]struct{}
	removedstudents   map[uuid.UUID]struct{}
	clearedstudents   bool
	groups            map[uuid.UUID]struct{}
	removedgroups     map[uuid.UUID]struct{}
	clearedgroups     bool
	group_runs        map[uuid.UUID]struct{}
	removedgroup_runs map[uuid.UUID]struct{}
	clearedgroup_runs bool
	done              bool
	oldValue          func(context.Context) (*Course, error)
	predicates        []predicate.Course
}

var _ ent.Mutation = (*CourseMutation)(nil)

// courseOption allows management of the mutation configuration using functional options.
type courseOption func(*CourseMutation)

// newCourseMutation creates new mutation for the Course entity.
func newCourseMutation(c config, op Op, opts ...courseOption) *CourseMutation {
	m := &CourseMutation{
		config:        c,
		op:            op,
		typ:           TypeCourse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCourseID sets the ID field of the mutation.
func withCourseID(id uuid.UUID) courseOption {
	return func(m *CourseMutation) {
		var (
			err   error
			once  sync.Once
			value *Course
		)
		m.oldValue = func(ctx context.Context) (*Course, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Course.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCourse sets the old Course of the mutation.
func withCourse(node *Course) courseOption {
	return func(m *CourseMutation) {
		m.oldValue = func(context.Context) (*Course, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CourseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CourseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Course entities.
func (m *CourseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CourseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CourseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Course.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CourseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CourseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CourseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CourseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CourseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CourseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *CourseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CourseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CourseMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *CourseMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *CourseMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *CourseMutation) ResetCode() {
	m.code = nil
}

// SetColour sets the "colour" field.
func (m *CourseMutation) SetColour(s string) {
	m.colour = &s
}

// Colour returns the value of the "colour" field in the mutation.
func (m *CourseMutation) Colour() (r string, exists bool) {
	v := m.colour
	if v == nil {
		return
	}
	return *v, true
}

// OldColour returns the old "colour" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldColour(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColour is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColour requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColour: %w", err)
	}
	return oldValue.Colour, nil
}

// ResetColour resets all changes to the "colour" field.
func (m *CourseMutation) ResetColour() {
	m.colour = nil
}

// AddStudentIDs adds the "students" edge to the User entity by ids.
func (m *CourseMutation) AddStudentIDs(ids ...uuid.UUID) {
	if m.students == nil {
		m.students = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.students[ids[i]] = struct{}{}
	}
}

// ClearStudents clears the "students" edge to the User entity.
func (m *CourseMutation) ClearStudents() {
	m.clearedstudents = true
}

// StudentsCleared reports if the "students" edge to the User entity was cleared.
func (m *CourseMutation) StudentsCleared() bool {
	return m.clearedstudents
}

// RemoveStudentIDs removes the "students" edge to the User entity by IDs.
func (m *CourseMutation) RemoveStudentIDs(ids ...uuid.UUID) {
	if m.removedstudents == nil {
		m.removedstudents = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.students, ids[i])
		m.removedstudents[ids[i]] = struct{}{}
	}
}

// RemovedStudents returns the removed IDs of the "students" edge to the User entity.
func (m *CourseMutation) RemovedStudentsIDs() (ids []uuid.UUID) {
	for id := range m.removedstudents {
		ids = append(ids, id)
	}
	return
}

// StudentsIDs returns the "students" edge IDs in the mutation.
func (m *CourseMutation) StudentsIDs() (ids []uuid.UUID) {
	for id := range m.students {
		ids = append(ids, id)
	}
	return
}

// ResetStudents resets all changes to the "students" edge.
func (m *CourseMutation) ResetStudents() {
	m.students = nil
	m.clearedstudents = false
	m.removedstudents = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *CourseMutation) AddGroupIDs(ids ...uuid.UUID) {
	if m.groups == nil {
		m.groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *CourseMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *CourseMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *CourseMutation) RemoveGroupIDs(ids ...uuid.UUID) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *CourseMutation) RemovedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *CourseMutation) GroupsIDs() (ids []uuid.UUID) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *CourseMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// AddGroupRunIDs adds the "group_runs" edge to the GroupRun entity by ids.
func (m *CourseMutation) AddGroupRunIDs(ids ...uuid.UUID) {
	if m.group_runs == nil {
		m.group_runs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.group_runs[ids[i]] = struct{}{}
	}
}

// ClearGroupRuns clears the "group_runs" edge to the GroupRun entity.
func (m *CourseMutation) ClearGroupRuns() {
	m.clearedgroup_runs = true
}

// GroupRunsCleared reports if the "group_runs" edge to the GroupRun entity was cleared.
func (m *CourseMutation) GroupRunsCleared() bool {
	return m.clearedgroup_runs
}

// RemoveGroupRunIDs removes the "group_runs" edge to the GroupRun entity by IDs.
func (m *CourseMutation) RemoveGroupRunIDs(ids ...uuid.UUID) {
	if m.removedgroup_runs == nil {
		m.removedgroup_runs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.group_runs, ids[i])
		m.removedgroup_runs[ids[i]] = struct{}{}
	}
}

// RemovedGroupRuns returns the removed IDs of the "group_runs" edge to the GroupRun entity.
func (m *CourseMutation) RemovedGroupRunsIDs() (ids []uuid.UUID) {
	for id := range m.removedgroup_runs {
		ids = append(ids, id)
	}
	return
}

// GroupRunsIDs returns the "group_runs" edge IDs in the mutation.
func (m *CourseMutation) GroupRunsIDs() (ids []uuid.UUID) {
	for id := range m.group_runs {
		ids = append(ids, id)
	}
	return
}

// ResetGroupRuns resets all changes to the "group_runs" edge.
func (m *CourseMutation) ResetGroupRuns() {
	m.group_runs = nil
	m.clearedgroup_runs = false
	m.removedgroup_runs = nil
}

// Where appends a list predicates to the CourseMutation builder.
func (m *CourseMutation) Where(ps ...predicate.Course) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CourseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CourseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Course, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CourseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CourseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Course).
func (m *CourseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CourseMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, course.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, course.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, course.FieldName)
	}
	if m.code != nil {
		fields = append(fields, course.FieldCode)
	}
	if m.colour != nil {
		fields = append(fields, course.FieldColour)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CourseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case course.FieldCreatedAt:
		return m.CreatedAt()
	case course.FieldUpdatedAt:
		return m.UpdatedAt()
	case course.FieldName:
		return m.Name()
	case course.FieldCode:
		return m.Code()
	case course.FieldColour:
		return m.Colour()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CourseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case course.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case course.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case course.FieldName:
		return m.OldName(ctx)
	case course.FieldCode:
		return m.OldCode(ctx)
	case course.FieldColour:
		return m.OldColour(ctx)
	}
	return nil, fmt.Errorf("unknown Course field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case course.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case course.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case course.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case course.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case course.FieldColour:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColour(v)
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CourseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CourseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Course numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CourseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CourseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CourseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Course nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CourseMutation) ResetField(name string) error {
	switch name {
	case course.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case course.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case course.FieldName:
		m.ResetName()
		return nil
	case course.FieldCode:
		m.ResetCode()
		return nil
	case course.FieldColour:
		m.ResetColour()
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CourseMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.students != nil {
		edges = append(edges, course.EdgeStudents)
	}
	if m.groups != nil {
		edges = append(edges, course.EdgeGroups)
	}
	if m.group_runs != nil {
		edges = append(edges, course.EdgeGroupRuns)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CourseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeStudents:
		ids := make([]ent.Value, 0, len(m.students))
		for id := range m.students {
			ids = append(ids, id)
		}
		return ids
	case course.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case course.EdgeGroupRuns:
		ids := make([]ent.Value, 0, len(m.group_runs))
		for id := range m.group_runs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CourseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedstudents != nil {
		edges = append(edges, course.EdgeStudents)
	}
	if m.removedgroups != nil {
		edges = append(edges, course.EdgeGroups)
	}
	if m.removedgroup_runs != nil {
		edges = append(edges, course.EdgeGroupRuns)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CourseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeStudents:
		ids := make([]ent.Value, 0, len(m.removedstudents))
		for id := range m.removedstudents {
			ids = append(ids, id)
		}
		return ids
	case course.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	case course.EdgeGroupRuns:
		ids := make([]ent.Value, 0, len(m.removedgroup_runs))
		for id := range m.removedgroup_runs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CourseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedstudents {
		edges = append(edges, course.EdgeStudents)
	}
	if m.clearedgroups {
		edges = append(edges, course.EdgeGroups)
	}
	if m.clearedgroup_runs {
		edges = append(edges, course.EdgeGroupRuns)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CourseMutation) EdgeCleared(name string) bool {
	switch name {
	case course.EdgeStudents:
		return m.clearedstudents
	case course.EdgeGroups:
		return m.clearedgroups
	case course.EdgeGroupRuns:
		return m.clearedgroup_runs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CourseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Course unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CourseMutation) ResetEdge(name string) error {
	switch name {
	case course.EdgeStudents:
		m.ResetStudents()
		return nil
	case course.EdgeGroups:
		m.ResetGroups()
		return nil
	case course.EdgeGroupRuns:
		m.ResetGroupRuns()
		return nil
	}
	return fmt.Errorf("unknown Course edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	created_at       *time.Time
	updated_at       *time.Time
	name             *string
	clearedFields    map[string]struct{}
	students         map[uuid.UUID]struct{}
	removedstudents  map[uuid.UUID]struct{}
	clearedstudents  bool
	course           *uuid.UUID
	clearedcourse    bool
	group_run        *uuid.UUID
	clearedgroup_run bool
	done             bool
	oldValue         func(context.Context) (*Group, error)
	predicates       []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id uuid.UUID) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// AddStudentIDs adds the "students" edge to the User entity by ids.
func (m *GroupMutation) AddStudentIDs(ids ...uuid.UUID) {
	if m.students == nil {
		m.students = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.students[ids[i]] = struct{}{}
	}
}

// ClearStudents clears the "students" edge to the User entity.
func (m *GroupMutation) ClearStudents() {
	m.clearedstudents = true
}

// StudentsCleared reports if the "students" edge to the User entity was cleared.
func (m *GroupMutation) StudentsCleared() bool {
	return m.clearedstudents
}

// RemoveStudentIDs removes the "students" edge to the User entity by IDs.
func (m *GroupMutation) RemoveStudentIDs(ids ...uuid.UUID) {
	if m.removedstudents == nil {
		m.removedstudents = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.students, ids[i])
		m.removedstudents[ids[i]] = struct{}{}
	}
}

// RemovedStudents returns the removed IDs of the "students" edge to the User entity.
func (m *GroupMutation) RemovedStudentsIDs() (ids []uuid.UUID) {
	for id := range m.removedstudents {
		ids = append(ids, id)
	}
	return
}

// StudentsIDs returns the "students" edge IDs in the mutation.
func (m *GroupMutation) StudentsIDs() (ids []uuid.UUID) {
	for id := range m.students {
		ids = append(ids, id)
	}
	return
}

// ResetStudents resets all changes to the "students" edge.
func (m *GroupMutation) ResetStudents() {
	m.students = nil
	m.clearedstudents = false
	m.removedstudents = nil
}

// SetCourseID sets the "course" edge to the Course entity by id.
func (m *GroupMutation) SetCourseID(id uuid.UUID) {
	m.course = &id
}

// ClearCourse clears the "course" edge to the Course entity.
func (m *GroupMutation) ClearCourse() {
	m.clearedcourse = true
}

// CourseCleared reports if the "course" edge to the Course entity was cleared.
func (m *GroupMutation) CourseCleared() bool {
	return m.clearedcourse
}

// CourseID returns the "course" edge ID in the mutation.
func (m *GroupMutation) CourseID() (id uuid.UUID, exists bool) {
	if m.course != nil {
		return *m.course, true
	}
	return
}

// CourseIDs returns the "course" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CourseID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) CourseIDs() (ids []uuid.UUID) {
	if id := m.course; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCourse resets all changes to the "course" edge.
func (m *GroupMutation) ResetCourse() {
	m.course = nil
	m.clearedcourse = false
}

// SetGroupRunID sets the "group_run" edge to the GroupRun entity by id.
func (m *GroupMutation) SetGroupRunID(id uuid.UUID) {
	m.group_run = &id
}

// ClearGroupRun clears the "group_run" edge to the GroupRun entity.
func (m *GroupMutation) ClearGroupRun() {
	m.clearedgroup_run = true
}

// GroupRunCleared reports if the "group_run" edge to the GroupRun entity was cleared.
func (m *GroupMutation) GroupRunCleared() bool {
	return m.clearedgroup_run
}

// GroupRunID returns the "group_run" edge ID in the mutation.
func (m *GroupMutation) GroupRunID() (id uuid.UUID, exists bool) {
	if m.group_run != nil {
		return *m.group_run, true
	}
	return
}

// GroupRunIDs returns the "group_run" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupRunID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) GroupRunIDs() (ids []uuid.UUID) {
	if id := m.group_run; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroupRun resets all changes to the "group_run" edge.
func (m *GroupMutation) ResetGroupRun() {
	m.group_run = nil
	m.clearedgroup_run = false
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, group.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, group.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldCreatedAt:
		return m.CreatedAt()
	case group.FieldUpdatedAt:
		return m.UpdatedAt()
	case group.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case group.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case group.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case group.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case group.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case group.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.students != nil {
		edges = append(edges, group.EdgeStudents)
	}
	if m.course != nil {
		edges = append(edges, group.EdgeCourse)
	}
	if m.group_run != nil {
		edges = append(edges, group.EdgeGroupRun)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeStudents:
		ids := make([]ent.Value, 0, len(m.students))
		for id := range m.students {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeCourse:
		if id := m.course; id != nil {
			return []ent.Value{*id}
		}
	case group.EdgeGroupRun:
		if id := m.group_run; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedstudents != nil {
		edges = append(edges, group.EdgeStudents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeStudents:
		ids := make([]ent.Value, 0, len(m.removedstudents))
		for id := range m.removedstudents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedstudents {
		edges = append(edges, group.EdgeStudents)
	}
	if m.clearedcourse {
		edges = append(edges, group.EdgeCourse)
	}
	if m.clearedgroup_run {
		edges = append(edges, group.EdgeGroupRun)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeStudents:
		return m.clearedstudents
	case group.EdgeCourse:
		return m.clearedcourse
	case group.EdgeGroupRun:
		return m.clearedgroup_run
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeCourse:
		m.ClearCourse()
		return nil
	case group.EdgeGroupRun:
		m.ClearGroupRun()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeStudents:
		m.ResetStudents()
		return nil
	case group.EdgeCourse:
		m.ResetCourse()
		return nil
	case group.EdgeGroupRun:
		m.ResetGroupRun()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// GroupRunMutation represents an operation that mutates the GroupRun nodes in the graph.
type GroupRunMutation struct {
	config
	op                            Op
	typ                           string
	id                            *uuid.UUID
	created_at                    *time.Time
	updated_at                    *time.Time
	group_size                    *[]int
	appendgroup_size              []int
	best_score_history            *[]float64
	appendbest_score_history      []float64
	candidate_score_history       *[]float64
	appendcandidate_score_history []float64
	clearedFields                 map[string]struct{}
	created_by                    *uuid.UUID
	clearedcreated_by             bool
	groups                        map[uuid.UUID]struct{}
	removedgroups                 map[uuid.UUID]struct{}
	clearedgroups                 bool
	course                        *uuid.UUID
	clearedcourse                 bool
	done                          bool
	oldValue                      func(context.Context) (*GroupRun, error)
	predicates                    []predicate.GroupRun
}

var _ ent.Mutation = (*GroupRunMutation)(nil)

// grouprunOption allows management of the mutation configuration using functional options.
type grouprunOption func(*GroupRunMutation)

// newGroupRunMutation creates new mutation for the GroupRun entity.
func newGroupRunMutation(c config, op Op, opts ...grouprunOption) *GroupRunMutation {
	m := &GroupRunMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupRun,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupRunID sets the ID field of the mutation.
func withGroupRunID(id uuid.UUID) grouprunOption {
	return func(m *GroupRunMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupRun
		)
		m.oldValue = func(ctx context.Context) (*GroupRun, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupRun.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupRun sets the old GroupRun of the mutation.
func withGroupRun(node *GroupRun) grouprunOption {
	return func(m *GroupRunMutation) {
		m.oldValue = func(context.Context) (*GroupRun, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupRunMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupRunMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GroupRun entities.
func (m *GroupRunMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupRunMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupRunMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupRun.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupRunMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupRunMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GroupRun entity.
// If the GroupRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRunMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupRunMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupRunMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupRunMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GroupRun entity.
// If the GroupRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRunMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupRunMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetGroupSize sets the "group_size" field.
func (m *GroupRunMutation) SetGroupSize(i []int) {
	m.group_size = &i
	m.appendgroup_size = nil
}

// GroupSize returns the value of the "group_size" field in the mutation.
func (m *GroupRunMutation) GroupSize() (r []int, exists bool) {
	v := m.group_size
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupSize returns the old "group_size" field's value of the GroupRun entity.
// If the GroupRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRunMutation) OldGroupSize(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupSize: %w", err)
	}
	return oldValue.GroupSize, nil
}

// AppendGroupSize adds i to the "group_size" field.
func (m *GroupRunMutation) AppendGroupSize(i []int) {
	m.appendgroup_size = append(m.appendgroup_size, i...)
}

// AppendedGroupSize returns the list of values that were appended to the "group_size" field in this mutation.
func (m *GroupRunMutation) AppendedGroupSize() ([]int, bool) {
	if len(m.appendgroup_size) == 0 {
		return nil, false
	}
	return m.appendgroup_size, true
}

// ResetGroupSize resets all changes to the "group_size" field.
func (m *GroupRunMutation) ResetGroupSize() {
	m.group_size = nil
	m.appendgroup_size = nil
}

// SetBestScoreHistory sets the "best_score_history" field.
func (m *GroupRunMutation) SetBestScoreHistory(f []float64) {
	m.best_score_history = &f
	m.appendbest_score_history = nil
}

// BestScoreHistory returns the value of the "best_score_history" field in the mutation.
func (m *GroupRunMutation) BestScoreHistory() (r []float64, exists bool) {
	v := m.best_score_history
	if v == nil {
		return
	}
	return *v, true
}

// OldBestScoreHistory returns the old "best_score_history" field's value of the GroupRun entity.
// If the GroupRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRunMutation) OldBestScoreHistory(ctx context.Context) (v []float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBestScoreHistory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBestScoreHistory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBestScoreHistory: %w", err)
	}
	return oldValue.BestScoreHistory, nil
}

// AppendBestScoreHistory adds f to the "best_score_history" field.
func (m *GroupRunMutation) AppendBestScoreHistory(f []float64) {
	m.appendbest_score_history = append(m.appendbest_score_history, f...)
}

// AppendedBestScoreHistory returns the list of values that were appended to the "best_score_history" field in this mutation.
func (m *GroupRunMutation) AppendedBestScoreHistory() ([]float64, bool) {
	if len(m.appendbest_score_history) == 0 {
		return nil, false
	}
	return m.appendbest_score_history, true
}

// ResetBestScoreHistory resets all changes to the "best_score_history" field.
func (m *GroupRunMutation) ResetBestScoreHistory() {
	m.best_score_history = nil
	m.appendbest_score_history = nil
}

// SetCandidateScoreHistory sets the "candidate_score_history" field.
func (m *GroupRunMutation) SetCandidateScoreHistory(f []float64) {
	m.candidate_score_history = &f
	m.appendcandidate_score_history = nil
}

// CandidateScoreHistory returns the value of the "candidate_score_history" field in the mutation.
func (m *GroupRunMutation) CandidateScoreHistory() (r []float64, exists bool) {
	v := m.candidate_score_history
	if v == nil {
		return
	}
	return *v, true
}

// OldCandidateScoreHistory returns the old "candidate_score_history" field's value of the GroupRun entity.
// If the GroupRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRunMutation) OldCandidateScoreHistory(ctx context.Context) (v []float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCandidateScoreHistory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCandidateScoreHistory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCandidateScoreHistory: %w", err)
	}
	return oldValue.CandidateScoreHistory, nil
}

// AppendCandidateScoreHistory adds f to the "candidate_score_history" field.
func (m *GroupRunMutation) AppendCandidateScoreHistory(f []float64) {
	m.appendcandidate_score_history = append(m.appendcandidate_score_history, f...)
}

// AppendedCandidateScoreHistory returns the list of values that were appended to the "candidate_score_history" field in this mutation.
func (m *GroupRunMutation) AppendedCandidateScoreHistory() ([]float64, bool) {
	if len(m.appendcandidate_score_history) == 0 {
		return nil, false
	}
	return m.appendcandidate_score_history, true
}

// ResetCandidateScoreHistory resets all changes to the "candidate_score_history" field.
func (m *GroupRunMutation) ResetCandidateScoreHistory() {
	m.candidate_score_history = nil
	m.appendcandidate_score_history = nil
}

// SetCreatedByID sets the "created_by" edge to the User entity by id.
func (m *GroupRunMutation) SetCreatedByID(id uuid.UUID) {
	m.created_by = &id
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (m *GroupRunMutation) ClearCreatedBy() {
	m.clearedcreated_by = true
}

// CreatedByCleared reports if the "created_by" edge to the User entity was cleared.
func (m *GroupRunMutation) CreatedByCleared() bool {
	return m.clearedcreated_by
}

// CreatedByID returns the "created_by" edge ID in the mutation.
func (m *GroupRunMutation) CreatedByID() (id uuid.UUID, exists bool) {
	if m.created_by != nil {
		return *m.created_by, true
	}
	return
}

// CreatedByIDs returns the "created_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatedByID instead. It exists only for internal usage by the builders.
func (m *GroupRunMutation) CreatedByIDs() (ids []uuid.UUID) {
	if id := m.created_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreatedBy resets all changes to the "created_by" edge.
func (m *GroupRunMutation) ResetCreatedBy() {
	m.created_by = nil
	m.clearedcreated_by = false
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *GroupRunMutation) AddGroupIDs(ids ...uuid.UUID) {
	if m.groups == nil {
		m.groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *GroupRunMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *GroupRunMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *GroupRunMutation) RemoveGroupIDs(ids ...uuid.UUID) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *GroupRunMutation) RemovedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *GroupRunMutation) GroupsIDs() (ids []uuid.UUID) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *GroupRunMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// SetCourseID sets the "course" edge to the Course entity by id.
func (m *GroupRunMutation) SetCourseID(id uuid.UUID) {
	m.course = &id
}

// ClearCourse clears the "course" edge to the Course entity.
func (m *GroupRunMutation) ClearCourse() {
	m.clearedcourse = true
}

// CourseCleared reports if the "course" edge to the Course entity was cleared.
func (m *GroupRunMutation) CourseCleared() bool {
	return m.clearedcourse
}

// CourseID returns the "course" edge ID in the mutation.
func (m *GroupRunMutation) CourseID() (id uuid.UUID, exists bool) {
	if m.course != nil {
		return *m.course, true
	}
	return
}

// CourseIDs returns the "course" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CourseID instead. It exists only for internal usage by the builders.
func (m *GroupRunMutation) CourseIDs() (ids []uuid.UUID) {
	if id := m.course; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCourse resets all changes to the "course" edge.
func (m *GroupRunMutation) ResetCourse() {
	m.course = nil
	m.clearedcourse = false
}

// Where appends a list predicates to the GroupRunMutation builder.
func (m *GroupRunMutation) Where(ps ...predicate.GroupRun) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupRunMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupRunMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupRun, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupRunMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupRunMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupRun).
func (m *GroupRunMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupRunMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, grouprun.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, grouprun.FieldUpdatedAt)
	}
	if m.group_size != nil {
		fields = append(fields, grouprun.FieldGroupSize)
	}
	if m.best_score_history != nil {
		fields = append(fields, grouprun.FieldBestScoreHistory)
	}
	if m.candidate_score_history != nil {
		fields = append(fields, grouprun.FieldCandidateScoreHistory)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupRunMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case grouprun.FieldCreatedAt:
		return m.CreatedAt()
	case grouprun.FieldUpdatedAt:
		return m.UpdatedAt()
	case grouprun.FieldGroupSize:
		return m.GroupSize()
	case grouprun.FieldBestScoreHistory:
		return m.BestScoreHistory()
	case grouprun.FieldCandidateScoreHistory:
		return m.CandidateScoreHistory()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupRunMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case grouprun.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case grouprun.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case grouprun.FieldGroupSize:
		return m.OldGroupSize(ctx)
	case grouprun.FieldBestScoreHistory:
		return m.OldBestScoreHistory(ctx)
	case grouprun.FieldCandidateScoreHistory:
		return m.OldCandidateScoreHistory(ctx)
	}
	return nil, fmt.Errorf("unknown GroupRun field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupRunMutation) SetField(name string, value ent.Value) error {
	switch name {
	case grouprun.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case grouprun.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case grouprun.FieldGroupSize:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupSize(v)
		return nil
	case grouprun.FieldBestScoreHistory:
		v, ok := value.([]float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBestScoreHistory(v)
		return nil
	case grouprun.FieldCandidateScoreHistory:
		v, ok := value.([]float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCandidateScoreHistory(v)
		return nil
	}
	return fmt.Errorf("unknown GroupRun field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupRunMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupRunMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupRunMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupRun numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupRunMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupRunMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupRunMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GroupRun nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupRunMutation) ResetField(name string) error {
	switch name {
	case grouprun.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case grouprun.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case grouprun.FieldGroupSize:
		m.ResetGroupSize()
		return nil
	case grouprun.FieldBestScoreHistory:
		m.ResetBestScoreHistory()
		return nil
	case grouprun.FieldCandidateScoreHistory:
		m.ResetCandidateScoreHistory()
		return nil
	}
	return fmt.Errorf("unknown GroupRun field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupRunMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.created_by != nil {
		edges = append(edges, grouprun.EdgeCreatedBy)
	}
	if m.groups != nil {
		edges = append(edges, grouprun.EdgeGroups)
	}
	if m.course != nil {
		edges = append(edges, grouprun.EdgeCourse)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupRunMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case grouprun.EdgeCreatedBy:
		if id := m.created_by; id != nil {
			return []ent.Value{*id}
		}
	case grouprun.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case grouprun.EdgeCourse:
		if id := m.course; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupRunMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedgroups != nil {
		edges = append(edges, grouprun.EdgeGroups)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupRunMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case grouprun.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupRunMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcreated_by {
		edges = append(edges, grouprun.EdgeCreatedBy)
	}
	if m.clearedgroups {
		edges = append(edges, grouprun.EdgeGroups)
	}
	if m.clearedcourse {
		edges = append(edges, grouprun.EdgeCourse)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupRunMutation) EdgeCleared(name string) bool {
	switch name {
	case grouprun.EdgeCreatedBy:
		return m.clearedcreated_by
	case grouprun.EdgeGroups:
		return m.clearedgroups
	case grouprun.EdgeCourse:
		return m.clearedcourse
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupRunMutation) ClearEdge(name string) error {
	switch name {
	case grouprun.EdgeCreatedBy:
		m.ClearCreatedBy()
		return nil
	case grouprun.EdgeCourse:
		m.ClearCourse()
		return nil
	}
	return fmt.Errorf("unknown GroupRun unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupRunMutation) ResetEdge(name string) error {
	switch name {
	case grouprun.EdgeCreatedBy:
		m.ResetCreatedBy()
		return nil
	case grouprun.EdgeGroups:
		m.ResetGroups()
		return nil
	case grouprun.EdgeCourse:
		m.ResetCourse()
		return nil
	}
	return fmt.Errorf("unknown GroupRun edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created_at         *time.Time
	updated_at         *time.Time
	github_username    *string
	univeresity_id     *string
	role               *user.Role
	clearedFields      map[string]struct{}
	courses            map[uuid.UUID]struct{}
	removedcourses     map[uuid.UUID]struct{}
	clearedcourses     bool
	bfi_report         *uuid.UUID
	clearedbfi_report  bool
	bfi_answers        map[uuid.UUID]struct{}
	removedbfi_answers map[uuid.UUID]struct{}
	clearedbfi_answers bool
	groups             map[uuid.UUID]struct{}
	removedgroups      map[uuid.UUID]struct{}
	clearedgroups      bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetGithubUsername sets the "github_username" field.
func (m *UserMutation) SetGithubUsername(s string) {
	m.github_username = &s
}

// GithubUsername returns the value of the "github_username" field in the mutation.
func (m *UserMutation) GithubUsername() (r string, exists bool) {
	v := m.github_username
	if v == nil {
		return
	}
	return *v, true
}

// OldGithubUsername returns the old "github_username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGithubUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGithubUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGithubUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGithubUsername: %w", err)
	}
	return oldValue.GithubUsername, nil
}

// ResetGithubUsername resets all changes to the "github_username" field.
func (m *UserMutation) ResetGithubUsername() {
	m.github_username = nil
}

// SetUniveresityID sets the "univeresity_id" field.
func (m *UserMutation) SetUniveresityID(s string) {
	m.univeresity_id = &s
}

// UniveresityID returns the value of the "univeresity_id" field in the mutation.
func (m *UserMutation) UniveresityID() (r string, exists bool) {
	v := m.univeresity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUniveresityID returns the old "univeresity_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUniveresityID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUniveresityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUniveresityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUniveresityID: %w", err)
	}
	return oldValue.UniveresityID, nil
}

// ClearUniveresityID clears the value of the "univeresity_id" field.
func (m *UserMutation) ClearUniveresityID() {
	m.univeresity_id = nil
	m.clearedFields[user.FieldUniveresityID] = struct{}{}
}

// UniveresityIDCleared returns if the "univeresity_id" field was cleared in this mutation.
func (m *UserMutation) UniveresityIDCleared() bool {
	_, ok := m.clearedFields[user.FieldUniveresityID]
	return ok
}

// ResetUniveresityID resets all changes to the "univeresity_id" field.
func (m *UserMutation) ResetUniveresityID() {
	m.univeresity_id = nil
	delete(m.clearedFields, user.FieldUniveresityID)
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// AddCourseIDs adds the "courses" edge to the Course entity by ids.
func (m *UserMutation) AddCourseIDs(ids ...uuid.UUID) {
	if m.courses == nil {
		m.courses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.courses[ids[i]] = struct{}{}
	}
}

// ClearCourses clears the "courses" edge to the Course entity.
func (m *UserMutation) ClearCourses() {
	m.clearedcourses = true
}

// CoursesCleared reports if the "courses" edge to the Course entity was cleared.
func (m *UserMutation) CoursesCleared() bool {
	return m.clearedcourses
}

// RemoveCourseIDs removes the "courses" edge to the Course entity by IDs.
func (m *UserMutation) RemoveCourseIDs(ids ...uuid.UUID) {
	if m.removedcourses == nil {
		m.removedcourses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.courses, ids[i])
		m.removedcourses[ids[i]] = struct{}{}
	}
}

// RemovedCourses returns the removed IDs of the "courses" edge to the Course entity.
func (m *UserMutation) RemovedCoursesIDs() (ids []uuid.UUID) {
	for id := range m.removedcourses {
		ids = append(ids, id)
	}
	return
}

// CoursesIDs returns the "courses" edge IDs in the mutation.
func (m *UserMutation) CoursesIDs() (ids []uuid.UUID) {
	for id := range m.courses {
		ids = append(ids, id)
	}
	return
}

// ResetCourses resets all changes to the "courses" edge.
func (m *UserMutation) ResetCourses() {
	m.courses = nil
	m.clearedcourses = false
	m.removedcourses = nil
}

// SetBfiReportID sets the "bfi_report" edge to the BfiReport entity by id.
func (m *UserMutation) SetBfiReportID(id uuid.UUID) {
	m.bfi_report = &id
}

// ClearBfiReport clears the "bfi_report" edge to the BfiReport entity.
func (m *UserMutation) ClearBfiReport() {
	m.clearedbfi_report = true
}

// BfiReportCleared reports if the "bfi_report" edge to the BfiReport entity was cleared.
func (m *UserMutation) BfiReportCleared() bool {
	return m.clearedbfi_report
}

// BfiReportID returns the "bfi_report" edge ID in the mutation.
func (m *UserMutation) BfiReportID() (id uuid.UUID, exists bool) {
	if m.bfi_report != nil {
		return *m.bfi_report, true
	}
	return
}

// BfiReportIDs returns the "bfi_report" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BfiReportID instead. It exists only for internal usage by the builders.
func (m *UserMutation) BfiReportIDs() (ids []uuid.UUID) {
	if id := m.bfi_report; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBfiReport resets all changes to the "bfi_report" edge.
func (m *UserMutation) ResetBfiReport() {
	m.bfi_report = nil
	m.clearedbfi_report = false
}

// AddBfiAnswerIDs adds the "bfi_answers" edge to the BfiAnswer entity by ids.
func (m *UserMutation) AddBfiAnswerIDs(ids ...uuid.UUID) {
	if m.bfi_answers == nil {
		m.bfi_answers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.bfi_answers[ids[i]] = struct{}{}
	}
}

// ClearBfiAnswers clears the "bfi_answers" edge to the BfiAnswer entity.
func (m *UserMutation) ClearBfiAnswers() {
	m.clearedbfi_answers = true
}

// BfiAnswersCleared reports if the "bfi_answers" edge to the BfiAnswer entity was cleared.
func (m *UserMutation) BfiAnswersCleared() bool {
	return m.clearedbfi_answers
}

// RemoveBfiAnswerIDs removes the "bfi_answers" edge to the BfiAnswer entity by IDs.
func (m *UserMutation) RemoveBfiAnswerIDs(ids ...uuid.UUID) {
	if m.removedbfi_answers == nil {
		m.removedbfi_answers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.bfi_answers, ids[i])
		m.removedbfi_answers[ids[i]] = struct{}{}
	}
}

// RemovedBfiAnswers returns the removed IDs of the "bfi_answers" edge to the BfiAnswer entity.
func (m *UserMutation) RemovedBfiAnswersIDs() (ids []uuid.UUID) {
	for id := range m.removedbfi_answers {
		ids = append(ids, id)
	}
	return
}

// BfiAnswersIDs returns the "bfi_answers" edge IDs in the mutation.
func (m *UserMutation) BfiAnswersIDs() (ids []uuid.UUID) {
	for id := range m.bfi_answers {
		ids = append(ids, id)
	}
	return
}

// ResetBfiAnswers resets all changes to the "bfi_answers" edge.
func (m *UserMutation) ResetBfiAnswers() {
	m.bfi_answers = nil
	m.clearedbfi_answers = false
	m.removedbfi_answers = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *UserMutation) AddGroupIDs(ids ...uuid.UUID) {
	if m.groups == nil {
		m.groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *UserMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *UserMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveGroupIDs(ids ...uuid.UUID) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *UserMutation) RemovedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *UserMutation) GroupsIDs() (ids []uuid.UUID) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *UserMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.github_username != nil {
		fields = append(fields, user.FieldGithubUsername)
	}
	if m.univeresity_id != nil {
		fields = append(fields, user.FieldUniveresityID)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldGithubUsername:
		return m.GithubUsername()
	case user.FieldUniveresityID:
		return m.UniveresityID()
	case user.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldGithubUsername:
		return m.OldGithubUsername(ctx)
	case user.FieldUniveresityID:
		return m.OldUniveresityID(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldGithubUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGithubUsername(v)
		return nil
	case user.FieldUniveresityID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUniveresityID(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldUniveresityID) {
		fields = append(fields, user.FieldUniveresityID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldUniveresityID:
		m.ClearUniveresityID()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldGithubUsername:
		m.ResetGithubUsername()
		return nil
	case user.FieldUniveresityID:
		m.ResetUniveresityID()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.courses != nil {
		edges = append(edges, user.EdgeCourses)
	}
	if m.bfi_report != nil {
		edges = append(edges, user.EdgeBfiReport)
	}
	if m.bfi_answers != nil {
		edges = append(edges, user.EdgeBfiAnswers)
	}
	if m.groups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCourses:
		ids := make([]ent.Value, 0, len(m.courses))
		for id := range m.courses {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBfiReport:
		if id := m.bfi_report; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeBfiAnswers:
		ids := make([]ent.Value, 0, len(m.bfi_answers))
		for id := range m.bfi_answers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedcourses != nil {
		edges = append(edges, user.EdgeCourses)
	}
	if m.removedbfi_answers != nil {
		edges = append(edges, user.EdgeBfiAnswers)
	}
	if m.removedgroups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCourses:
		ids := make([]ent.Value, 0, len(m.removedcourses))
		for id := range m.removedcourses {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBfiAnswers:
		ids := make([]ent.Value, 0, len(m.removedbfi_answers))
		for id := range m.removedbfi_answers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedcourses {
		edges = append(edges, user.EdgeCourses)
	}
	if m.clearedbfi_report {
		edges = append(edges, user.EdgeBfiReport)
	}
	if m.clearedbfi_answers {
		edges = append(edges, user.EdgeBfiAnswers)
	}
	if m.clearedgroups {
		edges = append(edges, user.EdgeGroups)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCourses:
		return m.clearedcourses
	case user.EdgeBfiReport:
		return m.clearedbfi_report
	case user.EdgeBfiAnswers:
		return m.clearedbfi_answers
	case user.EdgeGroups:
		return m.clearedgroups
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeBfiReport:
		m.ClearBfiReport()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCourses:
		m.ResetCourses()
		return nil
	case user.EdgeBfiReport:
		m.ResetBfiReport()
		return nil
	case user.EdgeBfiAnswers:
		m.ResetBfiAnswers()
		return nil
	case user.EdgeGroups:
		m.ResetGroups()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
