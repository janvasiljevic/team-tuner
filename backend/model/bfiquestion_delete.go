// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"jv/team-tone-tuner/model/bfiquestion"
	"jv/team-tone-tuner/model/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BfiQuestionDelete is the builder for deleting a BfiQuestion entity.
type BfiQuestionDelete struct {
	config
	hooks    []Hook
	mutation *BfiQuestionMutation
}

// Where appends a list predicates to the BfiQuestionDelete builder.
func (bqd *BfiQuestionDelete) Where(ps ...predicate.BfiQuestion) *BfiQuestionDelete {
	bqd.mutation.Where(ps...)
	return bqd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bqd *BfiQuestionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bqd.sqlExec, bqd.mutation, bqd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bqd *BfiQuestionDelete) ExecX(ctx context.Context) int {
	n, err := bqd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bqd *BfiQuestionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(bfiquestion.Table, sqlgraph.NewFieldSpec(bfiquestion.FieldID, field.TypeUUID))
	if ps := bqd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bqd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bqd.mutation.done = true
	return affected, err
}

// BfiQuestionDeleteOne is the builder for deleting a single BfiQuestion entity.
type BfiQuestionDeleteOne struct {
	bqd *BfiQuestionDelete
}

// Where appends a list predicates to the BfiQuestionDelete builder.
func (bqdo *BfiQuestionDeleteOne) Where(ps ...predicate.BfiQuestion) *BfiQuestionDeleteOne {
	bqdo.bqd.mutation.Where(ps...)
	return bqdo
}

// Exec executes the deletion query.
func (bqdo *BfiQuestionDeleteOne) Exec(ctx context.Context) error {
	n, err := bqdo.bqd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{bfiquestion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bqdo *BfiQuestionDeleteOne) ExecX(ctx context.Context) {
	if err := bqdo.Exec(ctx); err != nil {
		panic(err)
	}
}
