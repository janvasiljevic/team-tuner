// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"jv/team-tone-tuner/model/bfianswer"
	"jv/team-tone-tuner/model/bfiquestion"
	"jv/team-tone-tuner/model/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BfiQuestionUpdate is the builder for updating BfiQuestion entities.
type BfiQuestionUpdate struct {
	config
	hooks    []Hook
	mutation *BfiQuestionMutation
}

// Where appends a list predicates to the BfiQuestionUpdate builder.
func (bqu *BfiQuestionUpdate) Where(ps ...predicate.BfiQuestion) *BfiQuestionUpdate {
	bqu.mutation.Where(ps...)
	return bqu
}

// SetUpdatedAt sets the "updated_at" field.
func (bqu *BfiQuestionUpdate) SetUpdatedAt(t time.Time) *BfiQuestionUpdate {
	bqu.mutation.SetUpdatedAt(t)
	return bqu
}

// SetQuestiono sets the "questiono" field.
func (bqu *BfiQuestionUpdate) SetQuestiono(s string) *BfiQuestionUpdate {
	bqu.mutation.SetQuestiono(s)
	return bqu
}

// SetFacet sets the "facet" field.
func (bqu *BfiQuestionUpdate) SetFacet(s string) *BfiQuestionUpdate {
	bqu.mutation.SetFacet(s)
	return bqu
}

// SetDimension sets the "dimension" field.
func (bqu *BfiQuestionUpdate) SetDimension(b bfiquestion.Dimension) *BfiQuestionUpdate {
	bqu.mutation.SetDimension(b)
	return bqu
}

// SetInfluence sets the "influence" field.
func (bqu *BfiQuestionUpdate) SetInfluence(b bfiquestion.Influence) *BfiQuestionUpdate {
	bqu.mutation.SetInfluence(b)
	return bqu
}

// SetAlpha sets the "alpha" field.
func (bqu *BfiQuestionUpdate) SetAlpha(f float64) *BfiQuestionUpdate {
	bqu.mutation.ResetAlpha()
	bqu.mutation.SetAlpha(f)
	return bqu
}

// AddAlpha adds f to the "alpha" field.
func (bqu *BfiQuestionUpdate) AddAlpha(f float64) *BfiQuestionUpdate {
	bqu.mutation.AddAlpha(f)
	return bqu
}

// AddBfiAnswerIDs adds the "bfi_answers" edge to the BfiAnswer entity by IDs.
func (bqu *BfiQuestionUpdate) AddBfiAnswerIDs(ids ...uuid.UUID) *BfiQuestionUpdate {
	bqu.mutation.AddBfiAnswerIDs(ids...)
	return bqu
}

// AddBfiAnswers adds the "bfi_answers" edges to the BfiAnswer entity.
func (bqu *BfiQuestionUpdate) AddBfiAnswers(b ...*BfiAnswer) *BfiQuestionUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bqu.AddBfiAnswerIDs(ids...)
}

// Mutation returns the BfiQuestionMutation object of the builder.
func (bqu *BfiQuestionUpdate) Mutation() *BfiQuestionMutation {
	return bqu.mutation
}

// ClearBfiAnswers clears all "bfi_answers" edges to the BfiAnswer entity.
func (bqu *BfiQuestionUpdate) ClearBfiAnswers() *BfiQuestionUpdate {
	bqu.mutation.ClearBfiAnswers()
	return bqu
}

// RemoveBfiAnswerIDs removes the "bfi_answers" edge to BfiAnswer entities by IDs.
func (bqu *BfiQuestionUpdate) RemoveBfiAnswerIDs(ids ...uuid.UUID) *BfiQuestionUpdate {
	bqu.mutation.RemoveBfiAnswerIDs(ids...)
	return bqu
}

// RemoveBfiAnswers removes "bfi_answers" edges to BfiAnswer entities.
func (bqu *BfiQuestionUpdate) RemoveBfiAnswers(b ...*BfiAnswer) *BfiQuestionUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bqu.RemoveBfiAnswerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bqu *BfiQuestionUpdate) Save(ctx context.Context) (int, error) {
	bqu.defaults()
	return withHooks(ctx, bqu.sqlSave, bqu.mutation, bqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bqu *BfiQuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := bqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bqu *BfiQuestionUpdate) Exec(ctx context.Context) error {
	_, err := bqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bqu *BfiQuestionUpdate) ExecX(ctx context.Context) {
	if err := bqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bqu *BfiQuestionUpdate) defaults() {
	if _, ok := bqu.mutation.UpdatedAt(); !ok {
		v := bfiquestion.UpdateDefaultUpdatedAt()
		bqu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bqu *BfiQuestionUpdate) check() error {
	if v, ok := bqu.mutation.Questiono(); ok {
		if err := bfiquestion.QuestionoValidator(v); err != nil {
			return &ValidationError{Name: "questiono", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.questiono": %w`, err)}
		}
	}
	if v, ok := bqu.mutation.Facet(); ok {
		if err := bfiquestion.FacetValidator(v); err != nil {
			return &ValidationError{Name: "facet", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.facet": %w`, err)}
		}
	}
	if v, ok := bqu.mutation.Dimension(); ok {
		if err := bfiquestion.DimensionValidator(v); err != nil {
			return &ValidationError{Name: "dimension", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.dimension": %w`, err)}
		}
	}
	if v, ok := bqu.mutation.Influence(); ok {
		if err := bfiquestion.InfluenceValidator(v); err != nil {
			return &ValidationError{Name: "influence", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.influence": %w`, err)}
		}
	}
	if v, ok := bqu.mutation.Alpha(); ok {
		if err := bfiquestion.AlphaValidator(v); err != nil {
			return &ValidationError{Name: "alpha", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.alpha": %w`, err)}
		}
	}
	return nil
}

func (bqu *BfiQuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bqu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bfiquestion.Table, bfiquestion.Columns, sqlgraph.NewFieldSpec(bfiquestion.FieldID, field.TypeUUID))
	if ps := bqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bqu.mutation.UpdatedAt(); ok {
		_spec.SetField(bfiquestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bqu.mutation.Questiono(); ok {
		_spec.SetField(bfiquestion.FieldQuestiono, field.TypeString, value)
	}
	if value, ok := bqu.mutation.Facet(); ok {
		_spec.SetField(bfiquestion.FieldFacet, field.TypeString, value)
	}
	if value, ok := bqu.mutation.Dimension(); ok {
		_spec.SetField(bfiquestion.FieldDimension, field.TypeEnum, value)
	}
	if value, ok := bqu.mutation.Influence(); ok {
		_spec.SetField(bfiquestion.FieldInfluence, field.TypeEnum, value)
	}
	if value, ok := bqu.mutation.Alpha(); ok {
		_spec.SetField(bfiquestion.FieldAlpha, field.TypeFloat64, value)
	}
	if value, ok := bqu.mutation.AddedAlpha(); ok {
		_spec.AddField(bfiquestion.FieldAlpha, field.TypeFloat64, value)
	}
	if bqu.mutation.BfiAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bfiquestion.BfiAnswersTable,
			Columns: []string{bfiquestion.BfiAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfianswer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bqu.mutation.RemovedBfiAnswersIDs(); len(nodes) > 0 && !bqu.mutation.BfiAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bfiquestion.BfiAnswersTable,
			Columns: []string{bfiquestion.BfiAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfianswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bqu.mutation.BfiAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bfiquestion.BfiAnswersTable,
			Columns: []string{bfiquestion.BfiAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfianswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bfiquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bqu.mutation.done = true
	return n, nil
}

// BfiQuestionUpdateOne is the builder for updating a single BfiQuestion entity.
type BfiQuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BfiQuestionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bquo *BfiQuestionUpdateOne) SetUpdatedAt(t time.Time) *BfiQuestionUpdateOne {
	bquo.mutation.SetUpdatedAt(t)
	return bquo
}

// SetQuestiono sets the "questiono" field.
func (bquo *BfiQuestionUpdateOne) SetQuestiono(s string) *BfiQuestionUpdateOne {
	bquo.mutation.SetQuestiono(s)
	return bquo
}

// SetFacet sets the "facet" field.
func (bquo *BfiQuestionUpdateOne) SetFacet(s string) *BfiQuestionUpdateOne {
	bquo.mutation.SetFacet(s)
	return bquo
}

// SetDimension sets the "dimension" field.
func (bquo *BfiQuestionUpdateOne) SetDimension(b bfiquestion.Dimension) *BfiQuestionUpdateOne {
	bquo.mutation.SetDimension(b)
	return bquo
}

// SetInfluence sets the "influence" field.
func (bquo *BfiQuestionUpdateOne) SetInfluence(b bfiquestion.Influence) *BfiQuestionUpdateOne {
	bquo.mutation.SetInfluence(b)
	return bquo
}

// SetAlpha sets the "alpha" field.
func (bquo *BfiQuestionUpdateOne) SetAlpha(f float64) *BfiQuestionUpdateOne {
	bquo.mutation.ResetAlpha()
	bquo.mutation.SetAlpha(f)
	return bquo
}

// AddAlpha adds f to the "alpha" field.
func (bquo *BfiQuestionUpdateOne) AddAlpha(f float64) *BfiQuestionUpdateOne {
	bquo.mutation.AddAlpha(f)
	return bquo
}

// AddBfiAnswerIDs adds the "bfi_answers" edge to the BfiAnswer entity by IDs.
func (bquo *BfiQuestionUpdateOne) AddBfiAnswerIDs(ids ...uuid.UUID) *BfiQuestionUpdateOne {
	bquo.mutation.AddBfiAnswerIDs(ids...)
	return bquo
}

// AddBfiAnswers adds the "bfi_answers" edges to the BfiAnswer entity.
func (bquo *BfiQuestionUpdateOne) AddBfiAnswers(b ...*BfiAnswer) *BfiQuestionUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bquo.AddBfiAnswerIDs(ids...)
}

// Mutation returns the BfiQuestionMutation object of the builder.
func (bquo *BfiQuestionUpdateOne) Mutation() *BfiQuestionMutation {
	return bquo.mutation
}

// ClearBfiAnswers clears all "bfi_answers" edges to the BfiAnswer entity.
func (bquo *BfiQuestionUpdateOne) ClearBfiAnswers() *BfiQuestionUpdateOne {
	bquo.mutation.ClearBfiAnswers()
	return bquo
}

// RemoveBfiAnswerIDs removes the "bfi_answers" edge to BfiAnswer entities by IDs.
func (bquo *BfiQuestionUpdateOne) RemoveBfiAnswerIDs(ids ...uuid.UUID) *BfiQuestionUpdateOne {
	bquo.mutation.RemoveBfiAnswerIDs(ids...)
	return bquo
}

// RemoveBfiAnswers removes "bfi_answers" edges to BfiAnswer entities.
func (bquo *BfiQuestionUpdateOne) RemoveBfiAnswers(b ...*BfiAnswer) *BfiQuestionUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bquo.RemoveBfiAnswerIDs(ids...)
}

// Where appends a list predicates to the BfiQuestionUpdate builder.
func (bquo *BfiQuestionUpdateOne) Where(ps ...predicate.BfiQuestion) *BfiQuestionUpdateOne {
	bquo.mutation.Where(ps...)
	return bquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bquo *BfiQuestionUpdateOne) Select(field string, fields ...string) *BfiQuestionUpdateOne {
	bquo.fields = append([]string{field}, fields...)
	return bquo
}

// Save executes the query and returns the updated BfiQuestion entity.
func (bquo *BfiQuestionUpdateOne) Save(ctx context.Context) (*BfiQuestion, error) {
	bquo.defaults()
	return withHooks(ctx, bquo.sqlSave, bquo.mutation, bquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bquo *BfiQuestionUpdateOne) SaveX(ctx context.Context) *BfiQuestion {
	node, err := bquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bquo *BfiQuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := bquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bquo *BfiQuestionUpdateOne) ExecX(ctx context.Context) {
	if err := bquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bquo *BfiQuestionUpdateOne) defaults() {
	if _, ok := bquo.mutation.UpdatedAt(); !ok {
		v := bfiquestion.UpdateDefaultUpdatedAt()
		bquo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bquo *BfiQuestionUpdateOne) check() error {
	if v, ok := bquo.mutation.Questiono(); ok {
		if err := bfiquestion.QuestionoValidator(v); err != nil {
			return &ValidationError{Name: "questiono", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.questiono": %w`, err)}
		}
	}
	if v, ok := bquo.mutation.Facet(); ok {
		if err := bfiquestion.FacetValidator(v); err != nil {
			return &ValidationError{Name: "facet", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.facet": %w`, err)}
		}
	}
	if v, ok := bquo.mutation.Dimension(); ok {
		if err := bfiquestion.DimensionValidator(v); err != nil {
			return &ValidationError{Name: "dimension", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.dimension": %w`, err)}
		}
	}
	if v, ok := bquo.mutation.Influence(); ok {
		if err := bfiquestion.InfluenceValidator(v); err != nil {
			return &ValidationError{Name: "influence", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.influence": %w`, err)}
		}
	}
	if v, ok := bquo.mutation.Alpha(); ok {
		if err := bfiquestion.AlphaValidator(v); err != nil {
			return &ValidationError{Name: "alpha", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.alpha": %w`, err)}
		}
	}
	return nil
}

func (bquo *BfiQuestionUpdateOne) sqlSave(ctx context.Context) (_node *BfiQuestion, err error) {
	if err := bquo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bfiquestion.Table, bfiquestion.Columns, sqlgraph.NewFieldSpec(bfiquestion.FieldID, field.TypeUUID))
	id, ok := bquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "BfiQuestion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bfiquestion.FieldID)
		for _, f := range fields {
			if !bfiquestion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != bfiquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bquo.mutation.UpdatedAt(); ok {
		_spec.SetField(bfiquestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bquo.mutation.Questiono(); ok {
		_spec.SetField(bfiquestion.FieldQuestiono, field.TypeString, value)
	}
	if value, ok := bquo.mutation.Facet(); ok {
		_spec.SetField(bfiquestion.FieldFacet, field.TypeString, value)
	}
	if value, ok := bquo.mutation.Dimension(); ok {
		_spec.SetField(bfiquestion.FieldDimension, field.TypeEnum, value)
	}
	if value, ok := bquo.mutation.Influence(); ok {
		_spec.SetField(bfiquestion.FieldInfluence, field.TypeEnum, value)
	}
	if value, ok := bquo.mutation.Alpha(); ok {
		_spec.SetField(bfiquestion.FieldAlpha, field.TypeFloat64, value)
	}
	if value, ok := bquo.mutation.AddedAlpha(); ok {
		_spec.AddField(bfiquestion.FieldAlpha, field.TypeFloat64, value)
	}
	if bquo.mutation.BfiAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bfiquestion.BfiAnswersTable,
			Columns: []string{bfiquestion.BfiAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfianswer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bquo.mutation.RemovedBfiAnswersIDs(); len(nodes) > 0 && !bquo.mutation.BfiAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bfiquestion.BfiAnswersTable,
			Columns: []string{bfiquestion.BfiAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfianswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bquo.mutation.BfiAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bfiquestion.BfiAnswersTable,
			Columns: []string{bfiquestion.BfiAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfianswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BfiQuestion{config: bquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bfiquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bquo.mutation.done = true
	return _node, nil
}
