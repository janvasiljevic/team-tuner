// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"jv/team-tone-tuner/model/bfianswer"
	"jv/team-tone-tuner/model/bfiquestion"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BfiQuestionCreate is the builder for creating a BfiQuestion entity.
type BfiQuestionCreate struct {
	config
	mutation *BfiQuestionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bqc *BfiQuestionCreate) SetCreatedAt(t time.Time) *BfiQuestionCreate {
	bqc.mutation.SetCreatedAt(t)
	return bqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bqc *BfiQuestionCreate) SetNillableCreatedAt(t *time.Time) *BfiQuestionCreate {
	if t != nil {
		bqc.SetCreatedAt(*t)
	}
	return bqc
}

// SetUpdatedAt sets the "updated_at" field.
func (bqc *BfiQuestionCreate) SetUpdatedAt(t time.Time) *BfiQuestionCreate {
	bqc.mutation.SetUpdatedAt(t)
	return bqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bqc *BfiQuestionCreate) SetNillableUpdatedAt(t *time.Time) *BfiQuestionCreate {
	if t != nil {
		bqc.SetUpdatedAt(*t)
	}
	return bqc
}

// SetQuestiono sets the "questiono" field.
func (bqc *BfiQuestionCreate) SetQuestiono(s string) *BfiQuestionCreate {
	bqc.mutation.SetQuestiono(s)
	return bqc
}

// SetFacet sets the "facet" field.
func (bqc *BfiQuestionCreate) SetFacet(s string) *BfiQuestionCreate {
	bqc.mutation.SetFacet(s)
	return bqc
}

// SetDimension sets the "dimension" field.
func (bqc *BfiQuestionCreate) SetDimension(b bfiquestion.Dimension) *BfiQuestionCreate {
	bqc.mutation.SetDimension(b)
	return bqc
}

// SetInfluence sets the "influence" field.
func (bqc *BfiQuestionCreate) SetInfluence(b bfiquestion.Influence) *BfiQuestionCreate {
	bqc.mutation.SetInfluence(b)
	return bqc
}

// SetAlpha sets the "alpha" field.
func (bqc *BfiQuestionCreate) SetAlpha(f float64) *BfiQuestionCreate {
	bqc.mutation.SetAlpha(f)
	return bqc
}

// SetID sets the "id" field.
func (bqc *BfiQuestionCreate) SetID(u uuid.UUID) *BfiQuestionCreate {
	bqc.mutation.SetID(u)
	return bqc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bqc *BfiQuestionCreate) SetNillableID(u *uuid.UUID) *BfiQuestionCreate {
	if u != nil {
		bqc.SetID(*u)
	}
	return bqc
}

// AddBfiAnswerIDs adds the "bfi_answers" edge to the BfiAnswer entity by IDs.
func (bqc *BfiQuestionCreate) AddBfiAnswerIDs(ids ...uuid.UUID) *BfiQuestionCreate {
	bqc.mutation.AddBfiAnswerIDs(ids...)
	return bqc
}

// AddBfiAnswers adds the "bfi_answers" edges to the BfiAnswer entity.
func (bqc *BfiQuestionCreate) AddBfiAnswers(b ...*BfiAnswer) *BfiQuestionCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bqc.AddBfiAnswerIDs(ids...)
}

// Mutation returns the BfiQuestionMutation object of the builder.
func (bqc *BfiQuestionCreate) Mutation() *BfiQuestionMutation {
	return bqc.mutation
}

// Save creates the BfiQuestion in the database.
func (bqc *BfiQuestionCreate) Save(ctx context.Context) (*BfiQuestion, error) {
	bqc.defaults()
	return withHooks(ctx, bqc.sqlSave, bqc.mutation, bqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bqc *BfiQuestionCreate) SaveX(ctx context.Context) *BfiQuestion {
	v, err := bqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bqc *BfiQuestionCreate) Exec(ctx context.Context) error {
	_, err := bqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bqc *BfiQuestionCreate) ExecX(ctx context.Context) {
	if err := bqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bqc *BfiQuestionCreate) defaults() {
	if _, ok := bqc.mutation.CreatedAt(); !ok {
		v := bfiquestion.DefaultCreatedAt()
		bqc.mutation.SetCreatedAt(v)
	}
	if _, ok := bqc.mutation.UpdatedAt(); !ok {
		v := bfiquestion.DefaultUpdatedAt()
		bqc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bqc.mutation.ID(); !ok {
		v := bfiquestion.DefaultID()
		bqc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bqc *BfiQuestionCreate) check() error {
	if _, ok := bqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`model: missing required field "BfiQuestion.created_at"`)}
	}
	if _, ok := bqc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`model: missing required field "BfiQuestion.updated_at"`)}
	}
	if _, ok := bqc.mutation.Questiono(); !ok {
		return &ValidationError{Name: "questiono", err: errors.New(`model: missing required field "BfiQuestion.questiono"`)}
	}
	if v, ok := bqc.mutation.Questiono(); ok {
		if err := bfiquestion.QuestionoValidator(v); err != nil {
			return &ValidationError{Name: "questiono", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.questiono": %w`, err)}
		}
	}
	if _, ok := bqc.mutation.Facet(); !ok {
		return &ValidationError{Name: "facet", err: errors.New(`model: missing required field "BfiQuestion.facet"`)}
	}
	if v, ok := bqc.mutation.Facet(); ok {
		if err := bfiquestion.FacetValidator(v); err != nil {
			return &ValidationError{Name: "facet", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.facet": %w`, err)}
		}
	}
	if _, ok := bqc.mutation.Dimension(); !ok {
		return &ValidationError{Name: "dimension", err: errors.New(`model: missing required field "BfiQuestion.dimension"`)}
	}
	if v, ok := bqc.mutation.Dimension(); ok {
		if err := bfiquestion.DimensionValidator(v); err != nil {
			return &ValidationError{Name: "dimension", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.dimension": %w`, err)}
		}
	}
	if _, ok := bqc.mutation.Influence(); !ok {
		return &ValidationError{Name: "influence", err: errors.New(`model: missing required field "BfiQuestion.influence"`)}
	}
	if v, ok := bqc.mutation.Influence(); ok {
		if err := bfiquestion.InfluenceValidator(v); err != nil {
			return &ValidationError{Name: "influence", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.influence": %w`, err)}
		}
	}
	if _, ok := bqc.mutation.Alpha(); !ok {
		return &ValidationError{Name: "alpha", err: errors.New(`model: missing required field "BfiQuestion.alpha"`)}
	}
	if v, ok := bqc.mutation.Alpha(); ok {
		if err := bfiquestion.AlphaValidator(v); err != nil {
			return &ValidationError{Name: "alpha", err: fmt.Errorf(`model: validator failed for field "BfiQuestion.alpha": %w`, err)}
		}
	}
	return nil
}

func (bqc *BfiQuestionCreate) sqlSave(ctx context.Context) (*BfiQuestion, error) {
	if err := bqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bqc.mutation.id = &_node.ID
	bqc.mutation.done = true
	return _node, nil
}

func (bqc *BfiQuestionCreate) createSpec() (*BfiQuestion, *sqlgraph.CreateSpec) {
	var (
		_node = &BfiQuestion{config: bqc.config}
		_spec = sqlgraph.NewCreateSpec(bfiquestion.Table, sqlgraph.NewFieldSpec(bfiquestion.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = bqc.conflict
	if id, ok := bqc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bqc.mutation.CreatedAt(); ok {
		_spec.SetField(bfiquestion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bqc.mutation.UpdatedAt(); ok {
		_spec.SetField(bfiquestion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bqc.mutation.Questiono(); ok {
		_spec.SetField(bfiquestion.FieldQuestiono, field.TypeString, value)
		_node.Questiono = value
	}
	if value, ok := bqc.mutation.Facet(); ok {
		_spec.SetField(bfiquestion.FieldFacet, field.TypeString, value)
		_node.Facet = value
	}
	if value, ok := bqc.mutation.Dimension(); ok {
		_spec.SetField(bfiquestion.FieldDimension, field.TypeEnum, value)
		_node.Dimension = value
	}
	if value, ok := bqc.mutation.Influence(); ok {
		_spec.SetField(bfiquestion.FieldInfluence, field.TypeEnum, value)
		_node.Influence = value
	}
	if value, ok := bqc.mutation.Alpha(); ok {
		_spec.SetField(bfiquestion.FieldAlpha, field.TypeFloat64, value)
		_node.Alpha = value
	}
	if nodes := bqc.mutation.BfiAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bfiquestion.BfiAnswersTable,
			Columns: []string{bfiquestion.BfiAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bfianswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BfiQuestion.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BfiQuestionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bqc *BfiQuestionCreate) OnConflict(opts ...sql.ConflictOption) *BfiQuestionUpsertOne {
	bqc.conflict = opts
	return &BfiQuestionUpsertOne{
		create: bqc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BfiQuestion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bqc *BfiQuestionCreate) OnConflictColumns(columns ...string) *BfiQuestionUpsertOne {
	bqc.conflict = append(bqc.conflict, sql.ConflictColumns(columns...))
	return &BfiQuestionUpsertOne{
		create: bqc,
	}
}

type (
	// BfiQuestionUpsertOne is the builder for "upsert"-ing
	//  one BfiQuestion node.
	BfiQuestionUpsertOne struct {
		create *BfiQuestionCreate
	}

	// BfiQuestionUpsert is the "OnConflict" setter.
	BfiQuestionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BfiQuestionUpsert) SetUpdatedAt(v time.Time) *BfiQuestionUpsert {
	u.Set(bfiquestion.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BfiQuestionUpsert) UpdateUpdatedAt() *BfiQuestionUpsert {
	u.SetExcluded(bfiquestion.FieldUpdatedAt)
	return u
}

// SetQuestiono sets the "questiono" field.
func (u *BfiQuestionUpsert) SetQuestiono(v string) *BfiQuestionUpsert {
	u.Set(bfiquestion.FieldQuestiono, v)
	return u
}

// UpdateQuestiono sets the "questiono" field to the value that was provided on create.
func (u *BfiQuestionUpsert) UpdateQuestiono() *BfiQuestionUpsert {
	u.SetExcluded(bfiquestion.FieldQuestiono)
	return u
}

// SetFacet sets the "facet" field.
func (u *BfiQuestionUpsert) SetFacet(v string) *BfiQuestionUpsert {
	u.Set(bfiquestion.FieldFacet, v)
	return u
}

// UpdateFacet sets the "facet" field to the value that was provided on create.
func (u *BfiQuestionUpsert) UpdateFacet() *BfiQuestionUpsert {
	u.SetExcluded(bfiquestion.FieldFacet)
	return u
}

// SetDimension sets the "dimension" field.
func (u *BfiQuestionUpsert) SetDimension(v bfiquestion.Dimension) *BfiQuestionUpsert {
	u.Set(bfiquestion.FieldDimension, v)
	return u
}

// UpdateDimension sets the "dimension" field to the value that was provided on create.
func (u *BfiQuestionUpsert) UpdateDimension() *BfiQuestionUpsert {
	u.SetExcluded(bfiquestion.FieldDimension)
	return u
}

// SetInfluence sets the "influence" field.
func (u *BfiQuestionUpsert) SetInfluence(v bfiquestion.Influence) *BfiQuestionUpsert {
	u.Set(bfiquestion.FieldInfluence, v)
	return u
}

// UpdateInfluence sets the "influence" field to the value that was provided on create.
func (u *BfiQuestionUpsert) UpdateInfluence() *BfiQuestionUpsert {
	u.SetExcluded(bfiquestion.FieldInfluence)
	return u
}

// SetAlpha sets the "alpha" field.
func (u *BfiQuestionUpsert) SetAlpha(v float64) *BfiQuestionUpsert {
	u.Set(bfiquestion.FieldAlpha, v)
	return u
}

// UpdateAlpha sets the "alpha" field to the value that was provided on create.
func (u *BfiQuestionUpsert) UpdateAlpha() *BfiQuestionUpsert {
	u.SetExcluded(bfiquestion.FieldAlpha)
	return u
}

// AddAlpha adds v to the "alpha" field.
func (u *BfiQuestionUpsert) AddAlpha(v float64) *BfiQuestionUpsert {
	u.Add(bfiquestion.FieldAlpha, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BfiQuestion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bfiquestion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BfiQuestionUpsertOne) UpdateNewValues() *BfiQuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(bfiquestion.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(bfiquestion.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BfiQuestion.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BfiQuestionUpsertOne) Ignore() *BfiQuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BfiQuestionUpsertOne) DoNothing() *BfiQuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BfiQuestionCreate.OnConflict
// documentation for more info.
func (u *BfiQuestionUpsertOne) Update(set func(*BfiQuestionUpsert)) *BfiQuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BfiQuestionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BfiQuestionUpsertOne) SetUpdatedAt(v time.Time) *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BfiQuestionUpsertOne) UpdateUpdatedAt() *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetQuestiono sets the "questiono" field.
func (u *BfiQuestionUpsertOne) SetQuestiono(v string) *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetQuestiono(v)
	})
}

// UpdateQuestiono sets the "questiono" field to the value that was provided on create.
func (u *BfiQuestionUpsertOne) UpdateQuestiono() *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateQuestiono()
	})
}

// SetFacet sets the "facet" field.
func (u *BfiQuestionUpsertOne) SetFacet(v string) *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetFacet(v)
	})
}

// UpdateFacet sets the "facet" field to the value that was provided on create.
func (u *BfiQuestionUpsertOne) UpdateFacet() *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateFacet()
	})
}

// SetDimension sets the "dimension" field.
func (u *BfiQuestionUpsertOne) SetDimension(v bfiquestion.Dimension) *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetDimension(v)
	})
}

// UpdateDimension sets the "dimension" field to the value that was provided on create.
func (u *BfiQuestionUpsertOne) UpdateDimension() *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateDimension()
	})
}

// SetInfluence sets the "influence" field.
func (u *BfiQuestionUpsertOne) SetInfluence(v bfiquestion.Influence) *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetInfluence(v)
	})
}

// UpdateInfluence sets the "influence" field to the value that was provided on create.
func (u *BfiQuestionUpsertOne) UpdateInfluence() *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateInfluence()
	})
}

// SetAlpha sets the "alpha" field.
func (u *BfiQuestionUpsertOne) SetAlpha(v float64) *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetAlpha(v)
	})
}

// AddAlpha adds v to the "alpha" field.
func (u *BfiQuestionUpsertOne) AddAlpha(v float64) *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.AddAlpha(v)
	})
}

// UpdateAlpha sets the "alpha" field to the value that was provided on create.
func (u *BfiQuestionUpsertOne) UpdateAlpha() *BfiQuestionUpsertOne {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateAlpha()
	})
}

// Exec executes the query.
func (u *BfiQuestionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for BfiQuestionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BfiQuestionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BfiQuestionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: BfiQuestionUpsertOne.ID is not supported by MySQL driver. Use BfiQuestionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BfiQuestionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BfiQuestionCreateBulk is the builder for creating many BfiQuestion entities in bulk.
type BfiQuestionCreateBulk struct {
	config
	builders []*BfiQuestionCreate
	conflict []sql.ConflictOption
}

// Save creates the BfiQuestion entities in the database.
func (bqcb *BfiQuestionCreateBulk) Save(ctx context.Context) ([]*BfiQuestion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bqcb.builders))
	nodes := make([]*BfiQuestion, len(bqcb.builders))
	mutators := make([]Mutator, len(bqcb.builders))
	for i := range bqcb.builders {
		func(i int, root context.Context) {
			builder := bqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BfiQuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bqcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bqcb *BfiQuestionCreateBulk) SaveX(ctx context.Context) []*BfiQuestion {
	v, err := bqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bqcb *BfiQuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := bqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bqcb *BfiQuestionCreateBulk) ExecX(ctx context.Context) {
	if err := bqcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BfiQuestion.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BfiQuestionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bqcb *BfiQuestionCreateBulk) OnConflict(opts ...sql.ConflictOption) *BfiQuestionUpsertBulk {
	bqcb.conflict = opts
	return &BfiQuestionUpsertBulk{
		create: bqcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BfiQuestion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bqcb *BfiQuestionCreateBulk) OnConflictColumns(columns ...string) *BfiQuestionUpsertBulk {
	bqcb.conflict = append(bqcb.conflict, sql.ConflictColumns(columns...))
	return &BfiQuestionUpsertBulk{
		create: bqcb,
	}
}

// BfiQuestionUpsertBulk is the builder for "upsert"-ing
// a bulk of BfiQuestion nodes.
type BfiQuestionUpsertBulk struct {
	create *BfiQuestionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BfiQuestion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bfiquestion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BfiQuestionUpsertBulk) UpdateNewValues() *BfiQuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(bfiquestion.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(bfiquestion.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BfiQuestion.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BfiQuestionUpsertBulk) Ignore() *BfiQuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BfiQuestionUpsertBulk) DoNothing() *BfiQuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BfiQuestionCreateBulk.OnConflict
// documentation for more info.
func (u *BfiQuestionUpsertBulk) Update(set func(*BfiQuestionUpsert)) *BfiQuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BfiQuestionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BfiQuestionUpsertBulk) SetUpdatedAt(v time.Time) *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BfiQuestionUpsertBulk) UpdateUpdatedAt() *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetQuestiono sets the "questiono" field.
func (u *BfiQuestionUpsertBulk) SetQuestiono(v string) *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetQuestiono(v)
	})
}

// UpdateQuestiono sets the "questiono" field to the value that was provided on create.
func (u *BfiQuestionUpsertBulk) UpdateQuestiono() *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateQuestiono()
	})
}

// SetFacet sets the "facet" field.
func (u *BfiQuestionUpsertBulk) SetFacet(v string) *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetFacet(v)
	})
}

// UpdateFacet sets the "facet" field to the value that was provided on create.
func (u *BfiQuestionUpsertBulk) UpdateFacet() *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateFacet()
	})
}

// SetDimension sets the "dimension" field.
func (u *BfiQuestionUpsertBulk) SetDimension(v bfiquestion.Dimension) *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetDimension(v)
	})
}

// UpdateDimension sets the "dimension" field to the value that was provided on create.
func (u *BfiQuestionUpsertBulk) UpdateDimension() *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateDimension()
	})
}

// SetInfluence sets the "influence" field.
func (u *BfiQuestionUpsertBulk) SetInfluence(v bfiquestion.Influence) *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetInfluence(v)
	})
}

// UpdateInfluence sets the "influence" field to the value that was provided on create.
func (u *BfiQuestionUpsertBulk) UpdateInfluence() *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateInfluence()
	})
}

// SetAlpha sets the "alpha" field.
func (u *BfiQuestionUpsertBulk) SetAlpha(v float64) *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.SetAlpha(v)
	})
}

// AddAlpha adds v to the "alpha" field.
func (u *BfiQuestionUpsertBulk) AddAlpha(v float64) *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.AddAlpha(v)
	})
}

// UpdateAlpha sets the "alpha" field to the value that was provided on create.
func (u *BfiQuestionUpsertBulk) UpdateAlpha() *BfiQuestionUpsertBulk {
	return u.Update(func(s *BfiQuestionUpsert) {
		s.UpdateAlpha()
	})
}

// Exec executes the query.
func (u *BfiQuestionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the BfiQuestionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for BfiQuestionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BfiQuestionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
