// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"jv/team-tone-tuner/model/course"
	"jv/team-tone-tuner/model/group"
	"jv/team-tone-tuner/model/grouprun"
	"jv/team-tone-tuner/model/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CourseCreate is the builder for creating a Course entity.
type CourseCreate struct {
	config
	mutation *CourseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CourseCreate) SetCreatedAt(t time.Time) *CourseCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CourseCreate) SetNillableCreatedAt(t *time.Time) *CourseCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CourseCreate) SetUpdatedAt(t time.Time) *CourseCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CourseCreate) SetNillableUpdatedAt(t *time.Time) *CourseCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CourseCreate) SetName(s string) *CourseCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetCode sets the "code" field.
func (cc *CourseCreate) SetCode(s string) *CourseCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetColour sets the "colour" field.
func (cc *CourseCreate) SetColour(s string) *CourseCreate {
	cc.mutation.SetColour(s)
	return cc
}

// SetNillableColour sets the "colour" field if the given value is not nil.
func (cc *CourseCreate) SetNillableColour(s *string) *CourseCreate {
	if s != nil {
		cc.SetColour(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CourseCreate) SetID(u uuid.UUID) *CourseCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CourseCreate) SetNillableID(u *uuid.UUID) *CourseCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddStudentIDs adds the "students" edge to the User entity by IDs.
func (cc *CourseCreate) AddStudentIDs(ids ...uuid.UUID) *CourseCreate {
	cc.mutation.AddStudentIDs(ids...)
	return cc
}

// AddStudents adds the "students" edges to the User entity.
func (cc *CourseCreate) AddStudents(u ...*User) *CourseCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddStudentIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (cc *CourseCreate) AddGroupIDs(ids ...uuid.UUID) *CourseCreate {
	cc.mutation.AddGroupIDs(ids...)
	return cc
}

// AddGroups adds the "groups" edges to the Group entity.
func (cc *CourseCreate) AddGroups(g ...*Group) *CourseCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cc.AddGroupIDs(ids...)
}

// AddGroupRunIDs adds the "group_runs" edge to the GroupRun entity by IDs.
func (cc *CourseCreate) AddGroupRunIDs(ids ...uuid.UUID) *CourseCreate {
	cc.mutation.AddGroupRunIDs(ids...)
	return cc
}

// AddGroupRuns adds the "group_runs" edges to the GroupRun entity.
func (cc *CourseCreate) AddGroupRuns(g ...*GroupRun) *CourseCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cc.AddGroupRunIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cc *CourseCreate) Mutation() *CourseMutation {
	return cc.mutation
}

// Save creates the Course in the database.
func (cc *CourseCreate) Save(ctx context.Context) (*Course, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CourseCreate) SaveX(ctx context.Context) *Course {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CourseCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CourseCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CourseCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := course.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := course.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Colour(); !ok {
		v := course.DefaultColour
		cc.mutation.SetColour(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := course.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CourseCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`model: missing required field "Course.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`model: missing required field "Course.updated_at"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "Course.name"`)}
	}
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`model: missing required field "Course.code"`)}
	}
	if _, ok := cc.mutation.Colour(); !ok {
		return &ValidationError{Name: "colour", err: errors.New(`model: missing required field "Course.colour"`)}
	}
	if v, ok := cc.mutation.Colour(); ok {
		if err := course.ColourValidator(v); err != nil {
			return &ValidationError{Name: "colour", err: fmt.Errorf(`model: validator failed for field "Course.colour": %w`, err)}
		}
	}
	return nil
}

func (cc *CourseCreate) sqlSave(ctx context.Context) (*Course, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CourseCreate) createSpec() (*Course, *sqlgraph.CreateSpec) {
	var (
		_node = &Course{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(course.Table, sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(course.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(course.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(course.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.SetField(course.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cc.mutation.Colour(); ok {
		_spec.SetField(course.FieldColour, field.TypeString, value)
		_node.Colour = value
	}
	if nodes := cc.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   course.StudentsTable,
			Columns: course.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.GroupsTable,
			Columns: []string{course.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.GroupRunsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.GroupRunsTable,
			Columns: []string{course.GroupRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouprun.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Course.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CourseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CourseCreate) OnConflict(opts ...sql.ConflictOption) *CourseUpsertOne {
	cc.conflict = opts
	return &CourseUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Course.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CourseCreate) OnConflictColumns(columns ...string) *CourseUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CourseUpsertOne{
		create: cc,
	}
}

type (
	// CourseUpsertOne is the builder for "upsert"-ing
	//  one Course node.
	CourseUpsertOne struct {
		create *CourseCreate
	}

	// CourseUpsert is the "OnConflict" setter.
	CourseUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CourseUpsert) SetUpdatedAt(v time.Time) *CourseUpsert {
	u.Set(course.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CourseUpsert) UpdateUpdatedAt() *CourseUpsert {
	u.SetExcluded(course.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *CourseUpsert) SetName(v string) *CourseUpsert {
	u.Set(course.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CourseUpsert) UpdateName() *CourseUpsert {
	u.SetExcluded(course.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *CourseUpsert) SetCode(v string) *CourseUpsert {
	u.Set(course.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CourseUpsert) UpdateCode() *CourseUpsert {
	u.SetExcluded(course.FieldCode)
	return u
}

// SetColour sets the "colour" field.
func (u *CourseUpsert) SetColour(v string) *CourseUpsert {
	u.Set(course.FieldColour, v)
	return u
}

// UpdateColour sets the "colour" field to the value that was provided on create.
func (u *CourseUpsert) UpdateColour() *CourseUpsert {
	u.SetExcluded(course.FieldColour)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Course.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(course.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CourseUpsertOne) UpdateNewValues() *CourseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(course.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(course.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Course.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CourseUpsertOne) Ignore() *CourseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CourseUpsertOne) DoNothing() *CourseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CourseCreate.OnConflict
// documentation for more info.
func (u *CourseUpsertOne) Update(set func(*CourseUpsert)) *CourseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CourseUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CourseUpsertOne) SetUpdatedAt(v time.Time) *CourseUpsertOne {
	return u.Update(func(s *CourseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CourseUpsertOne) UpdateUpdatedAt() *CourseUpsertOne {
	return u.Update(func(s *CourseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *CourseUpsertOne) SetName(v string) *CourseUpsertOne {
	return u.Update(func(s *CourseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CourseUpsertOne) UpdateName() *CourseUpsertOne {
	return u.Update(func(s *CourseUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *CourseUpsertOne) SetCode(v string) *CourseUpsertOne {
	return u.Update(func(s *CourseUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CourseUpsertOne) UpdateCode() *CourseUpsertOne {
	return u.Update(func(s *CourseUpsert) {
		s.UpdateCode()
	})
}

// SetColour sets the "colour" field.
func (u *CourseUpsertOne) SetColour(v string) *CourseUpsertOne {
	return u.Update(func(s *CourseUpsert) {
		s.SetColour(v)
	})
}

// UpdateColour sets the "colour" field to the value that was provided on create.
func (u *CourseUpsertOne) UpdateColour() *CourseUpsertOne {
	return u.Update(func(s *CourseUpsert) {
		s.UpdateColour()
	})
}

// Exec executes the query.
func (u *CourseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for CourseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CourseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CourseUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: CourseUpsertOne.ID is not supported by MySQL driver. Use CourseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CourseUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CourseCreateBulk is the builder for creating many Course entities in bulk.
type CourseCreateBulk struct {
	config
	builders []*CourseCreate
	conflict []sql.ConflictOption
}

// Save creates the Course entities in the database.
func (ccb *CourseCreateBulk) Save(ctx context.Context) ([]*Course, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Course, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CourseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CourseCreateBulk) SaveX(ctx context.Context) []*Course {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CourseCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CourseCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Course.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CourseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CourseCreateBulk) OnConflict(opts ...sql.ConflictOption) *CourseUpsertBulk {
	ccb.conflict = opts
	return &CourseUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Course.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CourseCreateBulk) OnConflictColumns(columns ...string) *CourseUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CourseUpsertBulk{
		create: ccb,
	}
}

// CourseUpsertBulk is the builder for "upsert"-ing
// a bulk of Course nodes.
type CourseUpsertBulk struct {
	create *CourseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Course.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(course.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CourseUpsertBulk) UpdateNewValues() *CourseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(course.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(course.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Course.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CourseUpsertBulk) Ignore() *CourseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CourseUpsertBulk) DoNothing() *CourseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CourseCreateBulk.OnConflict
// documentation for more info.
func (u *CourseUpsertBulk) Update(set func(*CourseUpsert)) *CourseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CourseUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CourseUpsertBulk) SetUpdatedAt(v time.Time) *CourseUpsertBulk {
	return u.Update(func(s *CourseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CourseUpsertBulk) UpdateUpdatedAt() *CourseUpsertBulk {
	return u.Update(func(s *CourseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *CourseUpsertBulk) SetName(v string) *CourseUpsertBulk {
	return u.Update(func(s *CourseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CourseUpsertBulk) UpdateName() *CourseUpsertBulk {
	return u.Update(func(s *CourseUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *CourseUpsertBulk) SetCode(v string) *CourseUpsertBulk {
	return u.Update(func(s *CourseUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CourseUpsertBulk) UpdateCode() *CourseUpsertBulk {
	return u.Update(func(s *CourseUpsert) {
		s.UpdateCode()
	})
}

// SetColour sets the "colour" field.
func (u *CourseUpsertBulk) SetColour(v string) *CourseUpsertBulk {
	return u.Update(func(s *CourseUpsert) {
		s.SetColour(v)
	})
}

// UpdateColour sets the "colour" field to the value that was provided on create.
func (u *CourseUpsertBulk) UpdateColour() *CourseUpsertBulk {
	return u.Update(func(s *CourseUpsert) {
		s.UpdateColour()
	})
}

// Exec executes the query.
func (u *CourseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the CourseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for CourseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CourseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
