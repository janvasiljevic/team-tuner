/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * TT API
 * Team tuner API documentation
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  OutQuestionerOut,
  GetQuestionParams,
  InPostQuestionAnswerIn,
  OutSubmitQuestionsOut,
} from '.././model';
import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType } from '.././mutator/custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * Get questions
 * @summary Get questions
 */
export const getQuestion = (
  params: GetQuestionParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutQuestionerOut>(
    { url: `/question`, method: 'get', params, signal },
    options,
  );
};

export const getGetQuestionQueryKey = (params: GetQuestionParams) =>
  [`/question`, ...(params ? [params] : [])] as const;

export const getGetQuestionQueryOptions = <
  TData = Awaited<ReturnType<typeof getQuestion>>,
  TError = ErrorType<unknown>,
>(
  params: GetQuestionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getQuestion>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getQuestion>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQuestionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getQuestion>>> = ({
    signal,
  }) => getQuestion(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetQuestionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getQuestion>>
>;
export type GetQuestionQueryError = ErrorType<unknown>;

/**
 * @summary Get questions
 */
export const useGetQuestion = <
  TData = Awaited<ReturnType<typeof getQuestion>>,
  TError = ErrorType<unknown>,
>(
  params: GetQuestionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getQuestion>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetQuestionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Post questions answer
 * @summary Post questions answer
 */
export const postQuestionAnswer = (
  inPostQuestionAnswerIn: InPostQuestionAnswerIn,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OutQuestionerOut>(
    {
      url: `/question/answer`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: inPostQuestionAnswerIn,
    },
    options,
  );
};

export const getPostQuestionAnswerMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postQuestionAnswer>>,
    TError,
    { data: InPostQuestionAnswerIn },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postQuestionAnswer>>,
  TError,
  { data: InPostQuestionAnswerIn },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postQuestionAnswer>>,
    { data: InPostQuestionAnswerIn }
  > = (props) => {
    const { data } = props ?? {};

    return postQuestionAnswer(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostQuestionAnswerMutationResult = NonNullable<
  Awaited<ReturnType<typeof postQuestionAnswer>>
>;
export type PostQuestionAnswerMutationBody = InPostQuestionAnswerIn;
export type PostQuestionAnswerMutationError = ErrorType<unknown>;

/**
 * @summary Post questions answer
 */
export const usePostQuestionAnswer = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postQuestionAnswer>>,
    TError,
    { data: InPostQuestionAnswerIn },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPostQuestionAnswerMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Submit questions. If all questions are answered, the BFI report will be geneareted. Else the user gets back the list of unanswered questions.
 * @summary Submit questions
 */
export const postQuestionSubmit = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OutSubmitQuestionsOut>(
    { url: `/question/submit`, method: 'post' },
    options,
  );
};

export const getPostQuestionSubmitMutationOptions = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postQuestionSubmit>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postQuestionSubmit>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postQuestionSubmit>>,
    TVariables
  > = () => {
    return postQuestionSubmit(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostQuestionSubmitMutationResult = NonNullable<
  Awaited<ReturnType<typeof postQuestionSubmit>>
>;

export type PostQuestionSubmitMutationError = ErrorType<unknown>;

/**
 * @summary Submit questions
 */
export const usePostQuestionSubmit = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postQuestionSubmit>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPostQuestionSubmitMutationOptions(options);

  return useMutation(mutationOptions);
};
