/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * TT API
 * Team tuner API documentation
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  UseMutationOptions,
  MutationFunction,
} from '@tanstack/react-query';
import type { OutGithubLoginOut, InGithubLoginIn } from '.././model';
import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType } from '.././mutator/custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * Github login
 * @summary Github login
 */
export const postLoginGithub = (
  inGithubLoginIn: InGithubLoginIn,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OutGithubLoginOut>(
    {
      url: `/login/github`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: inGithubLoginIn,
    },
    options,
  );
};

export const getPostLoginGithubMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLoginGithub>>,
    TError,
    { data: InGithubLoginIn },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLoginGithub>>,
  TError,
  { data: InGithubLoginIn },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLoginGithub>>,
    { data: InGithubLoginIn }
  > = (props) => {
    const { data } = props ?? {};

    return postLoginGithub(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoginGithubMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLoginGithub>>
>;
export type PostLoginGithubMutationBody = InGithubLoginIn;
export type PostLoginGithubMutationError = ErrorType<unknown>;

/**
 * @summary Github login
 */
export const usePostLoginGithub = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLoginGithub>>,
    TError,
    { data: InGithubLoginIn },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPostLoginGithubMutationOptions(options);

  return useMutation(mutationOptions);
};
