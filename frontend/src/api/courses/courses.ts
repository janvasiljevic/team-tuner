/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * TT API
 * Team tuner API documentation
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  OutCourseOut,
  OutCreatedCourseOut,
  InCreateCourseBody,
  OutGroupRunOut,
  OutBigFiveBoxPlot,
  OutDailyActivity,
  GetCourseCourseIdStatsDailyActivityParams,
  OutQuestionerCompletionStats,
} from '.././model';
import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType } from '.././mutator/custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * Get courses
 * @summary Get courses
 */
export const getCourse = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutCourseOut[]>(
    { url: `/course`, method: 'get', signal },
    options,
  );
};

export const getGetCourseQueryKey = () => [`/course`] as const;

export const getGetCourseQueryOptions = <
  TData = Awaited<ReturnType<typeof getCourse>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCourse>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryOptions<Awaited<ReturnType<typeof getCourse>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCourseQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCourse>>> = ({
    signal,
  }) => getCourse(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetCourseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCourse>>
>;
export type GetCourseQueryError = ErrorType<unknown>;

/**
 * @summary Get courses
 */
export const useGetCourse = <
  TData = Awaited<ReturnType<typeof getCourse>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCourse>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCourseQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create course
 * @summary Create course
 */
export const postCourse = (
  inCreateCourseBody: InCreateCourseBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<OutCreatedCourseOut>(
    {
      url: `/course`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: inCreateCourseBody,
    },
    options,
  );
};

export const getPostCourseMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCourse>>,
    TError,
    { data: InCreateCourseBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCourse>>,
  TError,
  { data: InCreateCourseBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCourse>>,
    { data: InCreateCourseBody }
  > = (props) => {
    const { data } = props ?? {};

    return postCourse(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCourseMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCourse>>
>;
export type PostCourseMutationBody = InCreateCourseBody;
export type PostCourseMutationError = ErrorType<unknown>;

/**
 * @summary Create course
 */
export const usePostCourse = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCourse>>,
    TError,
    { data: InCreateCourseBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPostCourseMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get courses group runs
 * @summary Get courses group runs
 */
export const getCoursesGroupRuns = (
  courseId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutGroupRunOut[]>(
    { url: `/course/${courseId}/group-runs`, method: 'get', signal },
    options,
  );
};

export const getGetCoursesGroupRunsQueryKey = (courseId: string) =>
  [`/course/${courseId}/group-runs`] as const;

export const getGetCoursesGroupRunsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCoursesGroupRuns>>,
  TError = ErrorType<unknown>,
>(
  courseId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCoursesGroupRuns>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof getCoursesGroupRuns>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCoursesGroupRunsQueryKey(courseId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCoursesGroupRuns>>
  > = ({ signal }) => getCoursesGroupRuns(courseId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!courseId, ...queryOptions };
};

export type GetCoursesGroupRunsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCoursesGroupRuns>>
>;
export type GetCoursesGroupRunsQueryError = ErrorType<unknown>;

/**
 * @summary Get courses group runs
 */
export const useGetCoursesGroupRuns = <
  TData = Awaited<ReturnType<typeof getCoursesGroupRuns>>,
  TError = ErrorType<unknown>,
>(
  courseId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCoursesGroupRuns>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCoursesGroupRunsQueryOptions(courseId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get a big five box plot for a course
 * @summary Get a big five box plot for a course
 */
export const getCourseCourseIdStatsBfBoxPlot = (
  courseId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutBigFiveBoxPlot>(
    { url: `/course/${courseId}/stats/bf-box-plot`, method: 'get', signal },
    options,
  );
};

export const getGetCourseCourseIdStatsBfBoxPlotQueryKey = (courseId: string) =>
  [`/course/${courseId}/stats/bf-box-plot`] as const;

export const getGetCourseCourseIdStatsBfBoxPlotQueryOptions = <
  TData = Awaited<ReturnType<typeof getCourseCourseIdStatsBfBoxPlot>>,
  TError = ErrorType<unknown>,
>(
  courseId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCourseCourseIdStatsBfBoxPlot>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof getCourseCourseIdStatsBfBoxPlot>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCourseCourseIdStatsBfBoxPlotQueryKey(courseId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCourseCourseIdStatsBfBoxPlot>>
  > = ({ signal }) =>
    getCourseCourseIdStatsBfBoxPlot(courseId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!courseId, ...queryOptions };
};

export type GetCourseCourseIdStatsBfBoxPlotQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCourseCourseIdStatsBfBoxPlot>>
>;
export type GetCourseCourseIdStatsBfBoxPlotQueryError = ErrorType<unknown>;

/**
 * @summary Get a big five box plot for a course
 */
export const useGetCourseCourseIdStatsBfBoxPlot = <
  TData = Awaited<ReturnType<typeof getCourseCourseIdStatsBfBoxPlot>>,
  TError = ErrorType<unknown>,
>(
  courseId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCourseCourseIdStatsBfBoxPlot>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCourseCourseIdStatsBfBoxPlotQueryOptions(
    courseId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get a daily number of solved questioners for a course
 * @summary Get a daily number of solved questioners for a course
 */
export const getCourseCourseIdStatsDailyActivity = (
  courseId: string,
  params?: GetCourseCourseIdStatsDailyActivityParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutDailyActivity>(
    {
      url: `/course/${courseId}/stats/daily-activity`,
      method: 'get',
      params,
      signal,
    },
    options,
  );
};

export const getGetCourseCourseIdStatsDailyActivityQueryKey = (
  courseId: string,
  params?: GetCourseCourseIdStatsDailyActivityParams,
) =>
  [
    `/course/${courseId}/stats/daily-activity`,
    ...(params ? [params] : []),
  ] as const;

export const getGetCourseCourseIdStatsDailyActivityQueryOptions = <
  TData = Awaited<ReturnType<typeof getCourseCourseIdStatsDailyActivity>>,
  TError = ErrorType<unknown>,
>(
  courseId: string,
  params?: GetCourseCourseIdStatsDailyActivityParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCourseCourseIdStatsDailyActivity>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof getCourseCourseIdStatsDailyActivity>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCourseCourseIdStatsDailyActivityQueryKey(courseId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCourseCourseIdStatsDailyActivity>>
  > = ({ signal }) =>
    getCourseCourseIdStatsDailyActivity(
      courseId,
      params,
      requestOptions,
      signal,
    );

  return { queryKey, queryFn, enabled: !!courseId, ...queryOptions };
};

export type GetCourseCourseIdStatsDailyActivityQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCourseCourseIdStatsDailyActivity>>
>;
export type GetCourseCourseIdStatsDailyActivityQueryError = ErrorType<unknown>;

/**
 * @summary Get a daily number of solved questioners for a course
 */
export const useGetCourseCourseIdStatsDailyActivity = <
  TData = Awaited<ReturnType<typeof getCourseCourseIdStatsDailyActivity>>,
  TError = ErrorType<unknown>,
>(
  courseId: string,
  params?: GetCourseCourseIdStatsDailyActivityParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCourseCourseIdStatsDailyActivity>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCourseCourseIdStatsDailyActivityQueryOptions(
    courseId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get a questioner completion stats for a course
 * @summary Get a questioner completion stats for a course
 */
export const getCourseCourseIdStatsQuestionerStats = (
  courseId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutQuestionerCompletionStats>(
    {
      url: `/course/${courseId}/stats/questioner-stats`,
      method: 'get',
      signal,
    },
    options,
  );
};

export const getGetCourseCourseIdStatsQuestionerStatsQueryKey = (
  courseId: string,
) => [`/course/${courseId}/stats/questioner-stats`] as const;

export const getGetCourseCourseIdStatsQuestionerStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCourseCourseIdStatsQuestionerStats>>,
  TError = ErrorType<unknown>,
>(
  courseId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCourseCourseIdStatsQuestionerStats>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof getCourseCourseIdStatsQuestionerStats>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCourseCourseIdStatsQuestionerStatsQueryKey(courseId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCourseCourseIdStatsQuestionerStats>>
  > = ({ signal }) =>
    getCourseCourseIdStatsQuestionerStats(courseId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!courseId, ...queryOptions };
};

export type GetCourseCourseIdStatsQuestionerStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCourseCourseIdStatsQuestionerStats>>
>;
export type GetCourseCourseIdStatsQuestionerStatsQueryError =
  ErrorType<unknown>;

/**
 * @summary Get a questioner completion stats for a course
 */
export const useGetCourseCourseIdStatsQuestionerStats = <
  TData = Awaited<ReturnType<typeof getCourseCourseIdStatsQuestionerStats>>,
  TError = ErrorType<unknown>,
>(
  courseId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCourseCourseIdStatsQuestionerStats>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCourseCourseIdStatsQuestionerStatsQueryOptions(
    courseId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
