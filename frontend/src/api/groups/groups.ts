/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * TT API
 * Team tuner API documentation
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  OutGroupOut,
  OutError,
  GetGroupsByGroupRunParams,
  InPostFormGroupsIn,
  OutDetailedGroupOut,
} from '.././model';
import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType } from '.././mutator/custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * Get groups
 * @summary Get groups
 */
export const getGroupsByGroupRun = (
  params?: GetGroupsByGroupRunParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutGroupOut[]>(
    { url: `/group`, method: 'get', params, signal },
    options,
  );
};

export const getGetGroupsByGroupRunQueryKey = (
  params?: GetGroupsByGroupRunParams,
) => [`/group`, ...(params ? [params] : [])] as const;

export const getGetGroupsByGroupRunQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsByGroupRun>>,
  TError = ErrorType<OutError>,
>(
  params?: GetGroupsByGroupRunParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getGroupsByGroupRun>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof getGroupsByGroupRun>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetGroupsByGroupRunQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGroupsByGroupRun>>
  > = ({ signal }) => getGroupsByGroupRun(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetGroupsByGroupRunQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsByGroupRun>>
>;
export type GetGroupsByGroupRunQueryError = ErrorType<OutError>;

/**
 * @summary Get groups
 */
export const useGetGroupsByGroupRun = <
  TData = Awaited<ReturnType<typeof getGroupsByGroupRun>>,
  TError = ErrorType<OutError>,
>(
  params?: GetGroupsByGroupRunParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getGroupsByGroupRun>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsByGroupRunQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Download groups as CSV
 * @summary Download groups as CSV
 */
export const downloadGroupsCsv = (
  groupRunId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/group/download/${groupRunId}`, method: 'get', signal },
    options,
  );
};

export const getDownloadGroupsCsvQueryKey = (groupRunId: string) =>
  [`/group/download/${groupRunId}`] as const;

export const getDownloadGroupsCsvQueryOptions = <
  TData = Awaited<ReturnType<typeof downloadGroupsCsv>>,
  TError = ErrorType<OutError>,
>(
  groupRunId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof downloadGroupsCsv>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof downloadGroupsCsv>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDownloadGroupsCsvQueryKey(groupRunId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof downloadGroupsCsv>>
  > = ({ signal }) => downloadGroupsCsv(groupRunId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!groupRunId, ...queryOptions };
};

export type DownloadGroupsCsvQueryResult = NonNullable<
  Awaited<ReturnType<typeof downloadGroupsCsv>>
>;
export type DownloadGroupsCsvQueryError = ErrorType<OutError>;

/**
 * @summary Download groups as CSV
 */
export const useDownloadGroupsCsv = <
  TData = Awaited<ReturnType<typeof downloadGroupsCsv>>,
  TError = ErrorType<OutError>,
>(
  groupRunId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof downloadGroupsCsv>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDownloadGroupsCsvQueryOptions(groupRunId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create groups for a course. Runs an algorithm to assign students to groups. After the algorithm finished the following are created: A group run and groups with students asiigned to them
 * @summary Create group
 */
export const createGroups = (
  inPostFormGroupsIn: InPostFormGroupsIn,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/group/form`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: inPostFormGroupsIn,
    },
    options,
  );
};

export const getCreateGroupsMutationOptions = <
  TError = ErrorType<OutError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createGroups>>,
    TError,
    { data: InPostFormGroupsIn },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createGroups>>,
  TError,
  { data: InPostFormGroupsIn },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createGroups>>,
    { data: InPostFormGroupsIn }
  > = (props) => {
    const { data } = props ?? {};

    return createGroups(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateGroupsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createGroups>>
>;
export type CreateGroupsMutationBody = InPostFormGroupsIn;
export type CreateGroupsMutationError = ErrorType<OutError>;

/**
 * @summary Create group
 */
export const useCreateGroups = <
  TError = ErrorType<OutError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createGroups>>,
    TError,
    { data: InPostFormGroupsIn },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getCreateGroupsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get group by id: their students and stats (bfi scores)
 * @summary Get group by id: their students and stats
 */
export const getGroupById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutDetailedGroupOut>(
    { url: `/group/${id}`, method: 'get', signal },
    options,
  );
};

export const getGetGroupByIdQueryKey = (id: string) =>
  [`/group/${id}`] as const;

export const getGetGroupByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getGroupById>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGroupByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupById>>> = ({
    signal,
  }) => getGroupById(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetGroupByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupById>>
>;
export type GetGroupByIdQueryError = ErrorType<unknown>;

/**
 * @summary Get group by id: their students and stats
 */
export const useGetGroupById = <
  TData = Awaited<ReturnType<typeof getGroupById>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getGroupById>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
