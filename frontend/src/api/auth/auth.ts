/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * TT API
 * Team tuner API documentation
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { OutWhoAmIOut } from '.././model';
import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType } from '.././mutator/custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * Logout the current user: Clears the JWT cookie
 * @summary Logout
 */
export const postAuthLogout = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/auth/logout`, method: 'post' }, options);
};

export const getPostAuthLogoutMutationOptions = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogout>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthLogout>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthLogout>>,
    TVariables
  > = () => {
    return postAuthLogout(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogout>>
>;

export type PostAuthLogoutMutationError = ErrorType<unknown>;

/**
 * @summary Logout
 */
export const usePostAuthLogout = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogout>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPostAuthLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get who am I: Information about the current user
 * @summary Get who am I
 */
export const getAuthWhoami = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutWhoAmIOut>(
    { url: `/auth/whoami`, method: 'get', signal },
    options,
  );
};

export const getGetAuthWhoamiQueryKey = () => [`/auth/whoami`] as const;

export const getGetAuthWhoamiQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthWhoami>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAuthWhoami>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof getAuthWhoami>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuthWhoamiQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthWhoami>>> = ({
    signal,
  }) => getAuthWhoami(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetAuthWhoamiQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthWhoami>>
>;
export type GetAuthWhoamiQueryError = ErrorType<unknown>;

/**
 * @summary Get who am I
 */
export const useGetAuthWhoami = <
  TData = Awaited<ReturnType<typeof getAuthWhoami>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAuthWhoami>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuthWhoamiQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
