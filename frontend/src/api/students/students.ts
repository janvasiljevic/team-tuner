/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * TT API
 * Team tuner API documentation
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { GetStudent200, GetStudentParams } from '.././model';
import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType } from '.././mutator/custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * Get students
 * @summary Get students
 */
export const getStudent = (
  params?: GetStudentParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetStudent200>(
    { url: `/student`, method: 'get', params, signal },
    options,
  );
};

export const getGetStudentQueryKey = (params?: GetStudentParams) =>
  [`/student`, ...(params ? [params] : [])] as const;

export const getGetStudentQueryOptions = <
  TData = Awaited<ReturnType<typeof getStudent>>,
  TError = ErrorType<unknown>,
>(
  params?: GetStudentParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getStudent>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getStudent>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStudentQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudent>>> = ({
    signal,
  }) => getStudent(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetStudentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStudent>>
>;
export type GetStudentQueryError = ErrorType<unknown>;

/**
 * @summary Get students
 */
export const useGetStudent = <
  TData = Awaited<ReturnType<typeof getStudent>>,
  TError = ErrorType<unknown>,
>(
  params?: GetStudentParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getStudent>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStudentQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
