/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * TT API
 * Team tuner API documentation
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  OutQuestioneItemOut,
  OutBfiReportOut,
  OutQuestionerStatus,
} from '.././model';
import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType } from '.././mutator/custom-instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * Get all answers: Get all answers for the current user, based on the JWT
 * @summary Get all answers
 */
export const getAnswer = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutQuestioneItemOut[]>(
    { url: `/answer`, method: 'get', signal },
    options,
  );
};

export const getGetAnswerQueryKey = () => [`/answer`] as const;

export const getGetAnswerQueryOptions = <
  TData = Awaited<ReturnType<typeof getAnswer>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAnswer>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryOptions<Awaited<ReturnType<typeof getAnswer>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAnswerQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAnswer>>> = ({
    signal,
  }) => getAnswer(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetAnswerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAnswer>>
>;
export type GetAnswerQueryError = ErrorType<unknown>;

/**
 * @summary Get all answers
 */
export const useGetAnswer = <
  TData = Awaited<ReturnType<typeof getAnswer>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAnswer>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAnswerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get BFI report
 * @summary Get BFI report
 */
export const getAnswerBfiReport = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutBfiReportOut>(
    { url: `/answer/bfi-report`, method: 'get', signal },
    options,
  );
};

export const getGetAnswerBfiReportQueryKey = () =>
  [`/answer/bfi-report`] as const;

export const getGetAnswerBfiReportQueryOptions = <
  TData = Awaited<ReturnType<typeof getAnswerBfiReport>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAnswerBfiReport>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof getAnswerBfiReport>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAnswerBfiReportQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAnswerBfiReport>>
  > = ({ signal }) => getAnswerBfiReport(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetAnswerBfiReportQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAnswerBfiReport>>
>;
export type GetAnswerBfiReportQueryError = ErrorType<unknown>;

/**
 * @summary Get BFI report
 */
export const useGetAnswerBfiReport = <
  TData = Awaited<ReturnType<typeof getAnswerBfiReport>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAnswerBfiReport>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAnswerBfiReportQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get questioner status: Get the status of the questioner for the current user, based on the JWT
 * @summary Get questioner status
 */
export const getAnswerQuestionerStatus = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OutQuestionerStatus>(
    { url: `/answer/questioner-status`, method: 'get', signal },
    options,
  );
};

export const getGetAnswerQuestionerStatusQueryKey = () =>
  [`/answer/questioner-status`] as const;

export const getGetAnswerQuestionerStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getAnswerQuestionerStatus>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAnswerQuestionerStatus>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof getAnswerQuestionerStatus>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAnswerQuestionerStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAnswerQuestionerStatus>>
  > = ({ signal }) => getAnswerQuestionerStatus(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetAnswerQuestionerStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAnswerQuestionerStatus>>
>;
export type GetAnswerQuestionerStatusQueryError = ErrorType<unknown>;

/**
 * @summary Get questioner status
 */
export const useGetAnswerQuestionerStatus = <
  TData = Awaited<ReturnType<typeof getAnswerQuestionerStatus>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAnswerQuestionerStatus>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAnswerQuestionerStatusQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
